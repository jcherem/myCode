kernel InverseSTKernel : ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessPoint, eEdgeNone> src;  
  Image<eRead, eAccessPoint, eEdgeNone> stmap;
  Image<eWrite, eAccessRandom> dst;

  param:
    float2 resolution;

  void define() {
    defineParam(resolution, "Resolution", float2(1920.0f, 1080.0f));
  }

  void process() {
    float2 uv;
    uv.x = (stmap().x * resolution.x - 0.5f);
    uv.y = (stmap().y * resolution.y - 0.5f);

    int2 iuv = int2(floor(uv));
    float2 fuv = uv - float2(iuv);

    if (src.bounds.inside(iuv.x, iuv.y) && src.bounds.inside(iuv.x + 1, iuv.y + 1)) {
      float4 c00 = 0.25f * (src(iuv) + src(iuv + int2(1, 0)) + src(iuv + int2(0, 1)) + src(iuv + int2(1, 1)));
      float4 c10 = 0.25f * (src(iuv + int2(1, 0)) + src(iuv + int2(2, 0)) + src(iuv + int2(1, 1)) + src(iuv + int2(2, 1)));
      float4 c01 = 0.25f * (src(iuv + int2(0, 1)) + src(iuv + int2(1, 1)) + src(iuv + int2(0, 2)) + src(iuv + int2(1, 2)));
      float4 c11 = 0.25f * (src(iuv + int2(1, 1)) + src(iuv + int2(2, 1)) + src(iuv + int2(1, 2)) + src(iuv + int2(2, 2)));
  
      float4 c0 = lerp(c00, c10, fuv.x);
      float4 c1 = lerp(c01, c11, fuv.x);
  
      dst() = lerp(c0, c1, fuv.y);
    }
  }
};
