set cut_paste_input [stack 0]
version 10.5 v7
BackdropNode {
 inputs 0
 name BackdropNode160
 tile_color 0x26261fff
 label Defocus
 note_font_size 48
 selected true
 xpos -3287
 ypos 7012
 bdwidth 140
 bdheight 168
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode160.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode161
 tile_color 0x1e2821ff
 label "CC on BG"
 note_font_size 48
 selected true
 xpos -3287
 ypos 6190
 bdwidth 290
 bdheight 437
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode161.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode162
 tile_color 0x363c46ff
 label "Plate BG"
 note_font_size 48
 selected true
 xpos -3287
 ypos 5852
 bdwidth 295
 bdheight 255
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode162.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode163
 tile_color 0x222227ff
 label "Reformats\nto 6k"
 note_font_size 48
 selected true
 xpos -3418
 ypos 6684
 bdwidth 271
 bdheight 327
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode163.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode164
 tile_color 0x1e1f27ff
 label "CC and color balance"
 note_font_size 48
 selected true
 xpos -5630
 ypos 9356
 bdwidth 466
 bdheight 523
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode164.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode165
 tile_color 0x4b3c44ff
 label "Overall CC"
 note_font_size 48
 selected true
 xpos -3402
 ypos 10174
 bdwidth 342
 bdheight 187
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode165.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode166
 tile_color 0x494b3aff
 label Noise
 note_font_size 48
 selected true
 xpos -3404
 ypos 10373
 bdwidth 352
 bdheight 216
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode166.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode167
 tile_color 0x414233ff
 label Plate
 note_font_size 48
 selected true
 xpos -5299
 ypos 5584
 bdwidth 491
 bdheight 269
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode167.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode168
 tile_color 0x383c41ff
 label "Blur on YCbCr for\n antialising issues"
 note_font_size 48
 selected true
 xpos -5299
 ypos 5904
 bdwidth 482
 bdheight 275
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode168.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode169
 tile_color 0x4c3c48ff
 label "Input Denoise Plate"
 note_font_size 48
 selected true
 xpos -5299
 ypos 6304
 bdwidth 478
 bdheight 215
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode169.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode170
 tile_color 0x2d2a33ff
 label ScreenClean
 note_font_size 48
 selected true
 xpos -5299
 ypos 7948
 bdwidth 290
 bdheight 174
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode170.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode171
 tile_color 0x262c2bff
 label "Stack IBK key"
 note_font_size 48
 selected true
 xpos -4871
 ypos 7497
 bdwidth 394
 bdheight 625
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode171.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode172
 tile_color 0x4a4b43ff
 label "Roto for Details like Hair"
 note_font_size 48
 selected true
 xpos -4384
 ypos 7474
 bdwidth 558
 bdheight 372
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode172.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode173
 tile_color 0x474339ff
 label Despill
 note_font_size 48
 selected true
 xpos -5721
 ypos 8297
 bdwidth 667
 bdheight 461
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode173.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode174
 tile_color 0x2b2d22ff
 label Alpha
 note_font_size 48
 selected true
 xpos -4654
 ypos 8396
 bdwidth 690
 bdheight 488
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode174.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode175
 tile_color 0x222828ff
 label "Relight despill with BG"
 note_font_size 48
 selected true
 xpos -6392
 ypos 8976
 bdwidth 1070
 bdheight 222
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode175.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode176
 tile_color 0x33282fff
 label "Despill Screen\nGraded to a RGB Value of 0.5"
 note_font_size 48
 selected true
 xpos -4229
 ypos 8899
 bdwidth 686
 bdheight 475
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode176.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode177
 tile_color 0x363d3bff
 label "HardLifht or Overlay Pass\nDegrained"
 note_font_size 48
 selected true
 xpos -3500
 ypos 8897
 bdwidth 394
 bdheight 480
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode177.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
push $cut_paste_input
Invert {
 name Invert1
 selected true
 xpos -6659
 ypos 8931
}
Constant {
 inputs 0
 channels rgb
 color {{parent.PxF_ScreenClean.screen_color} {parent.PxF_ScreenClean.screen_color} {parent.PxF_ScreenClean.screen_color} {parent.PxF_ScreenClean.screen_color}}
 color_panelDropped true
 name Constant5
 selected true
 xpos -6810
 ypos 8673
}
Group {
 name apDespill6
 help "apDespill v1.0 by Adrian Pueyo\n\nGizmo to despill an image, with options to despill any hue (and not only the primaries), select different algorithms for des/respilling, and protect tones from the despill.\n\nIf you just want a basic despill, its default values should already be enough and the tool will avoid any extra calculations.\n\nadrianpueyo.com, 2014-2017"
 onCreate "n = nuke.thisNode()\nn\['tolerance'].setRange(0,2)\nn\['prot1_tolerance'].setFlag(0x00000004)\nn\['prot1_effect'].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nif k.name() == \"color\":\n    if k.getValue() == 0:\n        n\[\"custom_weight\"].setLabel(\"green - blue\")\n    elif k.getValue() == 1:\n        n\[\"custom_weight\"].setLabel(\"red - blue\")\n    elif k.getValue() == 2:\n        n\[\"custom_weight\"].setLabel(\"red - green\")\n    n\[\"pick\"].setVisible(k.getValue() == 3)\nelif k.name() == \"mode\":\n    n\[\"custom_weight\"].setVisible(n\[\"mode\"].getValue()==3)\nelif k.name() in \[\"out\",\"output_alpha\"]:\n    n\[\"respill_math\"].setEnabled(n\[\"out\"].getValue()==0 or n\[\"output_alpha\"].getValue()==1)\n    n\[\"respill_color\"].setEnabled(n\[\"out\"].getValue()==0)\nelif k.name() == \"prot1_activate\":\n    protA = n\[\"prot1_activate\"].value()\n    n\[\"prot1_preview\"].setEnabled(protA)\n    n\[\"prot1\"].setVisible(protA)\n    n\[\"prot1_tolerance\"].setVisible(protA)\n    n\[\"prot1_falloff\"].setVisible(protA)\n    n\[\"prot1_effect\"].setVisible(protA)"
 tile_color 0x8b8b8bff
 selected true
 xpos -6810
 ypos 8814
 addUserKnob {20 apDespill}
 addUserKnob {6 pick_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {41 "Local GPU: " T apDespillKernel.gpuName}
 addUserKnob {41 "Use GPU if Available" T apDespillKernel.useGPUIfAvailable}
 addUserKnob {41 vectorize l "Vectorize on CPU" -STARTLINE T apDespillKernel.vectorize}
 addUserKnob {26 ""}
 addUserKnob {4 color t "Select a primary as a starting point, or custom to show RGB controls to select any color." M {red green blue custom ""}}
 color custom
 addUserKnob {18 pick}
 pick {-0.0008702277555 0.3032226264 0.02479553036}
 addUserKnob {6 pick_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 pick_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 pick_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 dfg_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {4 out l output t "Quick switch to output the despilled image or the substracted one." M {despill spill}}
 addUserKnob {6 output_alpha l "output spill matte in alpha" t "Output the spill luminance in the alpha channel." -STARTLINE}
 addUserKnob {4 mode l "despill math" t "average = avg of other two channels\nmaximum = max of other two channels\nminimum = min of other two channels\ncustom = select custom weights" M {average maximum minimum custom}}
 addUserKnob {7 custom_weight l "red - blue" t "-1 = only capped by the first channel\n0 = capped by avg of both\n1 = only capped by the second channel" -STARTLINE +HIDDEN R -1 1}
 addUserKnob {7 hue_offset l "hue offset" t "Rotate the despill vectors to despill an arbitrary tone other than the primaries.\nNote: A rotation of +-120 degrees is the same as selecting another color channel." R -180 180}
 addUserKnob {7 tolerance t "Use this to multiply the hue tolerance (the limiter value). You can move it all the way down to 0 to completely remove a hue from your image." R 0 2}
 tolerance 1
 addUserKnob {6 prot1_activate l "protect tones" t "Enable controls to select tones to protect from despilling." +STARTLINE}
 addUserKnob {6 prot1_preview l preview t "Output the protected tones." -STARTLINE +DISABLED}
 addUserKnob {18 prot1 l protect t "Pick the central hue to protect.\n(ctrl/cmd+alt+click)" +HIDDEN}
 prot1 {0 0 0}
 addUserKnob {6 prot1_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 prot1_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 prot1_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 prot1_tolerance l tolerance t "Amount of hues to include in the selection." +HIDDEN}
 prot1_tolerance 0.2
 addUserKnob {7 prot1_falloff l falloff t "Falloff for the hue selection. A higher falloff will make hues apart from the picked one lose weight more quickly." +HIDDEN R 0 4}
 prot1_falloff 2
 addUserKnob {7 prot1_effect l effect t "Multiplier for the hue protection, and for the spill limit value." +HIDDEN R 0 10}
 prot1_effect 1
 addUserKnob {26 respill_divider l "" +STARTLINE}
 addUserKnob {4 respill_math l "respill math" t "Settings for the way of desaturating the spill before adding it back." M {"Rec 709" "Ccir 601" Average Maximum "" ""}}
 addUserKnob {18 respill_color l "respill color" t "RGB multiplier for the desaturated spill when adding it back.\n\nNote: if used on non-degrained plates (which should be avoided anyway), any value other than 1 here will most likely produce grain artifacts." R 0 4}
 respill_color 1
 addUserKnob {6 respill_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 respill_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 respill_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {41 maskChannelMask l mask T Merge.maskChannelMask}
 addUserKnob {41 inject -STARTLINE T Merge.inject}
 addUserKnob {41 invert_mask l invert -STARTLINE T Merge.invert_mask}
 addUserKnob {41 fringe -STARTLINE T Merge.fringe}
 addUserKnob {41 mix T Merge.mix}
 addUserKnob {26 version_author l "" t "apDespill v1.0\n14 March, 2017" +STARTLINE T "<span style=\"color:#666\"><br/><b>apDespill v1.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2014-2017</span>"}
 addUserKnob {20 GPU_Settings l "GPU Settings"}
 addUserKnob {41 maxGPUMemory l "Percentage of GPU memory to use" T apDespillKernel.maxGPUMemory}
 addUserKnob {41 maxTileLines l "Percentage of image height per tile" T apDespillKernel.maxTileLines}
}
 Input {
  inputs 0
  name Inputmask
  selected true
  xpos 339
  ypos -580
  number 1
 }
 Input {
  inputs 0
  name Inputimg
  selected true
  xpos 449
  ypos -608
 }
set N1f9d1ae0 [stack 0]
 Shuffle {
  name Shuffle
  selected true
  xpos 559
  ypos -608
  disable {{"\[exists parent.input0]"}}
 }
 BlinkScript {
  ProgramGroup 1
  KernelDescription "2 \"apDespillKernel\" iterate pixelWise 86d17838f15464a9e9273cd415388c19006f9163a6efd15e7ad521c828dc89ac 2 \"src\" Read Point \"dst\" Write Point 17 \"limit\" Float 1 AACAPw== \"shift\" Float 1 AAAAAA== \"weights\" Float 1 AAAAAA== \"outmode\" Int 1 AAAAAA== \"output_alpha\" Int 1 AAAAAA== \"clr\" Int 1 AAAAAA== \"mode\" Int 1 AAAAAA== \"respill_math\" Int 1 AAAAAA== \"respill_color\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"prot1_on\" Int 1 AAAAAA== \"prot1_preview\" Int 1 AAAAAA== \"prot1\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"prot1_tolerance\" Float 1 AAAAAA== \"prot1_mult\" Float 1 AAAAAA== \"prot1_falloff\" Float 1 AAAAAA== \"lumaHueShift\" Int 1 AAAAAA== \"pickSpill\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== 17 \"limit\" 1 1 \"shift\" 1 1 \"weights\" 1 1 \"outmode\" 1 1 \"output_alpha\" 1 1 \"clr\" 1 1 \"mode\" 1 1 \"respill_math\" 1 1 \"respill_color\" 4 1 \"prot1_on\" 1 1 \"prot1_preview\" 1 1 \"prot1\" 3 1 \"prot1_tolerance\" 1 1 \"prot1_mult\" 1 1 \"prot1_falloff\" 1 1 \"lumaHueShift\" 1 1 \"pickSpill\" 3 1 3 \"_usePicked\" Int 1 1 AAAAAA== \"_clr\" Int 1 1 AAAAAA== \"_ret\" Int 1 1 AAAAAA=="
  kernelSource "//---------------------------------------------------------\n// apDespillKernel - apDespill v1.0 by Adrian Pueyo\n//\n// Despill an image, with options to despill any hue (and\n// not only the primaries), select different algorithms for\n// des/respilling, and protect tones from the despill.\n//\n// adrianpueyo.com, 2014-2017\n// ---------------------------------------------------------\n\nstatic inline float y_convert_ccir601(const float4 in)\{\n  return in.x * 0.299f + in.y * 0.587f + in.z * 0.114f;\n\}\n\nstatic inline float y_convert_rec709(const float4 in)\{\n  return in.x * 0.2125f + in.y * 0.7154f + in.z * 0.0721f;\n\}\n\nstatic inline float4 hueShift(const float4 in, const float H)\{\n  if(H==0.0f)\{\n    return in;\n  \}else\{\n    float U = cos(H*PI/180);\n    float W = sin(H*PI/180);\n    float3 ret;\n    ret.x = (.299+.701*U+.168*W)*in.x + (.587-.587*U+.330*W)*in.y + (.114-.114*U-.497*W)*in.z;\n    ret.y = (.299-.299*U-.328*W)*in.x + (.587+.413*U+.035*W)*in.y + (.114-.114*U+.292*W)*in.z;\n    ret.z = (.299-.3*U+1.25*W)*in.x + (.587-.588*U-1.05*W)*in.y + (.114+.886*U-.203*W)*in.z;\n    return float4(ret.x,ret.y,ret.z,in\[3]);\n  \}\n\}\n\nstatic inline float4 hueRotate(const float4 in, const float H)\{\n  if(H==0.0f)\{\n    return in;\n  \}else\{\n    float cosH = cos(H*PI/180);\n    float sinH = sin(H*PI/180);\n    float3 ret;\n    ret.x = (in.x+in.y+in.z)*(1-cosH)/3 + in.x*cosH + (-in.y/sqrt(3.0f)+in.z/sqrt(3.0f))*sinH;\n    ret.y = (in.x+in.y+in.z)*(1-cosH)/3 + in.y*cosH + (in.x/sqrt(3.0f)-in.z/sqrt(3.0f))*sinH;\n    ret.z = (in.x+in.y+in.z)*(1-cosH)/3 + in.z*cosH + (-in.x/sqrt(3.0f)+in.y/sqrt(3.0f))*sinH;\n    return float4(ret.x,ret.y,ret.z,in\[3]);\n  \}\n\}\n\nfloat3 vecToPlane(float3 v1, float3 v2 = float3(1.0f,1.0f,1.0f))\{\n  float3 v1onv2;\n  v1onv2 = v2 * float((float(dot(v2,v1))/float(dot(v2,v2)))); //Projection of vector on another (plane's normal)\n  return v1-v1onv2; //Projection of vector on plane\n\}\n\nstatic inline float colorAngle(const float3 v1, const float3 v2)\{\n  const float3 vN=float3(1.0f,1.0f,1.0f);\n  float ang = acos(float(dot(v1,v2))/float(sqrt(dot(v1,v1)*dot(v2,v2))));\n  float3 crs = cross(v1,v2);\n  if (dot(vN, crs) > 0) \{\n    ang = -ang;\n  \}\n  return ang;\n\}\n\nkernel apDespillKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src;\n  Image<eWrite> dst;\n\n  param:\n    float limit;\n    float shift;\n    float weights;\n    int outmode;//0=despill,1=spill\n    int output_alpha;\n    int clr; //0=red,1=green,2=blue\n    int mode; //0=average,1=maximum,2=minimum,3=custom\n    int respill_math; //0=Rec709,1=Ccir601,2=Avg,3=Max\n    float4 respill_color;\n    int prot1_on;\n    int prot1_preview;\n    float3 prot1;\n    float prot1_tolerance;\n    float prot1_mult;\n    float prot1_falloff;\n    int lumaHueShift;//If disabled, the hue is just rotated without the luma coefficients\n    float3 pickSpill;\n  local:\n    int _usePicked;\n    int _clr;\n    int _ret;\n\n  void define() \{\n    defineParam(limit, \"limit\", 1.0f);\n    defineParam(shift, \"shift\", 0.0f);\n  \}\n\n  void init() \{\n    _ret = 0;\n    if(clr!=3)\{//red green or blue\n      _usePicked = 0;\n      _clr = clr;\n    \}else if(pickSpill.x==pickSpill.y && pickSpill.x==pickSpill.z)\{\n      _ret = 1;//if \"custom\" selected but has a gray value, avoid any calculations\n    \}else\{\n      _usePicked = 1;\n      _clr = 0;\n    \}\n  \}\n\n  void process() \{\n\n    if(_ret == 1)\{ dst()=src(); return; \}//Avoid any calculations if no despill selected\n    //0. Calculate autoShift if picked spill is not 0\n    float autoShift = 0.0f;\n    if(_usePicked==1)\{\n      float3 vNorm = float3(1.0f,1.0f,1.0f);\n      autoShift = colorAngle(vecToPlane(pickSpill,vNorm),vecToPlane(float3(1.0f,0.0f,0.0f),vNorm));\n      autoShift = autoShift*180/PI;//to deg\n    \}\n\n    //1. HueShift IN\n    float4 despilled;\n    if (lumaHueShift==1)\{\n      despilled = hueShift(src(),shift-autoShift);\n    \}else\{\n      despilled = hueRotate(src(),shift-autoShift);\n    \}\n\n    //2. Calculate the limit\n    float resultLimit = 0.0f;\n    int2 others;\n    if(_clr==0)\{//If red (and if _usePicked, also set red)\n      others = int2(1,2);\n    \}else if(_clr==1)\{\n      others=int2(0,2);\n    \}else if(_clr==2)\{\n      others=int2(0,1);\n    \}\n\n    if(mode==0)\{//average\n      resultLimit = (despilled\[others\[0]]+despilled\[others\[1]])/2;\n    \}else if(mode==1)\{//max\n      resultLimit = max(despilled\[others\[0]],despilled\[others\[1]]);\n    \}else if(mode==2)\{//min\n      resultLimit = min(despilled\[others\[0]],despilled\[others\[1]]);\n    \}else\{//custom\n      resultLimit = despilled\[others\[0]]*weights+despilled\[others\[1]]*(1-weights);\n    \}\n\n    //3. Protect tones\n    float prot1_result;\n    if(prot1_on==1&&(prot1\[0]!=prot1\[1]||prot1\[0]!=prot1\[2]||prot1\[1]!=prot1\[2]))\{\n      float cos_prot1_angle;\n      cos_prot1_angle = (src(0)*prot1\[0]+src(1)*prot1\[1]+src(2)*prot1\[2]) / (sqrt(prot1\[0]*prot1\[0]+prot1\[1]*prot1\[1]+prot1\[2]*prot1\[2]) * sqrt(src(0)*src(0)+src(1)*src(1)+src(2)*src(2)));\n      prot1_result = pow(clamp(cos_prot1_angle,0.0f,1.0f),1/pow(prot1_tolerance,prot1_falloff));\n      resultLimit = resultLimit*(1+prot1_result*prot1_mult);\n    \}\n    \n\n    //4. Calculate the despill and return the hue shift\n    for (int component = 0; component < dst.kComps; component++)\{\n      despilled\[component] = component==_clr?min(despilled\[component],resultLimit*limit):despilled\[component];\n    \}\n    if (lumaHueShift==1)\{\n      despilled = hueShift(despilled,-shift+autoShift);\n    \}else\{\n      despilled = hueRotate(despilled,-shift+autoShift);\n    \}\n\n    //5. Respill/restore despill values\n    float luma;\n    float4 spill = src()-despilled;\n    if(respill_math==0)\{\n      luma = y_convert_rec709(spill);\n    \}else if(respill_math==1)\{\n      luma = y_convert_ccir601(spill);\n    \}else if(respill_math==2)\{\n      luma = (spill\[0]+spill\[1]+spill\[2])/3;\n    \}else\{\n      luma = max(max(spill\[0],spill\[1]),spill\[2]);\n    \}\n\n    //6. Output (options)\n    if(prot1_preview==1 && prot1_on==1)\{\n      dst() = src()*clamp(prot1_result*prot1_mult,0.0f,1.0f);\n    \}else if(outmode==0)\{\n      dst() = despilled+luma*respill_color;\n      if(output_alpha==0)\{\n        dst(3)=src(3);\n      \}else\{\n        dst(3)=luma;\n      \}\n    \}else\{\n      if(output_alpha==0)\{\n        spill\[3]=src(3);\n      \}else\{\n        spill\[3]=luma;\n      \}\n      dst() = spill;\n    \}\n    //dst() = hueRotate(src(),shift-autoShift);\n    //dst() = autoShift;\n  \}\n\};"
  rebuild ""
  apDespillKernel_limit {{parent.tolerance}}
  apDespillKernel_shift {{parent.hue_offset}}
  apDespillKernel_weights {{(parent.custom_weight+1)/2}}
  apDespillKernel_outmode {{parent.out}}
  apDespillKernel_output_alpha {{parent.output_alpha}}
  apDespillKernel_clr {{parent.color}}
  apDespillKernel_mode {{parent.mode}}
  apDespillKernel_respill_math {{parent.respill_math}}
  apDespillKernel_respill_color {{parent.respill_color.r} {parent.respill_color.g} {parent.respill_color.b} 1}
  apDespillKernel_prot1_on {{parent.prot1_activate}}
  apDespillKernel_prot1_preview {{parent.prot1_preview}}
  apDespillKernel_prot1 {{parent.prot1} {parent.prot1} {parent.prot1}}
  apDespillKernel_prot1_tolerance {{parent.prot1_tolerance}}
  apDespillKernel_prot1_mult {{parent.prot1_effect}}
  apDespillKernel_prot1_falloff {{parent.prot1_falloff}}
  apDespillKernel_pickSpill {{parent.pick} {parent.pick} {parent.pick}}
  rebuild_finalise ""
  maxGPUMemory 60
  maxTileLines 8
  name apDespillKernel
  selected true
  xpos 559
  ypos -584
 }
push $N1f9d1ae0
 Merge2 {
  inputs 2+1
  operation copy
  bbox B
  name Merge
  selected true
  xpos 449
  ypos -580
 }
 Output {
  name Output
  selected true
  xpos 449
  ypos -552
 }
end_group
Merge2 {
 inputs 2
 operation multiply
 name Merge55
 selected true
 xpos -6810
 ypos 8919
}
Dot {
 name Dot419
 selected true
 xpos -6776
 ypos 9148
}
Merge2 {
 operation minus
 name Merge56
 selected true
 xpos -6646
 ypos 9135
}
StickyNote {
 inputs 0
 name StickyNote52
 tile_color 0xff
 label "Soft Mask"
 note_font_size 40
 selected true
 xpos -4173
 ypos 8501
}
StickyNote {
 inputs 0
 name StickyNote53
 tile_color 0xff
 label "Hard Mask"
 note_font_size 40
 selected true
 xpos -4627
 ypos 8506
}
StickyNote {
 inputs 0
 name StickyNote54
 tile_color 0xff
 label Skin
 note_font_size 40
 selected true
 xpos -5494
 ypos 8501
}
StickyNote {
 inputs 0
 name StickyNote55
 tile_color 0xff
 label Hair
 note_font_size 40
 selected true
 xpos -5705
 ypos 8400
}
StickyNote {
 inputs 0
 name StickyNote56
 tile_color 0xff
 label Neutral
 note_font_size 40
 selected true
 xpos -5306
 ypos 8535
}
Constant {
 inputs 0
 channels rgb
 color 0.5
 name Constant6
 selected true
 xpos -4199
 ypos 9160
}
push $cut_paste_input
Roto {
 replace true
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x45160000 x44a8c000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup Bezier1 512 bezier
     {{cc
       {f 8192}
       {px
        {x449c4000 x449dc000 x449f0000 x44a00000 x44a10000 x44a14000 x44a1e000 x44a28000 x44a32000 x44a46000 x44a5a000 x44a72000 x44a8c000}
        {{{x 4
        {xc371ae09 -}}
       {xc2d98c20 x4188baa8 1 x4188baa8 1}
       {xc28d896e x4178a025 1 x4178a025 1}
       {x 7
        {0 -}}}
      {{x 4
        {xc3ccb19a -}}
       {xc3395ac4 x41e67a2e 1 x41e67a2e 1}
       {xc2f294f6 x41d18c4e 1 x41d18c4e 1}
       {x 7
        {xc0000000 -}}}}
        {{{x 2
        {x4568c377 -}}
       {x459bd822 -}
       {x45634377 xc369d769 1 xc369d769 1}
       {x449bb1b6 xc39bb7c8 1 xc39bb7c8 1}
       {x440276f6 xc3450943 1 xc3450943 1}
       {xc305b328 -}
       {xc2925cbc x42113eb2 1 x42113eb2 1}
       {x43788008 x4307408a 1 x4307408a 1}
       {x44f47337 x42acdc32 1 x42acdc32 1}
       {x 3
        {x450c3b36 -}}}
      {{x 2
        {x44ec6184 -}}
       {x4530c3f5 -}
       {x44d894b7 xc2a5e7d4 1 xc2a5e7d4 1}
       {x44bba016 xc22f2106 1 xc22f2106 1}
       {x44a1da65 xc2f0ccfe 1 xc2f0ccfe 1}
       {x44248cce -}
       {x4428f002 x4060a3e6 1 x4060a3e6 1}
       {x442d5335 -}
       {x43e0199a xc25c28fa 1 xc25c28fa 1}
       {x 3
        {xc3cbc006 -}}}}
        {{{x 4
        {x4371ae05 -}}
       {x42d98c40 xc188ba9a 1 xc188ba9a 1}
       {x428d8988 xc178a049 1 xc178a049 1}
       {x 7
        {0 -}}}
      {{x 4
        {x43ccb19c -}}
       {x43395ac6 xc1e67a30 1 xc1e67a30 1}
       {x42f294f9 xc1d18c50 1 xc1d18c50 1}
       {x 7
        {x40000000 -}}}}
        {{{x 4
        {xc1e07600 -}}
       {xc1e9019b xbe0ca880 1 xbe0ca880 1}
       {xc1eb732a xbdffc549 1 xbdffc549 1}
       {x 7
        {xc1f00000 -}}}
      {{x 4
        {x41803180 -}}
       {x3f1cea72 xbffdac1e 1 xbffdac1e 1}
       {xc072d095 xbfe6a308 1 xbfe6a308 1}
       {x 7
        {xc1400000 -}}}}
        {{{x459250c7 0 1 x40cf97dc 1}
       {x45983a60 x42094d29 1 x42094d29 1}
       {x45a9ea0a -}
       {x459250c7 xc3667b29 1 xc3667b29 1}
       {x44dab1d6 xc3c79f06 1 xc3c79f06 1}
       {x442c6b19 xc37da6ab 1 xc37da6ab 1}
       {xc1d00000 -}
       {x42dc1333 x4218e146 1 x4218e146 1}
       {x43b21998 x4246a815 1 x4246a815 1}
       {x4455bffa x42be7d70 1 x42be7d70 1}
       {x450d5199 x41b058e0 1 x41b058e0 1}
       {x4512d460 x4055109e 1 x4055109e 1}
       {x4513bb32 xb36c4ec5 1 0 1}}
      {{x45546dde 0 1 xc0533380 1}
       {x4552c777 -}
       {x4552ea87 x3f284ccd 1 x3f284ccd 1}
       {x45546dde -}
       {x4545784a xc26e5f60 1 xc26e5f60 1}
       {x452f2ef7 xc32400aa 1 xc32400aa 1}
       {x44fb6fff -}
       {x44fda19a x4060a433 1 x4060a433 1}
       {x44ffd334 -}
       {x44ebf003 xc23eeb70 1 xc23eeb70 1}
       {x43f94cd0 xc2268cd4 1 xc2268cd4 1}
       {x43a60666 xc0c93abb 1 xc0c93abb 1}
       {x4398666c xb29d89d8 1 0 1}}}
        {{{x 4
        {x41e07600 -}}
       {x41e9019b x3e0ca880 1 x3e0ca880 1}
       {x41eb732a x3dffc549 1 x3dffc549 1}
       {x 7
        {x41f00000 -}}}
      {{x 4
        {xc1803180 -}}
       {xbf1cea72 x3ffdac1e 1 x3ffdac1e 1}
       {x4072d095 x3fe6a308 1 x3fe6a308 1}
       {x 7
        {x41400000 -}}}}
        {{{0 0 1 xc1837920 1}
       {xc3037920 -}
       {xc25b4d61 x40e9bae4 1 x40e9bae4 1}
       {x 10
        {0 -}}}
      {{0 0 1 x41529000 1}
       {x42d29000 -}
       {x422f9cf9 xc0bb2aab 1 xc0bb2aab 1}
       {x 10
        {0 -}}}}
        {{{x45b3df6d 0 1 x414cf652 1}
       {x45b86905 x412adf5d 1 x412adf5d 1}
       {x45bb3706 -}
       {x45b04c39 xc303019c 1 xc303019c 1}
       {x453105e1 xc3dfb8b1 1 xc3dfb8b1 1}
       {x4491e32a xc350144d 1 xc350144d 1}
       {x444d1334 -}
       {x447cd99a x4218e146 1 x4218e146 1}
       {x 2
        {x44965000 -}}
       {x451ebccd x40e03780 1 x40e03780 1}
       {x45207d3c x40c28f48 1 x40c28f48 1}
       {x45283ccc x41343b90 1 0 1}}
      {{x453f3be7 0 1 xc0afffc0 1}
       {x453c7be8 -}
       {x453fa277 -}
       {x453b1be8 -}
       {x454b43d5 x41e944b3 1 x41e944b3 1}
       {x454d5546 -}
       {x45212ccd -}
       {x4522459a x4060a466 1 x4060a466 1}
       {x 2
        {x45235e68 -}}
       {x448bb000 xc29a2928 1 xc29a2928 1}
       {x444a4b6c xc19f4bc1 1 xc19f4bc1 1}
       {x441aecd1 xc13e8290 1 0 1}}}
        {{{0 0 1 x41837920 1}
       {x43037920 -}
       {x425b4d61 xc0e9bae4 1 xc0e9bae4 1}
       {x 10
        {0 -}}}
      {{0 0 1 xc1529040 1}
       {xc2d29040 -}
       {xc22f9d2e x40bb2ae4 1 x40bb2ae4 1}
       {x 10
        {0 -}}}}
        {{{x3ff72000 0 1 xbfb0b000 1}
       {xc111cc00 -}
       {xc02b28b7 x3f1d0e39 1 x3f1d0e39 1}
       {x3ff72000 -}
       {xc0b75d8c xbf7c32c4 1 xbf7c32c4 1}
       {xc0fd7775 xbf654bf2 1 xbf654bf2 1}
       {x 7
        {xc1400000 -}}}
      {{x4186e280 0 1 x408da440 1}
       {x42511580 -}
       {x42081c06 xbffbceab 1 xbffbceab 1}
       {x4186e280 xbfac10f8 1 xbfac10f8 1}
       {x41484e29 xbeef2d50 1 xbeef2d50 1}
       {x414306d7 xbd97de5b 1 xbd97de5b 1}
       {x 7
        {x41400000 -}}}}
        {{{x45bd983a 0 1 x3ee7cc5c 1}
       {x45be01d1 x40193ae9 1 x40193ae9 1}
       {x45bf3d9c -}
       {x45bd2ea0 xc1c59e80 1 xc1c59e80 1}
       {x45758e7b xc39d3c94 1 xc39d3c94 1}
       {x4535d187 xc39c59b1 1 xc39c59b1 1}
       {x44d98001 -}
       {x44f16334 x4218e14a 1 x4218e14a 1}
       {x4504a334 -}
       {x44a3266a -}
       {x45534334 -}
       {x4550699a -}
       {x45534334 x40a85e9e 1 0 1}}
      {{x450f0108 0 1 xbdccdd10 1}
       {x450e743a xc000002f 1 xc000002f 1}
       {x450c4107 -}
       {x450e743b x41533380 1 x41533380 1}
       {x453c7abe x42be5cc6 1 x42be5cc6 1}
       {x4549f139 -}
       {x45153333 -}
       {x45157966 x40287a66 1 x40287a66 1}
       {x451764ce x41936c00 1 x41936c00 1}
       {x4528dcce -}
       {x44d61000 xc2601749 1 xc2601749 1}
       {x44b7a99a -}
       {x44d61000 x41e07e05 1 0 1}}}
        {{{xbff72000 0 1 x3fb0b000 1}
       {x4111cc00 -}
       {x402b28b7 xbf1d0e39 1 xbf1d0e39 1}
       {xbff72000 -}
       {x40b75d8c x3f7c32c4 1 x3f7c32c4 1}
       {x40fd7775 x3f654bf2 1 x3f654bf2 1}
       {x 7
        {x41400000 -}}}
      {{xc186e180 0 1 xc08da440 1}
       {xc2511500 -}
       {xc2081b47 x3ffbceab 1 x3ffbceab 1}
       {xc186e180 x3fac100e 1 x3fac100e 1}
       {xc1484d00 x3eef2843 1 x3eef2843 1}
       {xc143066b x3d97c925 1 x3d97c925 1}
       {x 7
        {xc1400000 -}}}}
        {{{xc19ff000 0 1 x402b5800 1}
       {x3fb68000 -}
       {xc130f895 xbf984e39 1 xbf984e39 1}
       {xc19ff000 -}
       {xc1798da0 x3f10b06d 1 x3f10b06d 1}
       {xc16571bc x3f038cdb 1 x3f038cdb 1}
       {x 5
        {xc1400000 -}}
       {xc26401b4 -}
       {xc1400000 x40a628f5 1 0 1}}
      {{xbf0ec000 0 1 x40d66420 1}
       {x42542920 -}
       {x41d7abdb xc03e91e4 1 xc03e91e4 1}
       {xbf0ec000 xc01d0d17 1 xc01d0d17 1}
       {xc144dca7 xbfad2d84 1 xbfad2d84 1}
       {xc16164e5 xbf072c39 1 xbf072c39 1}
       {x 5
        {xc1800000 -}}
       {xc20d5f9e -}
       {xc1800000 x400ed7e9 1 0 1}}}
        {{{x45bd7284 0 1 x3f8cce00 1}
       {x45bdb8eb -}
       {x45bdacd9 xbee7c000 1 xbee7c000 1}
       {x45bd7284 xc02eff00 1 xc02eff00 1}
       {x458794d0 xc36bdd0d 1 xc36bdd0d 1}
       {x45677ae0 xc3a9df1d 1 xc3a9df1d 1}
       {x44f50ccd -}
       {x4505fb33 x4212a3d6 1 x4212a3d6 1}
       {x45117000 -}
       {x44ad2998 -}
       {x4556c018 x41f011c0 1 x41f011c0 1}
       {x455e40a6 -}
       {x44ef0699 xc33dac56 1 0 1}}
      {{x44ffa24e 0 1 xbf0ccf00 1}
       {x44ff157f -}
       {x44ff2da4 x3e67c99a 1 x3e67c99a 1}
       {x44ffa24e x3faeff00 1 x3faeff00 1}
       {x4533c411 x42a39590 1 x42a39590 1}
       {x45372c84 -}
       {x4513a666 -}
       {x45145200 x40cdec00 1 x40cdec00 1}
       {x45190333 x421101b3 1 x421101b3 1}
       {x45364e66 -}
       {x451742e9 xc2677d80 1 xc2677d80 1}
       {x44cd7684 -}
       {x44d5b2a0 x40f33e4f 1 0 1}}}
        {{{x419ff000 0 1 xc02b5800 1}
       {xbfb68000 -}
       {x4130f895 x3f984e39 1 x3f984e39 1}
       {x419ff000 -}
       {x41798e00 xbf10aff2 1 xbf10aff2 1}
       {x41657209 xbf038db7 1 xbf038db7 1}
       {x 5
        {x41400000 -}}
       {x426401b2 -}
       {x41400000 xc0a628f3 1 0 1}}
      {{x3f0ec000 0 1 xc0d66405 1}
       {xc2542905 -}
       {xc1d7abc1 x403e91cc 1 x403e91cc 1}
       {x3f0ec000 x401d0d09 1 x401d0d09 1}
       {x4144dca3 x3fad2d82 1 x3fad2d82 1}
       {x416164e2 x3f072c42 1 x3f072c42 1}
       {x 5
        {x41800000 -}}
       {x420d5fa2 -}
       {x41800000 xc00ed7f0 1 0 1}}}
        {{{xc19aca00 0 1 x402c1c00 1}
       {x400a9000 -}
       {xc126091d xbf98fc72 1 xbf98fc72 1}
       {xc19aca00 -}
       {xc18c0e80 x3e727f1a 1 x3e727f1a 1}
       {xc187d812 x3e5c76db 1 x3e5c76db 1}
       {x 7
        {xc1800000 -}}}
      {{x40a20000 0 1 x40d745c7 1}
       {x426b85c7 -}
       {x42033c0b xc03f5a78 1 xc03f5a78 1}
       {x40a20000 xc0221802 1 xc0221802 1}
       {xc0f6dfbc xbfbd47e6 1 xbfbd47e6 1}
       {xc11b99e0 xbf1cb729 1 xbf1cb729 1}
       {x 7
        {xc1400000 -}}}}
        {{{x45bd9583 0 1 xb8800000 1}
       {x 2
        {x45bd9582 -}}
       {x45bd9583 -}
       {x45911990 xc34c231a 1 xc34c231a 1}
       {x457b9516 xc3ad8392 1 xc3ad8392 1}
       {x450a6000 -}
       {x45174b33 x42255c26 1 x42255c26 1}
       {x45243666 -}
       {x449f1ccc -}
       {x45605fff x42345ad0 1 x42345ad0 1}
       {x456ba5ac -}
       {x44ba1333 xc383a3c2 1 0 1}}
      {{x44ddf224 0 1 xb7800000 1}
       {x 2
        {x44ddf223 -}}
       {x44ddf224 x38400000 1 x38400000 1}
       {x452200bb x42cbcced 1 x42cbcced 1}
       {x452ea91c -}
       {x450c199a -}
       {x450e3be7 x418f8526 1 x418f8526 1}
       {x45175001 x4263ef5a 1 x4263ef5a 1}
       {x4543a800 -}
       {x4523c665 xc27ce963 1 xc27ce963 1}
       {x44d96f8c xc22f1a9f 1 xc22f1a9f 1}
       {x44bebffe xc02fae43 1 0 1}}}
        {{{x419aca00 0 1 xc02c1c00 1}
       {xc00a9000 -}
       {x4126091d x3f98fc72 1 x3f98fc72 1}
       {x419aca00 -}
       {x418c0e80 xbe727f1a 1 xbe727f1a 1}
       {x4187d812 xbe5c76db 1 xbe5c76db 1}
       {x 7
        {x41800000 -}}}
      {{xc0a20100 0 1 xc0d745a7 1}
       {xc26b85c7 -}
       {xc2033c1d x403f5a5c 1 x403f5a5c 1}
       {xc0a20100 x4022181d 1 x4022181d 1}
       {x40f6e000 x3fbd486a 1 x3fbd486a 1}
       {x411b9a04 x3f1cb6db 1 x3f1cb6db 1}
       {x 7
        {x41400000 -}}}}
        {{{0 0 1 xc0371b00 1}
       {xc1b71b00 -}
       {xc118b6a6 x3fa2c2ab 1 x3fa2c2ab 1}
       {x 10
        {0 -}}}
      {{0 0 1 x40fe7ba5 1}
       {x427e7ba5 -}
       {x41d43e63 xc0623504 1 xc0623504 1}
       {x 10
        {0 -}}}}
        {{{x45bda0a3 0 1 x4050f100 1}
       {x45be7194 -}
       {x45be2f93 xbfb9b9c7 1 xbfb9b9c7 1}
       {x45bda0a3 xc0d66800 1 xc0d66800 1}
       {x45917107 xc32d996a 1 xc32d996a 1}
       {x458760b2 xc39b7010 1 xc39b7010 1}
       {x451ae000 -}
       {x45274e66 x421f1ead 1 x421f1ead 1}
       {x4533bccb -}
       {x44c4132e -}
       {x455c4cc9 x421ee700 1 x421ee700 1}
       {x45663b39 -}
       {x44b90cc6 xc37e3a29 1 0 1}}
      {{x44b8b7b7 0 1 xc1565e40 1}
       {x44ab51d3 -}
       {x44ae5f15 x40ea609a 1 x40ea609a 1}
       {x44bdaaea x42378dfc 1 x42378dfc 1}
       {x45183e4a x42cd905d 1 x42cd905d 1}
       {x451f1292 -}
       {x450c999a -}
       {x450d1667 x4095c2cd 1 x4095c2cd 1}
       {x45108001 x42030a4d 1 x42030a4d 1}
       {x4545fb34 -}
       {x45291333 xc24bc65a 1 xc24bc65a 1}
       {x44ffde0a -}
       {x451ea000 x4262a4c7 1 0 1}}}
        {{{0 0 1 x40371b00 1}
       {x41b71b00 -}
       {x4118b6a6 xbfa2c2ab 1 xbfa2c2ab 1}
       {x 10
        {0 -}}}
      {{0 0 1 xc0fe7ba3 1}
       {xc27e7ba3 -}
       {xc1d43e61 x40623503 1 x40623503 1}
       {x 10
        {0 -}}}}
        {{{0 -}}
      {{0 -}}}
        {{{x45c453da 0 1 xbea6f000 1}
       {x45c40742 xbfdee800 1 xbfdee800 1}
       {x45c3215b xc0f8ef55 1 xc0f8ef55 1}
       {x45bfa70d xc226eea0 1 xc226eea0 1}
       {x4596384a xc326f753 1 xc326f753 1}
       {x458b79c3 xc390a53d 1 xc390a53d 1}
       {x452ddfff -}
       {x453b0998 x42287ae0 1 x42287ae0 1}
       {x45483332 -}
       {x44ddf331 -}
       {x454f7332 x42b4448f 1 x42b4448f 1}
       {x456ae8bb -}
       {x4516b000 xc31b7c6d 1 0 1}}
      {{x4496eb73 0 1 xbee5342e 1}
       {x44964b80 xbeb563a3 1 xbeb563a3 1}
       {x4495f20a xbe58438e 1 xbe58438e 1}
       {x4495d1da -}
       {x450b5323 x422d7e40 1 x422d7e40 1}
       {x450d21c9 -}
       {x45001332 -}
       {x45013b98 x4131d6cd 1 x4131d6cd 1}
       {x45095665 x42977335 1 x42977335 1}
       {x45483999 -}
       {x4530a999 xc2183c2c 1 xc2183c2c 1}
       {x4513e4ea -}
       {x4538bccb x42880966 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x41b8fe00 -}}
       {x41880e00 xbf49621b 1 xbf49621b 1}
       {x41741eaf xbf371b6e 1 xbf371b6e 1}
       {x 7
        {x41400000 -}}}
      {{x 4
        {x4042ea00 -}}
       {x4145e862 x3f99786a 1 x3f99786a 1}
       {x41709104 x3f8b88b5 1 x3f8b88b5 1}
       {x 7
        {x41a00000 -}}}}
        {{{x 4
        {x45c22db1 -}}
       {x459db801 xc330aa4d 1 xc330aa4d 1}
       {x458af879 xc38ba495 1 xc38ba495 1}
       {x45414000 -}
       {x454b5d9a x42017ae0 1 x42017ae0 1}
       {x45557b33 -}
       {x45096ccb -}
       {x4554dee2 x42a0ddcf 1 x42a0ddcf 1}
       {x45780549 -}
       {x4554dee2 xc281c8df 1 0 1}}
      {{x 4
        {x445f7518 -}}
       {x4505753f -}
       {x450251b0 xc210c240 1 xc210c240 1}
       {x44eb4000 -}
       {x44ee3c67 x4165521a 1 x4165521a 1}
       {x4501919b x42b23ddf 1 x42b23ddf 1}
       {x454aab34 -}
       {x453c805d xc17a8774 1 xc17a8774 1}
       {x45352390 -}
       {x453c805d x41597a1e 1 0 1}}}
        {{{x 4
        {xc1b8ff00 -}}
       {xc1880e0a x3f49656d 1 x3f49656d 1}
       {xc1741e9c x3f371b9b 1 x3f371b9b 1}
       {x 7
        {xc1400000 -}}}
      {{x 4
        {xc042f000 -}}
       {xc145e90e xbf997790 1 xbf997790 1}
       {xc1709174 xbf8b87f0 1 xbf8b87f0 1}
       {x 7
        {xc1a00000 -}}}}
        {{{x 4
        {xc15c5800 -}}
       {xc0e98800 x3f551cde 1 x3f551cde 1}
       {xc0ae4beb x3f41c000 1 x3f41c000 1}
       {x 5
        {xc0000000 -}}
       {xc1f88d8c xc0802bb3 1 xc0802bb3 1}
       {xc2cc4448 xc0c64e43 1 0 1}}
      {{x 4
        {xc1063200 -}}
       {xc1492dca xbf09d216 1 xbf09d216 1}
       {xc15c554e xbefa9c65 1 xbefa9c65 1}
       {x 5
        {xc1800000 -}}
       {x407daaa0 x40300b9a 1 x40300b9a 1}
       {x42531221 x4088304c 1 0 1}}}
        {{{x 4
        {x45c6888a -}}
       {x459a8e70 xc3415326 1 xc3415326 1}
       {x458a1e8e xc366d449 1 xc366d449 1}
       {x45502000 -}
       {x4557ae66 x41c170a6 1 x41c170a6 1}
       {x455f3ccd -}
       {x45293800 -}
       {x455d2e07 x425e501d 1 x425e501d 1}
       {x4575a38a -}
       {x456ab7a1 xc1a14d71 1 0 1}}
      {{x 4
        {x4411171b -}}
       {x44f90369 -}
       {x44ef4be0 xc2600f97 1 xc2600f97 1}
       {x44c80000 -}
       {x44d3c400 x421d8f60 1 x421d8f60 1}
       {x44f93cce x42cecf5e 1 x42cecf5e 1}
       {x454ad334 -}
       {x45487722 xc135389a 1 xc135389a 1}
       {x45392066 xc19cdd2e 1 xc19cdd2e 1}
       {x4529d3ef xc1938495 1 0 1}}}
        {{{x 4
        {x415c5800 -}}
       {x40e98800 xbf551cde 1 xbf551cde 1}
       {x40ae4beb xbf41c000 1 xbf41c000 1}
       {x 5
        {x40000000 -}}
       {x41f88d8d x40802bb4 1 x40802bb4 1}
       {x42cc4449 x40c64e44 1 0 1}}
      {{x 4
        {x41063200 -}}
       {x41492dca x3f09d216 1 x3f09d216 1}
       {x415c554e x3efa9c65 1 x3efa9c65 1}
       {x 5
        {x41800000 -}}
       {xc07daa8e xc0300b98 1 xc0300b98 1}
       {xc253121d xc088304a 1 0 1}}}
        {{{x 4
        {xc28025c0 -}}
       {xc2355800 x401a370b 1 x401a370b 1}
       {xc21fe919 x400c36db 1 x400c36db 1}
       {x 5
        {xc1f00000 -}}
       {xc26f5387 xc0838852 1 xc0838852 1}
       {xc304c280 xc0cb81d1 1 0 1}}
      {{x 4
        {xc1497600 -}}
       {xc216403b xc04d848b 1 xc04d848b 1}
       {xc232d057 xc03adae7 1 xc03adae7 1}
       {x 5
        {xc2680000 -}}
       {xc1b319c4 x409d0571 1 x409d0571 1}
       {x42815880 x40f2f17b 1 0 1}}}
        {{{x 4
        {x45c6035f -}}
       {x459e2c04 xc3326fc0 1 xc3326fc0 1}
       {x458e4073 xc362c937 1 xc362c937 1}
       {x45592000 -}
       {x45618b9a x42030a40 1 x42030a40 1}
       {x456d999a x41b040d5 1 x41b040d5 1}
       {x45763333 x42251ead 1 x42251ead 1}
       {x4593499a -}
       {x458865b3 xc1959171 1 xc1959171 1}
       {x4584ae66 xc08becf7 1 0 1}}
      {{x 4
        {x44036738 -}}
       {x44ee5e11 -}
       {x44ea93d0 xc1aec9c0 1 xc1aec9c0 1}
       {x44db4000 -}
       {x44dd8133 x412d28e6 1 x412d28e6 1}
       {x44ed499b x429783e6 1 x429783e6 1}
       {x455204ce -}
       {x45506800 xc0f7aecd 1 xc0f7aecd 1}
       {x45416919 xc1f0c49a 1 xc1f0c49a 1}
       {x4521619a xc23054fa 1 0 1}}}
        {{{x 4
        {x42802600 -}}
       {x423557fc xc01a37eb 1 xc01a37eb 1}
       {x421fe90d xc00c36d2 1 xc00c36d2 1}
       {x 5
        {x41f00000 -}}
       {x426f5387 x40838852 1 x40838852 1}
       {x4304c280 x40cb81d1 1 0 1}}
      {{x 4
        {x41497400 -}}
       {x42164001 x404d851b 1 x404d851b 1}
       {x4232d031 x403adb6b 1 x403adb6b 1}
       {x 5
        {x42680000 -}}
       {x41b319b6 xc09d0578 1 xc09d0578 1}
       {xc281588c xc0f2f187 1 0 1}}}
        {{{x 4
        {xc1b14500 -}}
       {xc19ef900 x3e969500 1 x3e969500 1}
       {xc199bdb8 x3e88e492 1 x3e88e492 1}
       {x 5
        {xc1900000 -}}
       {xc233194c xc06c1bc8 1 xc06c1bc8 1}
       {xc2dc75b4 xc0b6a74f 1 0 1}}
      {{x 4
        {x40ac5000 -}}
       {xc0a8d03d xbfaf781e 1 xbfaf781e 1}
       {xc1052e25 xbf9f8902 1 xbf9f8902 1}
       {x 5
        {xc1600000 -}}
       {x40c548d1 x4031d2b6 1 x4031d2b6 1}
       {x425dd93d x4089905f 1 0 1}}}
        {{{x 4
        {x45cbb52e -}}
       {x459fb417 xc33fbb93 1 xc33fbb93 1}
       {x458fca90 xc35dc98e 1 xc35dc98e 1}
       {x455e6000 -}
       {x45663d33 x4218e146 1 x4218e146 1}
       {x45764333 x4274f40d 1 x4274f40d 1}
       {x458fd333 x428f9eb8 1 x428f9eb8 1}
       {x45a80333 -}
       {x45a3c5b2 xc1959171 1 xc1959171 1}
       {x459967ff xc1e76979 1 0 1}}
      {{x 4
        {x440cc6d8 -}}
       {x44e30a99 x42bbabb0 1 x42bbabb0 1}
       {x44eadc6b x416cf512 1 x416cf512 1}
       {x44f00000 x40a5ebe6 1 x40a5ebe6 1}
       {x44f157a2 x4060a433 1 x4060a433 1}
       {x44f46335 x4169df4d 1 x4169df4d 1}
       {x454f6334 -}
       {x454dc666 xc0f7aecd 1 xc0f7aecd 1}
       {x453dd44c xc1f0c49a 1 xc1f0c49a 1}
       {x451ec000 xc229510b 1 0 1}}}
        {{{x 4
        {x41b14500 -}}
       {x419ef900 xbe969500 1 xbe969500 1}
       {x4199bdb8 xbe88e492 1 xbe88e492 1}
       {x 5
        {x41900000 -}}
       {x4233194d x406c1bc9 1 x406c1bc9 1}
       {x42dc75b5 x40b6a750 1 0 1}}
      {{x 4
        {xc0ac4c00 -}}
       {x40a8d20a x3faf76fc 1 x3faf76fc 1}
       {x41052ebb x3f9f87fa 1 x3f9f87fa 1}
       {x 5
        {x41600000 -}}
       {xc0c548cc xc031d2b4 1 xc031d2b4 1}
       {xc25dd93a xc089905d 1 0 1}}}
        {{{x 4
        {xc1863200 -}}
       {xc1c92e00 xbf89d25d 1 xbf89d25d 1}
       {xc1dc557a xbf7a9b6e 1 xbf7a9b6e 1}
       {x 5
        {xc2000000 -}}
       {xc1fa84f6 x3dc151ec 1 x3dc151ec 1}
       {xc1ed1f00 x3e158d67 1 0 1}}
      {{x 4
        {x41dc5880 -}}
       {x416989fe xbfd51c71 1 xbfd51c71 1}
       {x412e4d73 xbfc1c247 1 xbfc1c247 1}
       {x 5
        {x40800000 -}}
       {x41b4d991 x4024137d 1 x4024137d 1}
       {x42882f3a x407ddbcd 1 0 1}}}
        {{{x 4
        {x45d0a9dc -}}
       {x45a08ef8 xc3495d2a 1 xc3495d2a 1}
       {x4591bcbf xc346446e 1 xc346446e 1}
       {x456a6000 -}
       {x4571bc34 x4218e14d 1 x4218e14d 1}
       {x4581219a x428cc06b 1 x428cc06b 1}
       {x4599db33 x429c851d 1 x429c851d 1}
       {x45b20b33 -}
       {x45adcdb2 xc1959171 1 xc1959171 1}
       {x45a36fff xc1e76979 1 0 1}}
      {{x 4
        {x43ddf0d8 -}}
       {x44df388e x431177d0 1 x431177d0 1}
       {x44ed51fa x41d28d37 1 x41d28d37 1}
       {x44f64000 x40feb3cd 1 x40feb3cd 1}
       {x44f7e881 x4060a433 1 x4060a433 1}
       {x44faa335 x41519c66 1 x41519c66 1}
       {x4533119b -}
       {x453174ce xc0f7ae33 1 xc0f7ae33 1}
       {x452182b6 xc1f0c49a 1 xc1f0c49a 1}
       {x45026e68 xc229511a 1 0 1}}}
        {{{x 4
        {x41863200 -}}
       {x41c92e00 x3f89d25d 1 x3f89d25d 1}
       {x41dc557a x3f7a9b6e 1 x3f7a9b6e 1}
       {x 5
        {x42000000 -}}
       {x41fa84f6 xbdc151ec 1 xbdc151ec 1}
       {x41ed1f00 xbe158d67 1 0 1}}
      {{x 4
        {xc1dc5880 -}}
       {xc16989fe x3fd51c71 1 x3fd51c71 1}
       {xc12e4d73 x3fc1c247 1 x3fc1c247 1}
       {x 5
        {xc0800000 -}}
       {xc1b4d991 xc024137d 1 xc024137d 1}
       {xc2882f3a xc07ddbcd 1 0 1}}}
        {{{x 4
        {x42139500 -}}
       {x41c26ff9 xbfcf3f86 1 xbfcf3f86 1}
       {x41a5a24c xbfbc6da7 1 xbfbc6da7 1}
       {x 5
        {x41600000 -}}
       {x411123ae xbf2ddae1 1 xbf2ddae1 1}
       {xc03e9800 xbf867e86 1 0 1}}
      {{x 4
        {x4136ed00 -}}
       {x41c78b33 x3fde612d 1 x3fde612d 1}
       {x41e6733c x3fca2f8b 1 x3fca2f8b 1}
       {x 5
        {x42100000 -}}
       {x42239400 x3f2ca440 1 x3f2ca440 1}
       {x42537029 x3f858daf 1 0 1}}}
        {{{x 4
        {x45d344e2 -}}
       {x45a533dc xc340f9a6 1 xc340f9a6 1}
       {x4596f6de xc33ea3ee 1 xc33ea3ee 1}
       {x45770000 -}
       {x457f91cd x4218e14d 1 x4218e14d 1}
       {x4587719a x4241c88d 1 x4241c88d 1}
       {x45967e67 x428a75c3 1 x428a75c3 1}
       {x45b2b667 -}
       {x45b1434e xc1398c80 1 xc1398c80 1}
       {x45a41b33 xc22b1ec4 1 0 1}}
      {{x 4
        {x437c21a0 -}}
       {x44d0b8a0 x431cfbd1 1 x431cfbd1 1}
       {x44e3bef9 x420cb400 1 x420cb400 1}
       {x44ef8000 x41116d1a 1 x41116d1a 1}
       {x44f164c1 x4060a433 1 x4060a433 1}
       {x44f3e335 x413f8933 1 x413f8933 1}
       {x451d2667 -}
       {x451c9ccd xc0251f33 1 xc0251f33 1}
       {x450f13d6 xc1f0c49a 1 xc1f0c49a 1}
       {x44db2cce xc23b1e5c 1 0 1}}}
        {{{x 4
        {xc2139580 -}}
       {xc1c27000 x3fcf4132 1 x3fcf4132 1}
       {xc1a5a241 x3fbc6db7 1 x3fbc6db7 1}
       {x 5
        {xc1600000 -}}
       {xc11123ae x3f2ddae1 1 x3f2ddae1 1}
       {x403e9800 x3f867e86 1 0 1}}
      {{x 4
        {xc136ed00 -}}
       {xc1c78b33 xbfde612d 1 xbfde612d 1}
       {xc1e6733c xbfca2f8b 1 xbfca2f8b 1}
       {x 5
        {xc2100000 -}}
       {xc2239380 xbf2ca440 1 xbf2ca440 1}
       {xc2537029 xbf858f87 1 0 1}}}
        {{{x 4
        {x40c9d000 -}}
       {xc02a4800 xbf939aca 1 xbf939aca 1}
       {xc0a732f9 xbf863492 1 xbf863492 1}
       {x 5
        {xc1200000 -}}
       {xc19644ee xbf9aea23 1 xbf9aea23 1}
       {xc22106eb xbfefaf11 1 0 1}}
      {{x 4
        {x418e4300 -}}
       {x41866b38 xbe01188d 1 xbe01188d 1}
       {x41842d15 xbdeabedb 1 xbdeabedb 1}
       {x 5
        {x41800000 -}}
       {x3fafb68f xc000fcef 1 xc000fcef 1}
       {xc2098b35 xc04791fc 1 0 1}}}
        {{{x 4
        {x45ce6c29 -}}
       {x45a41647 xc334d150 1 xc334d150 1}
       {x4595eac0 xc341d38e 1 xc341d38e 1}
       {x45736000 -}
       {x457b8a9a x4218e14d 1 x4218e14d 1}
       {x4585a19a x425f05f7 1 x425f05f7 1}
       {x4597e800 x42915706 1 x42915706 1}
       {x45b30ccc -}
       {x45b199b3 xc1398c80 1 xc1398c80 1}
       {x45a47198 xc22b1ec4 1 0 1}}
      {{x 4
        {x434afd30 -}}
       {x44c40ed1 x43148b9a 1 x43148b9a 1}
       {x44d30e26 x41df7889 1 x41df7889 1}
       {x44dc8000 x4102a580 1 x4102a580 1}
       {x44de337d x4060a433 1 x4060a433 1}
       {x44e0e335 x414e50cd 1 x414e50cd 1}
       {x450e019a -}
       {x450dbccc xbfa5219a 1 xbfa5219a 1}
       {x450095b6 xc1f0c49a 1 xc1f0c49a 1}
       {x44bd6ccc xc23df128 1 0 1}}}
        {{{x 4
        {xc0c9d400 -}}
       {x402a4702 x3f939c57 1 x3f939c57 1}
       {x40a732d9 x3f8634db 1 x3f8634db 1}
       {x 5
        {x41200000 -}}
       {x419644ed x3f9aea20 1 x3f9aea20 1}
       {x422106e9 x3fefaf0d 1 0 1}}
      {{x 4
        {xc18e4380 -}}
       {xc1866b72 x3e011d0d 1 x3e011d0d 1}
       {xc1842d3b x3deac725 1 x3deac725 1}
       {x 5
        {xc1800000 -}}
       {xbfafb674 x4000fcf1 1 x4000fcf1 1}
       {x42098b38 x404791ff 1 0 1}}}
        {{{x 11
        {0 -}}
       {xc1089200 xbf968999 1 xbf968999 1}
       {xc1eb36ff xbfe8e8bc 1 0 1}}
      {{x 11
        {0 -}}
       {xc1024184 xbf8f9485 1 xbf8f9485 1}
       {xc1e05810 xbfde25b0 1 0 1}}}
        {{{x 4
        {x45d217b3 -}}
       {x45a3fc40 xc33dbbe3 1 xc33dbbe3 1}
       {x4596ccfc xc32c8125 1 xc32c8125 1}
       {x457c8000 -}
       {x4582bea7 x4218e14d 1 x4218e14d 1}
       {x458a319a x42235333 1 x42235333 1}
       {x4595e267 x42810000 1 x42810000 1}
       {x45b2819a -}
       {x45b1a488 xc0dd1200 1 xc0dd1200 1}
       {x45a5eb33 xc21f563e 1 0 1}}
      {{x 4
        {x42dba740 -}}
       {x44b9742d x431aaaca 1 x431aaaca 1}
       {x44cf0ff1 x4233a3c5 1 x4233a3c5 1}
       {x44e0c000 x41287b00 1 x41287b00 1}
       {x44e2f19a x4060a433 1 x4060a433 1}
       {x44e52335 x41287b4d 1 x41287b4d 1}
       {x45051cce x40a51e9a 1 x40a51e9a 1}
       {x45063001 -}
       {x44eaf976 xc21b0a3b 1 xc21b0a3b 1}
       {x44934004 xc27662af 1 0 1}}}
        {{{x 11
        {0 -}}
       {x41089200 x3f968998 1 x3f968998 1}
       {x41eb36fe x3fe8e8ba 1 0 1}}
      {{x 11
        {0 -}}
       {x41024185 x3f8f9486 1 x3f8f9486 1}
       {x41e05812 x3fde25b2 1 0 1}}}
        {{{x 4
        {xc192b800 -}}
       {xc1ced100 xbf774dc6 1 xbf774dc6 1}
       {xc1e0004e xbf60d6db 1 xbf60d6db 1}
       {x 4
        {xc2000000 -}}
       {xc1468f37 x3f922984 1 x3f922984 1}
       {xc0dc1ba8 x3e8a62d6 1 x3e8a62d6 1}
       {xc0b4e400 x3bcd5540 1 0 1}}
      {{x 4
        {x41d26400 -}}
       {x414efaf9 xbfdbf36c 1 xbfdbf36c 1}
       {x4111d7b9 xbfc7fa41 1 xbfc7fa41 1}
       {x 4
        {x40000000 -}}
       {x41df4738 x3f949080 1 x3f949080 1}
       {x420235ac x3e337fb1 1 x3e337fb1 1}
       {x42053f80 x30ec4ec5 1 0 1}}}
        {{{x 4
        {x45d73c9b -}}
       {x45a7a40f xc33200da 1 xc33200da 1}
       {x459f9c57 xc3245bb2 1 xc3245bb2 1}
       {x4583b000 -}
       {x45881d73 x4218e14d 1 x4218e14d 1}
       {x458fa19a x422d125e 1 x422d125e 1}
       {x459c659a x4264d706 1 x4264d706 1}
       {x45b36333 -}
       {x45b297c8 xc0cb6b00 1 xc0cb6b00 1}
       {x45a7099a xc21df35a 1 0 1}}
      {{x 4
        {x41930a00 -}}
       {x44a5755b x43256d13 1 x43256d13 1}
       {x44d11480 x429c1855 1 x429c1855 1}
       {x44e9c000 x41377b4d 1 x41377b4d 1}
       {x44ec239b x4060a433 1 x4060a433 1}
       {x44ee2335 x41197b00 1 x41197b00 1}
       {x45007999 -}
       {x44f66fff xc1aba857 1 xc1aba857 1}
       {x44c5f154 xc21ba5e1 1 xc21ba5e1 1}
       {x4479accf xc2401a51 1 0 1}}}
        {{{x 4
        {x4192b900 -}}
       {x41ced12e x3f774ad0 1 x3f774ad0 1}
       {x41e00061 x3f60d609 1 x3f60d609 1}
       {x 4
        {x42000000 -}}
       {x41468f3b xbf922983 1 xbf922983 1}
       {x40dc1bae xbe8a62db 1 xbe8a62db 1}
       {x40b4e400 xbbcd5765 1 0 1}}
      {{x 4
        {xc1d26400 -}}
       {xc14efaf9 x3fdbf36c 1 x3fdbf36c 1}
       {xc111d7b9 x3fc7fa41 1 x3fc7fa41 1}
       {x 4
        {xc0000000 -}}
       {xc1df4737 xbf94915c 1 xbf94915c 1}
       {xc20235c7 xbe3380d9 1 xbe3380d9 1}
       {xc2053fa0 x3144ec4f 1 0 1}}}
        {{{x 4
        {x41912e00 -}}
       {x4125e000 xbf801056 1 xbf801056 1}
       {x41024795 xbf68db6e 1 xbf68db6e 1}
       {x 4
        {x40800000 -}}
       {xc10b71b0 -}
       {xc106f200 x3d1ea0a4 1 x3d1ea0a4 1}
       {xc0f7e800 x3d7560e9 1 0 1}}
      {{x 4
        {x4114f400 -}}
       {x41730428 x3f4189a3 1 x3f4189a3 1}
       {x4186f503 x3f2ff680 1 x3f2ff680 1}
       {x 4
        {x41a00000 -}}
       {x4213ff46 -}
       {x420f392e xbe286352 1 xbe286352 1}
       {x42038d93 xbe8243ce 1 0 1}}}
        {{{x 4
        {x45dc1c01 -}}
       {x45aa96f2 xc34451ed 1 xc34451ed 1}
       {x459ec267 xc3114452 1 xc3114452 1}
       {x458ad000 -}
       {x458fbe73 x4218e14d 1 x4218e14d 1}
       {x4596c19a x41c7f189 1 x41c7f189 1}
       {x459b759a x4234999a 1 x4234999a 1}
       {x45b404cd -}
       {x45b33962 xc0cb6b00 1 xc0cb6b00 1}
       {x45a7ab34 xc21df35a 1 0 1}}
      {{x 4
        {xc314f040 -}}
       {x44985523 x432374df 1 x432374df 1}
       {x44b9b40f x42bf3d67 1 x42bf3d67 1}
       {x44ec0000 x41936bb3 1 x41936bb3 1}
       {x44efd6ce x40287b9a 1 x40287b9a 1}
       {x44f06335 -}
       {x44e96668 xc0a3ae1a 1 xc0a3ae1a 1}
       {x44e3999b xc15eb85a 1 xc15eb85a 1}
       {x44b9cf4e xc21ba5e1 1 xc21ba5e1 1}
       {x44540007 xc258dbac 1 0 1}}}
        {{{x 4
        {xc1912e00 -}}
       {xc125e000 x3f801056 1 x3f801056 1}
       {xc1024795 x3f68db6e 1 x3f68db6e 1}
       {x 4
        {xc0800000 -}}
       {x410b71b6 -}
       {x4106f200 xbd1ea0e1 1 xbd1ea0e1 1}
       {x40f7e800 xbd7560cb 1 0 1}}
      {{x 4
        {xc114f400 -}}
       {xc1730428 xbf4189a3 1 xbf4189a3 1}
       {xc186f503 xbf2ff680 1 xbf2ff680 1}
       {x 4
        {xc1a00000 -}}
       {xc213ff46 -}
       {xc20f3932 x3e2862cd 1 x3e2862cd 1}
       {xc2038da0 x3e82436a 1 0 1}}}
        {{{x 4
        {x41165400 -}}
       {x40875000 xbf2a190f 1 xbf2a190f 1}
       {x4030115a xbf1aa492 1 xbf1aa492 1}
       {x 5
        {0 -}}
       {xc0345800 xbec6cccd 1 xbec6cccd 1}
       {xc11b5000 xbf19cb92 1 0 1}}
      {{x 4
        {x40eee000 -}}
       {x411f5700 x3ea433fd 1 x3ea433fd 1}
       {x412ac03f x3e954db7 1 x3e954db7 1}
       {x 5
        {x41400000 -}}
       {x417d5c59 x3f074666 1 x3f074666 1}
       {x41c9af00 x3f514c29 1 0 1}}}
        {{{x 4
        {x45d38033 -}}
       {x45ac6bcd xc31f1c60 1 xc31f1c60 1}
       {x45a1c755 xc3091160 1 xc3091160 1}
       {x458e7000 -}
       {x4594019a x4218e14d 1 x4218e14d 1}
       {x459a619a x41251e9a 1 x41251e9a 1}
       {x459b74cd x41251e9a 1 x41251e9a 1}
       {x45b60fff -}
       {x45b54494 xc0cb6b00 1 xc0cb6b00 1}
       {x45a9b666 xc21df35a 1 0 1}}
      {{x 4
        {xc400fd78 -}}
       {x448369cc x43316a45 1 x43316a45 1}
       {x449d461a x42606580 1 x42606580 1}
       {x44b48000 x417a8f9a 1 x417a8f9a 1}
       {x44b7c334 x4060a400 1 x4060a400 1}
       {x44b8e334 x404b8533 1 x404b8533 1}
       {x44bdb99b x40ce6666 1 x40ce6666 1}
       {x44c90334 -}
       {x44a7795b xc21ba5e1 1 xc21ba5e1 1}
       {x441ed339 xc2775380 1 0 1}}}
        {{{x 4
        {xc1165400 -}}
       {xc0875000 x3f2a190f 1 x3f2a190f 1}
       {xc030115a x3f1aa492 1 x3f1aa492 1}
       {x 5
        {0 -}}
       {x40345800 x3ec6cccd 1 x3ec6cccd 1}
       {x411b5000 x3f19cb92 1 0 1}}
      {{x 4
        {xc0eee000 -}}
       {xc11f5800 xbea43690 1 xbea43690 1}
       {xc12ac10d xbe954925 1 xbe954925 1}
       {x 5
        {xc1400000 -}}
       {xc17d5c59 xbf074665 1 xbf074665 1}
       {xc1c9aeff xbf514c26 1 0 1}}}
        {{{x 4
        {x41c68d00 -}}
       {x3fa2c000 xc041cc0e 1 xc041cc0e 1}
       {xc0aec848 xc0303249 1 xc0303249 1}
       {x 5
        {xc1900000 -}}
       {xc182a900 x3e6b3d71 1 x3e6b3d71 1}
       {xc1441c00 x3eb5f806 1 0 1}}
      {{x 4
        {x422ad5c0 -}}
       {x42321323 x3e6e5666 1 x3e6e5666 1}
       {x42342520 x3e58b1db 1 x3e58b1db 1}
       {x 5
        {x42380000 -}}
       {x421e8a0f xbf608571 1 xbf608571 1}
       {x41c097c0 xbfadb08c 1 0 1}}}
        {{{x 4
        {x45d10930 -}}
       {x45ae708e xc30fdb5a 1 xc30fdb5a 1}
       {x45a414a4 xc3097040 1 xc3097040 1}
       {x45906000 -}
       {x4595a434 x4218e14d 1 x4218e14d 1}
       {x459c519a x41907ab3 1 x41907ab3 1}
       {x459e3333 x41907ab3 1 x41907ab3 1}
       {x45b7dd9a -}
       {x45b7122f xc0cb6b00 1 xc0cb6b00 1}
       {x45ab8401 xc21df35a 1 0 1}}
      {{x 4
        {xc4247420 -}}
       {x4468d7d8 x4332f4a6 1 x4332f4a6 1}
       {x448d77c0 x424f3737 1 x424f3737 1}
       {x44a1c000 x4165ebb3 1 x4165ebb3 1}
       {x44a4be67 x4060a400 1 x4060a400 1}
       {x44a62334 x40b3bbbc 1 x40b3bbbc 1}
       {x44af4667 x41099993 1 x41099993 1}
       {x44bba333 -}
       {x449a195a xc21ba5e1 1 xc21ba5e1 1}
       {x44041337 xc2775380 1 0 1}}}
        {{{x 4
        {xc1c68d00 -}}
       {xbfa2c000 x4041cc0e 1 x4041cc0e 1}
       {x40aec848 x40303249 1 x40303249 1}
       {x 5
        {x41900000 -}}
       {x4182a900 xbe6b3d71 1 xbe6b3d71 1}
       {x41441c00 xbeb5f806 1 0 1}}
      {{x 4
        {xc22ad580 -}}
       {xc2321306 xbe6e5ae6 1 xbe6e5ae6 1}
       {xc234250d xbe58b600 1 xbe58b600 1}
       {x 5
        {xc2380000 -}}
       {xc21e8a0f x3f608571 1 x3f608571 1}
       {xc1c097c0 x3fadb08c 1 0 1}}}
        {{{x 4
        {xc06c2000 -}}
       {xc1275a00 xbf5edee3 1 xbf5edee3 1}
       {xc146534e xbf4aa000 1 xbf4aa000 1}
       {x 4
        {xc1800000 -}}
       {xc1d66de4 -}
       {xc1c28ade x3eaf5e64 1 x3eaf5e64 1}
       {xc191ed05 x3f07aa4d 1 0 1}}
      {{x 4
        {x418c0800 -}}
       {x4144707c xbf2c0e9b 1 xbf2c0e9b 1}
       {x412c86df xbf1c6ed2 1 xbf1c6ed2 1}
       {x 4
        {x41000000 -}}
       {x420528e6 -}
       {x420358c8 xbd7fcbd7 1 xbd7fcbd7 1}
       {x41fdd458 xbdc5e245 1 0 1}}}
        {{{x 4
        {x45cedac5 -}}
       {x45ae6b98 xc306bf50 1 xc306bf50 1}
       {x45a4befc xc3003500 1 xc3003500 1}
       {x45926000 -}
       {x4597f19a x4218e14d 1 x4218e14d 1}
       {x459e519a x41251e9a 1 x41251e9a 1}
       {x459f64cd x41251e9a 1 x41251e9a 1}
       {x45ba3e68 -}
       {x45b972fd xc0cb6b00 1 xc0cb6b00 1}
       {x45ade4cf xc21df35a 1 0 1}}
      {{x 4
        {xc446c0dc -}}
       {x44462886 x4332c1f1 1 x4332c1f1 1}
       {x447823fe x424e7ece 1 x424e7ece 1}
       {x44904000 x41703d80 1 x41703d80 1}
       {x449360cd x4060a400 1 x4060a400 1}
       {x4494a334 x408cbf33 1 x408cbf33 1}
       {x449ba001 x40f9eb80 1 x40f9eb80 1}
       {x44a8299a -}
       {x44869fc1 xc21ba5e1 1 xc21ba5e1 1}
       {x43ba400a xc2775380 1 0 1}}}
        {{{x 4
        {x406c2000 -}}
       {x41275a00 x3f5edee3 1 x3f5edee3 1}
       {x4146534e x3f4aa000 1 x3f4aa000 1}
       {x 4
        {x41800000 -}}
       {x41d66de8 -}
       {x41c28ae2 xbeaf5e66 1 xbeaf5e66 1}
       {x4191ed08 xbf07aa50 1 0 1}}
      {{x 4
        {xc18c0800 -}}
       {xc144707c x3f2c0e9b 1 x3f2c0e9b 1}
       {xc12c86df x3f1c6ed2 1 x3f1c6ed2 1}
       {x 4
        {xc1000000 -}}
       {xc20528e5 -}
       {xc20358c4 x3d7fcd9a 1 x3d7fcd9a 1}
       {xc1fdd440 x3dc5e3ad 1 0 1}}}
        {{{x 4
        {xc18dec00 -}}
       {xc1b24300 xbf1589b3 1 xbf1589b3 1}
       {xc1bca708 xbf07f249 1 xbf07f249 1}
       {x 4
        {xc1d00000 -}}
       {xc194bfdb x3ee645d1 1 x3ee645d1 1}
       {xc180d800 x3e0ed5b8 1 x3e0ed5b8 1}
       {xc171b43a x3d3a7541 1 0 1}}
      {{x 4
        {x4198e800 -}}
       {x40f014d0 xbfbf1d96 1 xbfbf1d96 1}
       {x4085d609 xbfadc2c0 1 xbfadc2c0 1}
       {x 4
        {xc0000000 -}}
       {x41c37026 -}
       {x41bc3d9e xbdfde03d 1 xbdfde03d 1}
       {x41aaa540 xbe4465fb 1 0 1}}}
        {{{x 4
        {x45d19f53 -}}
       {x45ae6d99 xc30bed1d 1 xc30bed1d 1}
       {x45a5e53a xc2d2c577 1 xc2d2c577 1}
       {x45976000 -}
       {x459d58cd x4218e14d 1 x4218e14d 1}
       {x 2
        {x45a3519a -}}
       {x45bd1e67 -}
       {x45bc52fc xc0cb6b00 1 xc0cb6b00 1}
       {x45b0c4ce xc21df35a 1 0 1}}
      {{x 4
        {xc4683fcc -}}
       {x442c5ba3 x43386ba1 1 x43386ba1 1}
       {x4464cd46 x4280bbd8 1 x4280bbd8 1}
       {x448e8000 x41936bb3 1 x41936bb3 1}
       {x449256ce x40287a66 1 x40287a66 1}
       {x 2
        {x4492e334 -}}
       {x44971665 -}
       {x446b1919 xc21ba5e1 1 xc21ba5e1 1}
       {x436be66c xc2775382 1 0 1}}}
        {{{x 4
        {x418dea00 -}}
       {x41b24200 x3f158dfa 1 x3f158dfa 1}
       {x41bca65e x3f07f6db 1 x3f07f6db 1}
       {x 4
        {x41d00000 -}}
       {x4194bfdc xbee645d1 1 xbee645d1 1}
       {x4180d800 xbe0ed5b1 1 xbe0ed5b1 1}
       {x4171b43f xbd3a74bc 1 0 1}}
      {{x 4
        {xc198e700 -}}
       {xc0f01303 x3fbf1c74 1 x3fbf1c74 1}
       {xc085d4dd x3fadc1b9 1 x3fadc1b9 1}
       {x 4
        {x40000000 -}}
       {xc1c37024 -}
       {xc1bc3da2 x3dfddf66 1 x3dfddf66 1}
       {xc1aaa553 x3e446553 1 0 1}}}
        {{{x 4
        {x3ed0c000 -}}
       {xc13ea400 xbfcad59d 1 xbfcad59d 1}
       {xc1770504 xbfb86925 1 xbfb86925 1}
       {x 4
        {xc1b00000 -}}
       {xc197c478 x3e73a2e9 1 x3e73a2e9 1}
       {xc1862000 x3e2cab5c 1 x3e2cab5c 1}
       {xc16c1600 x3e172f3e 1 0 1}}
      {{x 4
        {x41e36180 -}}
       {x41b5870e xbf3cb066 1 xbf3cb066 1}
       {x41a86a60 xbf2b8df7 1 xbf2b8df7 1}
       {x 4
        {x41900000 -}}
       {x41ddeab6 -}
       {x41cf99ac xbe7c7f29 1 xbe7c7f29 1}
       {x41ac99e0 xbec354dd 1 0 1}}}
        {{{x 4
        {x45d38b24 -}}
       {x45ae8946 xc30ee9b6 1 xc30ee9b6 1}
       {x45a6e21b xc2b054c9 1 xc2b054c9 1}
       {x459b4000 -}
       {x45a138cd x4218e14d 1 x4218e14d 1}
       {x 2
        {x45a7319a -}}
       {x45bf5734 -}
       {x45be8bc9 xc0cb6b00 1 xc0cb6b00 1}
       {x45b2fd9b xc21df35a 1 0 1}}
      {{x 4
        {xc481d0d0 -}}
       {x441e6260 x433f1abe 1 x433f1abe 1}
       {x445a213b x428afd49 1 x428afd49 1}
       {x448c0000 x41936bb3 1 x41936bb3 1}
       {x448fd6ce x40287a66 1 x40287a66 1}
       {x 2
        {x44906334 -}}
       {x448b5ffe xc1407b4d 1 xc1407b4d 1}
       {x444568fe xc21ba5e1 1 xc21ba5e1 1}
       {x430e3334 xc25cfea5 1 0 1}}}
        {{{x 4
        {xbed0c000 -}}
       {x413ea400 x3fcad59d 1 x3fcad59d 1}
       {x41770504 x3fb86925 1 x3fb86925 1}
       {x 4
        {x41b00000 -}}
       {x4197c47b xbe73a2e9 1 xbe73a2e9 1}
       {x41862000 xbe2cab6c 1 xbe2cab6c 1}
       {x416c1600 xbe172f36 1 0 1}}
      {{x 4
        {xc1e36100 -}}
       {xc1b586d5 x3f3caf43 1 x3f3caf43 1}
       {xc1a86a3b x3f2b8cf2 1 x3f2b8cf2 1}
       {x 4
        {xc1900000 -}}
       {xc1ddeab4 -}
       {xc1cf99bb x3e7c7df6 1 x3e7c7df6 1}
       {xc1ac9a1a x3ec353ec 1 0 1}}}
        {{{x 4
        {x3fd38000 -}}
       {xc12413d5 xbfc3fec0 1 xbfc3fec0 1}
       {xc15a8e70 xbfb2327a 1 xbfb2327a 1}
       {x 4
        {xc1a00000 -}}
       {xc2267e6d -}
       {xc21c050e x3eb8ba80 1 x3eb8ba80 1}
       {xc2026a00 x3f0ee7ef 1 0 1}}
      {{x 4
        {x41d6da00 -}}
       {x41afe372 xbf2055e3 1 xbf2055e3 1}
       {x41a4bf29 xbf11c69b 1 xbf11c69b 1}
       {x 4
        {x41900000 -}}
       {x4265b0b1 -}
       {x4255efea xbf0aea66 1 xbf0aea66 1}
       {x422f6d21 xbf56ee23 1 0 1}}}
        {{{x 4
        {x45d5bd7b -}}
       {x45b08577 xc30c5fe3 1 xc30c5fe3 1}
       {x45a9df84 xc28d5689 1 xc28d5689 1}
       {x45a11000 -}
       {x45a708cd x4218e14d 1 x4218e14d 1}
       {x 2
        {x45ad019a -}}
       {x45c38733 -}
       {x45c2bbc8 xc0cb6b00 1 xc0cb6b00 1}
       {x45b72d9a xc21df35a 1 0 1}}
      {{x 4
        {xc4988790 -}}
       {x4414aa22 x434dd9a5 1 x434dd9a5 1}
       {x445190fc x428586b5 1 x428586b5 1}
       {x4484c000 x41936bb3 1 x41936bb3 1}
       {x448896ce x40287a66 1 x40287a66 1}
       {x 2
        {x44892334 -}}
       {x44633333 xc1df3fa1 1 xc1df3fa1 1}
       {x43f19553 xc21ba5e1 1 xc21ba5e1 1}
       {xc27fffc0 xc22eb6df 1 0 1}}}
        {{{x 4
        {xbfd37000 -}}
       {x41241400 x3fc3fd26 1 x3fc3fd26 1}
       {x415a8e70 x3fb23249 1 x3fb23249 1}
       {x 4
        {x41a00000 -}}
       {x42267e6e -}
       {x421c050f xbeb8ba85 1 xbeb8ba85 1}
       {x42026a00 xbf0ee7f5 1 0 1}}
      {{x 4
        {xc1d6da00 -}}
       {xc1afe372 x3f2055e3 1 x3f2055e3 1}
       {xc1a4bf29 x3f11c69b 1 x3f11c69b 1}
       {x 4
        {xc1900000 -}}
       {xc265b0b0 -}
       {xc255efe9 x3f0aea66 1 x3f0aea66 1}
       {xc22f6d20 x3f56ee23 1 0 1}}}
        {{{x 4
        {x42596d00 -}}
       {x42283f8c xbfca5e5a 1 xbfca5e5a 1}
       {x421a2f84 xbfb7fdee 1 xbfb7fdee 1}
       {x 5
        {x42000000 -}}
       {x41a731ad xbfc3c7c4 1 xbfc3c7c4 1}
       {xc0c7a089 xc01774a7 1 0 1}}
      {{x 4
        {x40144000 -}}
       {x41c9ea14 x403ca87a 1 x403ca87a 1}
       {x41fe5a99 x402b86c5 1 x402b86c5 1}
       {x 5
        {x42300000 -}}
       {x42424502 x3f211b71 1 x3f211b71 1}
       {x426eeeb8 x3f7943d6 1 0 1}}}
        {{{x 4
        {x45d2d951 -}}
       {x45ac783b xc306d3e0 1 xc306d3e0 1}
       {x45a8b71b xc1d8086e 1 xc1d8086e 1}
       {x45a69000 -}
       {x45ac88cd x4218e14d 1 x4218e14d 1}
       {x45b2819a -}
       {x45b0c267 -}
       {x45c8f267 -}
       {x45c55c94 xc17ced85 1 xc17ced85 1}
       {x45bc98ce xc1c3aa3c 1 0 1}}
      {{x 4
        {xc4bdd104 -}}
       {x43ec42da x435bbe48 1 x435bbe48 1}
       {x4429b9ac x423d6a75 1 x423d6a75 1}
       {x44490000 x41794c60 1 x41794c60 1}
       {x4450ad9b x40287b00 1 x40287b00 1}
       {x4451c668 -}
       {x4435d335 xc0dc2906 1 xc0dc2906 1}
       {x442f5fff xc0f7ae80 1 xc0f7ae80 1}
       {x43bf3164 xc21ba5e1 1 xc21ba5e1 1}
       {xc387a660 xc25fe089 1 0 1}}}
        {{{x 4
        {xc2596d00 -}}
       {xc2283f8c x3fca5e5a 1 x3fca5e5a 1}
       {xc21a2f84 x3fb7fdee 1 x3fb7fdee 1}
       {x 5
        {xc2000000 -}}
       {xc1a731ab x3fc3c7c7 1 x3fc3c7c7 1}
       {x40c7a09c x401774a9 1 0 1}}
      {{x 4
        {xc0143800 -}}
       {xc1c9e9a0 xc03ca90b 1 xc03ca90b 1}
       {xc1fe5a4e xc02b8749 1 xc02b8749 1}
       {x 5
        {xc2300000 -}}
       {xc2424502 xbf211b71 1 xbf211b71 1}
       {xc26eeeb8 xbf7943d6 1 0 1}}}
        {{{x 4
        {x42ce6640 -}}
       {x42d3adc0 x3eadcd00 1 x3eadcd00 1}
       {x42d53042 x3e9e0925 1 x3e9e0925 1}
       {x 7
        {x42d80000 -}}}
      {{x 4
        {xc25fc780 -}}
       {x3df02f41 x40e6b2eb 1 x40e6b2eb 1}
       {x4181304c x40d1bfe5 1 x40d1bfe5 1}
       {x 7
        {x42380000 -}}}}
        {{{x 4
        {x45c7c1bd -}}
       {x459f0190 xc1b88900 1 xc1b88900 1}
       {x459e868a xc05d36db 1 xc05d36db 1}
       {x459e4000 -}
       {x45a2cd80 x420f851a 1 x420f851a 1}
       {x45a97666 x41d1facd 1 x41d1facd 1}
       {x45af1b32 x423eeb80 1 x423eeb80 1}
       {x 3
        {x45c74b32 -}}}
      {{x 4
        {xc4b699b8 -}}
       {x4411b278 -}
       {x44119370 xbf3a3000 1 xbf3a3000 1}
       {x440c8000 xc142ea66 1 xc142ea66 1}
       {x432775b2 xc299a8f4 1 xc299a8f4 1}
       {xc34e4cc4 xc077ad9a 1 xc077ad9a 1}
       {xc35b3324 xbff7ae33 1 xbff7ae33 1}
       {x 3
        {xc374fffc -}}}}
        {{{x 4
        {xc2ce6600 -}}
       {xc2d3adb8 xbeadd333 1 xbeadd333 1}
       {xc2d53040 xbe9e0a49 1 xbe9e0a49 1}
       {x 7
        {xc2d80000 -}}}
      {{x 4
        {x425fc780 -}}
       {xbdf02f41 xc0e6b2eb 1 xc0e6b2eb 1}
       {xc181304c xc0d1bfe5 1 xc0d1bfe5 1}
       {x 7
        {xc2380000 -}}}}
        {{{x 4
        {x42a439c0 -}}
       {xc3a56fb0 -}
       {xc36f1b95 x42843fd2 1 x42843fd2 1}
       {x 7
        {x43040000 -}}}
      {{x 4
        {xc2ceb3e0 -}}
       {xc401cedb -}
       {xc3d025a1 x42945a1f 1 x42945a1f 1}
       {x 7
        {0 -}}}}
        {{{x 4
        {x45b06d33 -}}
       {x4539c790 -}
       {x45422640 x430237db 1 x430237db 1}
       {x4572c000 x4359afa0 1 x4359afa0 1}
       {x45a51a02 -}
       {x 2
        {x4599cb33 -}}
       {x 3
        {x45b1fb33 -}}}
      {{x 4
        {xc408b70c -}}
       {xc0922c80 x4291284a 1 x4291284a 1}
       {x4332ed42 x429d4e1d 1 x429d4e1d 1}
       {x44088000 -}
       {xc383d995 -}
       {x 2
        {xc371ccc0 -}}
       {x 3
        {xc385cccc -}}}}
        {{{x 4
        {xc2a439c0 -}}
       {x4400c4b0 -}
       {x43c1652f xc2b8e0c9 1 xc2b8e0c9 1}
       {x 7
        {xc3040000 -}}}
      {{x 4
        {x42ceb3c0 -}}
       {x444a12cf -}
       {x44220323 xc2e6f0ed 1 xc2e6f0ed 1}
       {x 7
        {0 -}}}}
        {{{x 4
        {x41c4fe00 -}}
       {x42842684 x40aa92fd 1 x40aa92fd 1}
       {x429bdb5e x409b15ae 1 x409b15ae 1}
       {x 7
        {x42c80000 -}}}
      {{x 4
        {xc2d84f80 -}}
       {xc296260e x4088214d 1 x4088214d 1}
       {xc2833ab0 x40778965 1 x40778965 1}
       {x 7
        {xc2400000 -}}}}
        {{{x 4
        {x454182a1 -}}
       {x451da94d -}
       {x4526edeb x43011a49 1 x43011a49 1}
       {x455624cd x42d0443d 1 x42d0443d 1}
       {x4568033e x4218e146 1 x4218e146 1}
       {x 2
        {x456e0800 -}}
       {x 3
        {x458f3400 -}}}
      {{x 4
        {xc42d51ea -}}
       {x446c3d8c -}
       {x442fcf80 xc32e2e24 1 xc32e2e24 1}
       {xc3892666 -}
       {xc3806000 x4060a3c0 1 x4060a3c0 1}
       {x 2
        {xc36f3336 -}}
       {x 3
        {xc3848007 -}}}}
        {{{x 4
        {xc1c50000 -}}
       {xc28426be xc0aa926d 1 xc0aa926d 1}
       {xc29bdb84 xc09b1529 1 xc09b1529 1}
       {x 7
        {xc2c80000 -}}}
      {{x 4
        {x42d84fc0 -}}
       {x4296262b xc0882195 1 xc0882195 1}
       {x42833ac3 xc07789e9 1 xc07789e9 1}
       {x 7
        {x42400000 -}}}}
        {{{x 4
        {xc390077c -}}
       {xc2b41b21 x41cbb37c 1 x41cbb37c 1}
       {xc205ba76 x41b93413 1 x41b93413 1}
       {x 7
        {x42900000 -}}}
      {{x 4
        {xc406b5bf -}}
       {xc394348d x41f96717 1 x41f96717 1}
       {xc363161f x41e2c142 1 x41e2c142 1}
       {x 7
        {xc2c40000 -}}}}
        {{{x 2
        {x45308585 -}}
       {x453418b8 -}
       {x45308585 xc1ab9990 1 xc1ab9990 1}
       {x448d4d2c xc3594d1c 1 xc3594d1c 1}
       {x4422d54e xc343339e 1 xc343339e 1}
       {xc36bfff0 -}
       {xc33c398a x41e551ea 1 x41e551ea 1}
       {x43123340 x43331a07 1 x43331a07 1}
       {x451c24ce x431c4e15 1 x431c4e15 1}
       {x 3
        {x454c84ce -}}}
      {{x 2
        {x446d0eb0 -}}
       {x44667518 -}
       {x446d0eb0 x40c055a0 1 x40c055a0 1}
       {x447e7fcc -}
       {x443927fe xc347def7 1 xc347def7 1}
       {xc3be8cc8 -}
       {xc3ba7ffc x4060a3c0 1 x4060a3c0 1}
       {xc3acfffd x4118a3cb 1 x4118a3cb 1}
       {xc365e66a -}
       {x 3
        {xc37fb342 -}}}}
        {{{x 4
        {x4390077d -}}
       {x42b41b22 xc1cbb37d 1 xc1cbb37d 1}
       {x4205ba77 xc1b93413 1 xc1b93413 1}
       {x 7
        {xc2900000 -}}}
      {{x 4
        {x4406b5bf -}}
       {x4394348d xc1f96717 1 xc1f96717 1}
       {x4363161f xc1e2c142 1 xc1e2c142 1}
       {x 7
        {x42c40000 -}}}}}}
      {cc
       {f 8192}
       {px
        {x449c4000 x449dc000 x449f0000 x44a00000 x44a10000 x44a14000 x44a1e000 x44a28000 x44a32000 x44a46000 x44a5a000 x44a72000 x44a8c000}
        {{{x 4
        {xc371ae09 -}}
       {xc2d98c20 x4188baa8 1 x4188baa8 1}
       {xc28d896e x4178a025 1 x4178a025 1}
       {x 7
        {0 -}}}
      {{x 4
        {xc3ccb19a -}}
       {xc3395ac4 x41e67a2e 1 x41e67a2e 1}
       {xc2f294f6 x41d18c4e 1 x41d18c4e 1}
       {x 7
        {xc0000000 -}}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x4371ae05 -}}
       {x42d98c40 xc188ba9a 1 xc188ba9a 1}
       {x428d8988 xc178a049 1 xc178a049 1}
       {x 7
        {0 -}}}
      {{x 4
        {x43ccb19c -}}
       {x43395ac6 xc1e67a30 1 xc1e67a30 1}
       {x42f294f9 xc1d18c50 1 xc1d18c50 1}
       {x 7
        {x40000000 -}}}}
        {{{x 4
        {xc1e07600 -}}
       {xc1e9019b xbe0ca880 1 xbe0ca880 1}
       {xc1eb732a xbdffc549 1 xbdffc549 1}
       {x 7
        {xc1f00000 -}}}
      {{x 4
        {x41803180 -}}
       {x3f1cea72 xbffdac1e 1 xbffdac1e 1}
       {xc072d095 xbfe6a308 1 xbfe6a308 1}
       {x 7
        {xc1400000 -}}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x41e07600 -}}
       {x41e9019b x3e0ca880 1 x3e0ca880 1}
       {x41eb732a x3dffc549 1 x3dffc549 1}
       {x 7
        {x41f00000 -}}}
      {{x 4
        {xc1803180 -}}
       {xbf1cea72 x3ffdac1e 1 x3ffdac1e 1}
       {x4072d095 x3fe6a308 1 x3fe6a308 1}
       {x 7
        {x41400000 -}}}}
        {{{0 0 1 xc1837920 1}
       {xc3037920 -}
       {xc25b4d61 x40e9bae4 1 x40e9bae4 1}
       {x 10
        {0 -}}}
      {{0 0 1 x41529000 1}
       {x42d29000 -}
       {x422f9cf9 xc0bb2aab 1 xc0bb2aab 1}
       {x 10
        {0 -}}}}
        {{{0 -}}
      {{0 -}}}
        {{{0 0 1 x41837920 1}
       {x43037920 -}
       {x425b4d61 xc0e9bae4 1 xc0e9bae4 1}
       {x 10
        {0 -}}}
      {{0 0 1 xc1529040 1}
       {xc2d29040 -}
       {xc22f9d2e x40bb2ae4 1 x40bb2ae4 1}
       {x 10
        {0 -}}}}
        {{{x3ff72000 0 1 xbfb0b000 1}
       {xc111cc00 -}
       {xc02b28b7 x3f1d0e39 1 x3f1d0e39 1}
       {x3ff72000 -}
       {xc0b75d8c xbf7c32c4 1 xbf7c32c4 1}
       {xc0fd7775 xbf654bf2 1 xbf654bf2 1}
       {x 7
        {xc1400000 -}}}
      {{x4186e280 0 1 x408da440 1}
       {x42511580 -}
       {x42081c06 xbffbceab 1 xbffbceab 1}
       {x4186e280 xbfac10f8 1 xbfac10f8 1}
       {x41484e29 xbeef2d50 1 xbeef2d50 1}
       {x414306d7 xbd97de5b 1 xbd97de5b 1}
       {x 7
        {x41400000 -}}}}
        {{{x 12
        {xc2fe99c0 -}}
       {xc2fe99c0 x3e6089d9 1 0 1}}
      {{x 12
        {xc1d4cc80 -}}
       {xc1d4cc80 x3e607b14 1 0 1}}}
        {{{xbff72000 0 1 x3fb0b000 1}
       {x4111cc00 -}
       {x402b28b7 xbf1d0e39 1 xbf1d0e39 1}
       {xbff72000 -}
       {x40b75d8c x3f7c32c4 1 x3f7c32c4 1}
       {x40fd7775 x3f654bf2 1 x3f654bf2 1}
       {x 7
        {x41400000 -}}}
      {{xc186e180 0 1 xc08da440 1}
       {xc2511500 -}
       {xc2081b47 x3ffbceab 1 x3ffbceab 1}
       {xc186e180 x3fac100e 1 x3fac100e 1}
       {xc1484d00 x3eef2843 1 x3eef2843 1}
       {xc143066b x3d97c925 1 x3d97c925 1}
       {x 7
        {xc1400000 -}}}}
        {{{xc19ff000 0 1 x402b5800 1}
       {x3fb68000 -}
       {xc130f895 xbf984e39 1 xbf984e39 1}
       {xc19ff000 -}
       {xc1798da0 x3f10b06d 1 x3f10b06d 1}
       {xc16571bc x3f038cdb 1 x3f038cdb 1}
       {x 5
        {xc1400000 -}}
       {xc26401b4 -}
       {xc1400000 x40a628f5 1 0 1}}
      {{xbf0ec000 0 1 x40d66420 1}
       {x42542920 -}
       {x41d7abdb xc03e91e4 1 xc03e91e4 1}
       {xbf0ec000 xc01d0d17 1 xc01d0d17 1}
       {xc144dca7 xbfad2d84 1 xbfad2d84 1}
       {xc16164e5 xbf072c39 1 xbf072c39 1}
       {x 5
        {xc1800000 -}}
       {xc20d5f9e -}
       {xc1800000 x400ed7e9 1 0 1}}}
        {{{x 12
        {xc2ef6680 -}}
       {xc2ef6680 x3f286000 1 0 1}}
      {{x 4
        {xc2c96680 -}}
       {xc2c966a0 -}
       {x 3
        {xc2c96680 -}}
       {xc2c966a0 -}
       {xc2c96680 -}
       {xc2c966a0 -}
       {xc2c96680 x38800000 1 x38800000 1}
       {xc2c96680 x3e6076c5 1 0 1}}}
        {{{x419ff000 0 1 xc02b5800 1}
       {xbfb68000 -}
       {x4130f895 x3f984e39 1 x3f984e39 1}
       {x419ff000 -}
       {x41798e00 xbf10aff2 1 xbf10aff2 1}
       {x41657209 xbf038db7 1 xbf038db7 1}
       {x 5
        {x41400000 -}}
       {x426401b2 -}
       {x41400000 xc0a628f3 1 0 1}}
      {{x3f0ec000 0 1 xc0d66405 1}
       {xc2542905 -}
       {xc1d7abc1 x403e91cc 1 x403e91cc 1}
       {x3f0ec000 x401d0d09 1 x401d0d09 1}
       {x4144dca3 x3fad2d82 1 x3fad2d82 1}
       {x416164e2 x3f072c42 1 x3f072c42 1}
       {x 5
        {x41800000 -}}
       {x420d5fa2 -}
       {x41800000 xc00ed7f0 1 0 1}}}
        {{{xc19aca00 0 1 x402c1c00 1}
       {x400a9000 -}
       {xc126091d xbf98fc72 1 xbf98fc72 1}
       {xc19aca00 -}
       {xc18c0e80 x3e727f1a 1 x3e727f1a 1}
       {xc187d812 x3e5c76db 1 x3e5c76db 1}
       {x 7
        {xc1800000 -}}}
      {{x40a20000 0 1 x40d745c7 1}
       {x426b85c7 -}
       {x42033c0b xc03f5a78 1 xc03f5a78 1}
       {x40a20000 xc0221802 1 xc0221802 1}
       {xc0f6dfbc xbfbd47e6 1 xbfbd47e6 1}
       {xc11b99e0 xbf1cb729 1 xbf1cb729 1}
       {x 7
        {xc1400000 -}}}}
        {{{x 12
        {xc2640000 -}}
       {xc2640000 x3ee07b14 1 0 1}}
      {{x 4
        {xc2733320 -}}
       {xc2733340 -}
       {x 2
        {xc2733300 -}}
       {x 2
        {xc2733340 -}}
       {xc2733300 -}
       {xc2733340 -}
       {xc2733320 x38000000 1 x38000000 1}
       {xc2733320 x3f607cd9 1 0 1}}}
        {{{x419aca00 0 1 xc02c1c00 1}
       {xc00a9000 -}
       {x4126091d x3f98fc72 1 x3f98fc72 1}
       {x419aca00 -}
       {x418c0e80 xbe727f1a 1 xbe727f1a 1}
       {x4187d812 xbe5c76db 1 xbe5c76db 1}
       {x 7
        {x41800000 -}}}
      {{xc0a20100 0 1 xc0d745a7 1}
       {xc26b85c7 -}
       {xc2033c1d x403f5a5c 1 x403f5a5c 1}
       {xc0a20100 x4022181d 1 x4022181d 1}
       {x40f6e000 x3fbd486a 1 x3fbd486a 1}
       {x411b9a04 x3f1cb6db 1 x3f1cb6db 1}
       {x 7
        {x41400000 -}}}}
        {{{0 0 1 xc0371b00 1}
       {xc1b71b00 -}
       {xc118b6a6 x3fa2c2ab 1 x3fa2c2ab 1}
       {x 10
        {0 -}}}
      {{0 0 1 x40fe7ba5 1}
       {x427e7ba5 -}
       {x41d43e63 xc0623504 1 xc0623504 1}
       {x 10
        {0 -}}}}
        {{{x 12
        {xc2be0000 -}}
       {xc2be0000 x3e607b14 1 0 1}}
      {{x 4
        {xc2906670 -}}
       {x 3
        {xc2906640 -}}
       {x 2
        {xc2906660 -}}
       {xc2906640 -}
       {xc2906660 xb78ba2e9 1 xb78ba2e9 1}
       {xc2906670 -}
       {xc2906640 x3f60818a 1 0 1}}}
        {{{0 0 1 x40371b00 1}
       {x41b71b00 -}
       {x4118b6a6 xbfa2c2ab 1 xbfa2c2ab 1}
       {x 10
        {0 -}}}
      {{0 0 1 xc0fe7ba3 1}
       {xc27e7ba3 -}
       {xc1d43e61 x40623503 1 x40623503 1}
       {x 10
        {0 -}}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 12
        {xc2ba3340 -}}
       {xc2ba3340 x3fa86000 1 0 1}}
      {{x 4
        {xc2a73340 -}}
       {x 2
        {xc2a73320 -}}
       {x 2
        {xc2a73340 -}}
       {x 3
        {xc2a73320 -}}
       {xc2a73340 -}
       {xc2a73320 x3f8c4fb1 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x41b8fe00 -}}
       {x41880e00 xbf49621b 1 xbf49621b 1}
       {x41741eaf xbf371b6e 1 xbf371b6e 1}
       {x 7
        {x41400000 -}}}
      {{x 4
        {x4042ea00 -}}
       {x4145e862 x3f99786a 1 x3f99786a 1}
       {x41709104 x3f8b88b5 1 x3f8b88b5 1}
       {x 7
        {x41a00000 -}}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xc1b8ff00 -}}
       {xc1880e0a x3f49656d 1 x3f49656d 1}
       {xc1741e9c x3f371b9b 1 x3f371b9b 1}
       {x 7
        {xc1400000 -}}}
      {{x 4
        {xc042f000 -}}
       {xc145e90e xbf997790 1 xbf997790 1}
       {xc1709174 xbf8b87f0 1 xbf8b87f0 1}
       {x 7
        {xc1a00000 -}}}}
        {{{x 4
        {xc15c5800 -}}
       {xc0e98800 x3f551cde 1 x3f551cde 1}
       {xc0ae4beb x3f41c000 1 x3f41c000 1}
       {x 5
        {xc0000000 -}}
       {xc1f88d8c xc0802bb3 1 xc0802bb3 1}
       {xc2cc4448 xc0c64e43 1 0 1}}
      {{x 4
        {xc1063200 -}}
       {xc1492dca xbf09d216 1 xbf09d216 1}
       {xc15c554e xbefa9c65 1 xbefa9c65 1}
       {x 5
        {xc1800000 -}}
       {x407daaa0 x40300b9a 1 x40300b9a 1}
       {x42531221 x4088304c 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x415c5800 -}}
       {x40e98800 xbf551cde 1 xbf551cde 1}
       {x40ae4beb xbf41c000 1 xbf41c000 1}
       {x 5
        {x40000000 -}}
       {x41f88d8d x40802bb4 1 x40802bb4 1}
       {x42cc4449 x40c64e44 1 0 1}}
      {{x 4
        {x41063200 -}}
       {x41492dca x3f09d216 1 x3f09d216 1}
       {x415c554e x3efa9c65 1 x3efa9c65 1}
       {x 5
        {x41800000 -}}
       {xc07daa8e xc0300b98 1 xc0300b98 1}
       {xc253121d xc088304a 1 0 1}}}
        {{{x 4
        {xc28025c0 -}}
       {xc2355800 x401a370b 1 x401a370b 1}
       {xc21fe919 x400c36db 1 x400c36db 1}
       {x 5
        {xc1f00000 -}}
       {xc26f5387 xc0838852 1 xc0838852 1}
       {xc304c280 xc0cb81d1 1 0 1}}
      {{x 4
        {xc1497600 -}}
       {xc216403b xc04d848b 1 xc04d848b 1}
       {xc232d057 xc03adae7 1 xc03adae7 1}
       {x 5
        {xc2680000 -}}
       {xc1b319c4 x409d0571 1 x409d0571 1}
       {x42815880 x40f2f17b 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x42802600 -}}
       {x423557fc xc01a37eb 1 xc01a37eb 1}
       {x421fe90d xc00c36d2 1 xc00c36d2 1}
       {x 5
        {x41f00000 -}}
       {x426f5387 x40838852 1 x40838852 1}
       {x4304c280 x40cb81d1 1 0 1}}
      {{x 4
        {x41497400 -}}
       {x42164001 x404d851b 1 x404d851b 1}
       {x4232d031 x403adb6b 1 x403adb6b 1}
       {x 5
        {x42680000 -}}
       {x41b319b6 xc09d0578 1 xc09d0578 1}
       {xc281588c xc0f2f187 1 0 1}}}
        {{{x 4
        {xc1b14500 -}}
       {xc19ef900 x3e969500 1 x3e969500 1}
       {xc199bdb8 x3e88e492 1 x3e88e492 1}
       {x 5
        {xc1900000 -}}
       {xc233194c xc06c1bc8 1 xc06c1bc8 1}
       {xc2dc75b4 xc0b6a74f 1 0 1}}
      {{x 4
        {x40ac5000 -}}
       {xc0a8d03d xbfaf781e 1 xbfaf781e 1}
       {xc1052e25 xbf9f8902 1 xbf9f8902 1}
       {x 5
        {xc1600000 -}}
       {x40c548d1 x4031d2b6 1 x4031d2b6 1}
       {x425dd93d x4089905f 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x41b14500 -}}
       {x419ef900 xbe969500 1 xbe969500 1}
       {x4199bdb8 xbe88e492 1 xbe88e492 1}
       {x 5
        {x41900000 -}}
       {x4233194d x406c1bc9 1 x406c1bc9 1}
       {x42dc75b5 x40b6a750 1 0 1}}
      {{x 4
        {xc0ac4c00 -}}
       {x40a8d20a x3faf76fc 1 x3faf76fc 1}
       {x41052ebb x3f9f87fa 1 x3f9f87fa 1}
       {x 5
        {x41600000 -}}
       {xc0c548cc xc031d2b4 1 xc031d2b4 1}
       {xc25dd93a xc089905d 1 0 1}}}
        {{{x 4
        {xc1863200 -}}
       {xc1c92e00 xbf89d25d 1 xbf89d25d 1}
       {xc1dc557a xbf7a9b6e 1 xbf7a9b6e 1}
       {x 5
        {xc2000000 -}}
       {xc1fa84f6 x3dc151ec 1 x3dc151ec 1}
       {xc1ed1f00 x3e158d67 1 0 1}}
      {{x 4
        {x41dc5880 -}}
       {x416989fe xbfd51c71 1 xbfd51c71 1}
       {x412e4d73 xbfc1c247 1 xbfc1c247 1}
       {x 5
        {x40800000 -}}
       {x41b4d991 x4024137d 1 x4024137d 1}
       {x42882f3a x407ddbcd 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x41863200 -}}
       {x41c92e00 x3f89d25d 1 x3f89d25d 1}
       {x41dc557a x3f7a9b6e 1 x3f7a9b6e 1}
       {x 5
        {x42000000 -}}
       {x41fa84f6 xbdc151ec 1 xbdc151ec 1}
       {x41ed1f00 xbe158d67 1 0 1}}
      {{x 4
        {xc1dc5880 -}}
       {xc16989fe x3fd51c71 1 x3fd51c71 1}
       {xc12e4d73 x3fc1c247 1 x3fc1c247 1}
       {x 5
        {xc0800000 -}}
       {xc1b4d991 xc024137d 1 xc024137d 1}
       {xc2882f3a xc07ddbcd 1 0 1}}}
        {{{x 4
        {x42139500 -}}
       {x41c26ff9 xbfcf3f86 1 xbfcf3f86 1}
       {x41a5a24c xbfbc6da7 1 xbfbc6da7 1}
       {x 5
        {x41600000 -}}
       {x411123ae xbf2ddae1 1 xbf2ddae1 1}
       {xc03e9800 xbf867e86 1 0 1}}
      {{x 4
        {x4136ed00 -}}
       {x41c78b33 x3fde612d 1 x3fde612d 1}
       {x41e6733c x3fca2f8b 1 x3fca2f8b 1}
       {x 5
        {x42100000 -}}
       {x42239400 x3f2ca440 1 x3f2ca440 1}
       {x42537029 x3f858daf 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xc2139580 -}}
       {xc1c27000 x3fcf4132 1 x3fcf4132 1}
       {xc1a5a241 x3fbc6db7 1 x3fbc6db7 1}
       {x 5
        {xc1600000 -}}
       {xc11123ae x3f2ddae1 1 x3f2ddae1 1}
       {x403e9800 x3f867e86 1 0 1}}
      {{x 4
        {xc136ed00 -}}
       {xc1c78b33 xbfde612d 1 xbfde612d 1}
       {xc1e6733c xbfca2f8b 1 xbfca2f8b 1}
       {x 5
        {xc2100000 -}}
       {xc2239380 xbf2ca440 1 xbf2ca440 1}
       {xc2537029 xbf858f87 1 0 1}}}
        {{{x 4
        {x40c9d000 -}}
       {xc02a4800 xbf939aca 1 xbf939aca 1}
       {xc0a732f9 xbf863492 1 xbf863492 1}
       {x 5
        {xc1200000 -}}
       {xc19644ee xbf9aea23 1 xbf9aea23 1}
       {xc22106eb xbfefaf11 1 0 1}}
      {{x 4
        {x418e4300 -}}
       {x41866b38 xbe01188d 1 xbe01188d 1}
       {x41842d15 xbdeabedb 1 xbdeabedb 1}
       {x 5
        {x41800000 -}}
       {x3fafb68f xc000fcef 1 xc000fcef 1}
       {xc2098b35 xc04791fc 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xc0c9d400 -}}
       {x402a4702 x3f939c57 1 x3f939c57 1}
       {x40a732d9 x3f8634db 1 x3f8634db 1}
       {x 5
        {x41200000 -}}
       {x419644ed x3f9aea20 1 x3f9aea20 1}
       {x422106e9 x3fefaf0d 1 0 1}}
      {{x 4
        {xc18e4380 -}}
       {xc1866b72 x3e011d0d 1 x3e011d0d 1}
       {xc1842d3b x3deac725 1 x3deac725 1}
       {x 5
        {xc1800000 -}}
       {xbfafb674 x4000fcf1 1 x4000fcf1 1}
       {x42098b38 x404791ff 1 0 1}}}
        {{{x 11
        {0 -}}
       {xc1089200 xbf968999 1 xbf968999 1}
       {xc1eb36ff xbfe8e8bc 1 0 1}}
      {{x 11
        {0 -}}
       {xc1024184 xbf8f9485 1 xbf8f9485 1}
       {xc1e05810 xbfde25b0 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 11
        {0 -}}
       {x41089200 x3f968998 1 x3f968998 1}
       {x41eb36fe x3fe8e8ba 1 0 1}}
      {{x 11
        {0 -}}
       {x41024185 x3f8f9486 1 x3f8f9486 1}
       {x41e05812 x3fde25b2 1 0 1}}}
        {{{x 4
        {xc192b800 -}}
       {xc1ced100 xbf774dc6 1 xbf774dc6 1}
       {xc1e0004e xbf60d6db 1 xbf60d6db 1}
       {x 4
        {xc2000000 -}}
       {xc1468f37 x3f922984 1 x3f922984 1}
       {xc0dc1ba8 x3e8a62d6 1 x3e8a62d6 1}
       {xc0b4e400 x3bcd5540 1 0 1}}
      {{x 4
        {x41d26400 -}}
       {x414efaf9 xbfdbf36c 1 xbfdbf36c 1}
       {x4111d7b9 xbfc7fa41 1 xbfc7fa41 1}
       {x 4
        {x40000000 -}}
       {x41df4738 x3f949080 1 x3f949080 1}
       {x420235ac x3e337fb1 1 x3e337fb1 1}
       {x42053f80 x30ec4ec5 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x4192b900 -}}
       {x41ced12e x3f774ad0 1 x3f774ad0 1}
       {x41e00061 x3f60d609 1 x3f60d609 1}
       {x 4
        {x42000000 -}}
       {x41468f3b xbf922983 1 xbf922983 1}
       {x40dc1bae xbe8a62db 1 xbe8a62db 1}
       {x40b4e400 xbbcd5765 1 0 1}}
      {{x 4
        {xc1d26400 -}}
       {xc14efaf9 x3fdbf36c 1 x3fdbf36c 1}
       {xc111d7b9 x3fc7fa41 1 x3fc7fa41 1}
       {x 4
        {xc0000000 -}}
       {xc1df4737 xbf94915c 1 xbf94915c 1}
       {xc20235c7 xbe3380d9 1 xbe3380d9 1}
       {xc2053fa0 x3144ec4f 1 0 1}}}
        {{{x 4
        {x41912e00 -}}
       {x4125e000 xbf801056 1 xbf801056 1}
       {x41024795 xbf68db6e 1 xbf68db6e 1}
       {x 4
        {x40800000 -}}
       {xc10b71b0 -}
       {xc106f200 x3d1ea0a4 1 x3d1ea0a4 1}
       {xc0f7e800 x3d7560e9 1 0 1}}
      {{x 4
        {x4114f400 -}}
       {x41730428 x3f4189a3 1 x3f4189a3 1}
       {x4186f503 x3f2ff680 1 x3f2ff680 1}
       {x 4
        {x41a00000 -}}
       {x4213ff46 -}
       {x420f392e xbe286352 1 xbe286352 1}
       {x42038d93 xbe8243ce 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xc1912e00 -}}
       {xc125e000 x3f801056 1 x3f801056 1}
       {xc1024795 x3f68db6e 1 x3f68db6e 1}
       {x 4
        {xc0800000 -}}
       {x410b71b6 -}
       {x4106f200 xbd1ea0e1 1 xbd1ea0e1 1}
       {x40f7e800 xbd7560cb 1 0 1}}
      {{x 4
        {xc114f400 -}}
       {xc1730428 xbf4189a3 1 xbf4189a3 1}
       {xc186f503 xbf2ff680 1 xbf2ff680 1}
       {x 4
        {xc1a00000 -}}
       {xc213ff46 -}
       {xc20f3932 x3e2862cd 1 x3e2862cd 1}
       {xc2038da0 x3e82436a 1 0 1}}}
        {{{x 4
        {x41165400 -}}
       {x40875000 xbf2a190f 1 xbf2a190f 1}
       {x4030115a xbf1aa492 1 xbf1aa492 1}
       {x 5
        {0 -}}
       {xc0345800 xbec6cccd 1 xbec6cccd 1}
       {xc11b5000 xbf19cb92 1 0 1}}
      {{x 4
        {x40eee000 -}}
       {x411f5700 x3ea433fd 1 x3ea433fd 1}
       {x412ac03f x3e954db7 1 x3e954db7 1}
       {x 5
        {x41400000 -}}
       {x417d5c59 x3f074666 1 x3f074666 1}
       {x41c9af00 x3f514c29 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xc1165400 -}}
       {xc0875000 x3f2a190f 1 x3f2a190f 1}
       {xc030115a x3f1aa492 1 x3f1aa492 1}
       {x 5
        {0 -}}
       {x40345800 x3ec6cccd 1 x3ec6cccd 1}
       {x411b5000 x3f19cb92 1 0 1}}
      {{x 4
        {xc0eee000 -}}
       {xc11f5800 xbea43690 1 xbea43690 1}
       {xc12ac10d xbe954925 1 xbe954925 1}
       {x 5
        {xc1400000 -}}
       {xc17d5c59 xbf074665 1 xbf074665 1}
       {xc1c9aeff xbf514c26 1 0 1}}}
        {{{x 4
        {x41c68d00 -}}
       {x3fa2c000 xc041cc0e 1 xc041cc0e 1}
       {xc0aec848 xc0303249 1 xc0303249 1}
       {x 5
        {xc1900000 -}}
       {xc182a900 x3e6b3d71 1 x3e6b3d71 1}
       {xc1441c00 x3eb5f806 1 0 1}}
      {{x 4
        {x422ad5c0 -}}
       {x42321323 x3e6e5666 1 x3e6e5666 1}
       {x42342520 x3e58b1db 1 x3e58b1db 1}
       {x 5
        {x42380000 -}}
       {x421e8a0f xbf608571 1 xbf608571 1}
       {x41c097c0 xbfadb08c 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xc1c68d00 -}}
       {xbfa2c000 x4041cc0e 1 x4041cc0e 1}
       {x40aec848 x40303249 1 x40303249 1}
       {x 5
        {x41900000 -}}
       {x4182a900 xbe6b3d71 1 xbe6b3d71 1}
       {x41441c00 xbeb5f806 1 0 1}}
      {{x 4
        {xc22ad580 -}}
       {xc2321306 xbe6e5ae6 1 xbe6e5ae6 1}
       {xc234250d xbe58b600 1 xbe58b600 1}
       {x 5
        {xc2380000 -}}
       {xc21e8a0f x3f608571 1 x3f608571 1}
       {xc1c097c0 x3fadb08c 1 0 1}}}
        {{{x 4
        {xc06c2000 -}}
       {xc1275a00 xbf5edee3 1 xbf5edee3 1}
       {xc146534e xbf4aa000 1 xbf4aa000 1}
       {x 4
        {xc1800000 -}}
       {xc1d66de4 -}
       {xc1c28ade x3eaf5e64 1 x3eaf5e64 1}
       {xc191ed05 x3f07aa4d 1 0 1}}
      {{x 4
        {x418c0800 -}}
       {x4144707c xbf2c0e9b 1 xbf2c0e9b 1}
       {x412c86df xbf1c6ed2 1 xbf1c6ed2 1}
       {x 4
        {x41000000 -}}
       {x420528e6 -}
       {x420358c8 xbd7fcbd7 1 xbd7fcbd7 1}
       {x41fdd458 xbdc5e245 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x406c2000 -}}
       {x41275a00 x3f5edee3 1 x3f5edee3 1}
       {x4146534e x3f4aa000 1 x3f4aa000 1}
       {x 4
        {x41800000 -}}
       {x41d66de8 -}
       {x41c28ae2 xbeaf5e66 1 xbeaf5e66 1}
       {x4191ed08 xbf07aa50 1 0 1}}
      {{x 4
        {xc18c0800 -}}
       {xc144707c x3f2c0e9b 1 x3f2c0e9b 1}
       {xc12c86df x3f1c6ed2 1 x3f1c6ed2 1}
       {x 4
        {xc1000000 -}}
       {xc20528e5 -}
       {xc20358c4 x3d7fcd9a 1 x3d7fcd9a 1}
       {xc1fdd440 x3dc5e3ad 1 0 1}}}
        {{{x 4
        {xc18dec00 -}}
       {xc1b24300 xbf1589b3 1 xbf1589b3 1}
       {xc1bca708 xbf07f249 1 xbf07f249 1}
       {x 4
        {xc1d00000 -}}
       {xc194bfdb x3ee645d1 1 x3ee645d1 1}
       {xc180d800 x3e0ed5b8 1 x3e0ed5b8 1}
       {xc171b43a x3d3a7541 1 0 1}}
      {{x 4
        {x4198e800 -}}
       {x40f014d0 xbfbf1d96 1 xbfbf1d96 1}
       {x4085d609 xbfadc2c0 1 xbfadc2c0 1}
       {x 4
        {xc0000000 -}}
       {x41c37026 -}
       {x41bc3d9e xbdfde03d 1 xbdfde03d 1}
       {x41aaa540 xbe4465fb 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x418dea00 -}}
       {x41b24200 x3f158dfa 1 x3f158dfa 1}
       {x41bca65e x3f07f6db 1 x3f07f6db 1}
       {x 4
        {x41d00000 -}}
       {x4194bfdc xbee645d1 1 xbee645d1 1}
       {x4180d800 xbe0ed5b1 1 xbe0ed5b1 1}
       {x4171b43f xbd3a74bc 1 0 1}}
      {{x 4
        {xc198e700 -}}
       {xc0f01303 x3fbf1c74 1 x3fbf1c74 1}
       {xc085d4dd x3fadc1b9 1 x3fadc1b9 1}
       {x 4
        {x40000000 -}}
       {xc1c37024 -}
       {xc1bc3da2 x3dfddf66 1 x3dfddf66 1}
       {xc1aaa553 x3e446553 1 0 1}}}
        {{{x 4
        {x3ed0c000 -}}
       {xc13ea400 xbfcad59d 1 xbfcad59d 1}
       {xc1770504 xbfb86925 1 xbfb86925 1}
       {x 4
        {xc1b00000 -}}
       {xc197c478 x3e73a2e9 1 x3e73a2e9 1}
       {xc1862000 x3e2cab5c 1 x3e2cab5c 1}
       {xc16c1600 x3e172f3e 1 0 1}}
      {{x 4
        {x41e36180 -}}
       {x41b5870e xbf3cb066 1 xbf3cb066 1}
       {x41a86a60 xbf2b8df7 1 xbf2b8df7 1}
       {x 4
        {x41900000 -}}
       {x41ddeab6 -}
       {x41cf99ac xbe7c7f29 1 xbe7c7f29 1}
       {x41ac99e0 xbec354dd 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xbed0c000 -}}
       {x413ea400 x3fcad59d 1 x3fcad59d 1}
       {x41770504 x3fb86925 1 x3fb86925 1}
       {x 4
        {x41b00000 -}}
       {x4197c47b xbe73a2e9 1 xbe73a2e9 1}
       {x41862000 xbe2cab6c 1 xbe2cab6c 1}
       {x416c1600 xbe172f36 1 0 1}}
      {{x 4
        {xc1e36100 -}}
       {xc1b586d5 x3f3caf43 1 x3f3caf43 1}
       {xc1a86a3b x3f2b8cf2 1 x3f2b8cf2 1}
       {x 4
        {xc1900000 -}}
       {xc1ddeab4 -}
       {xc1cf99bb x3e7c7df6 1 x3e7c7df6 1}
       {xc1ac9a1a x3ec353ec 1 0 1}}}
        {{{x 4
        {x3fd38000 -}}
       {xc12413d5 xbfc3fec0 1 xbfc3fec0 1}
       {xc15a8e70 xbfb2327a 1 xbfb2327a 1}
       {x 4
        {xc1a00000 -}}
       {xc2267e6d -}
       {xc21c050e x3eb8ba80 1 x3eb8ba80 1}
       {xc2026a00 x3f0ee7ef 1 0 1}}
      {{x 4
        {x41d6da00 -}}
       {x41afe372 xbf2055e3 1 xbf2055e3 1}
       {x41a4bf29 xbf11c69b 1 xbf11c69b 1}
       {x 4
        {x41900000 -}}
       {x4265b0b1 -}
       {x4255efea xbf0aea66 1 xbf0aea66 1}
       {x422f6d21 xbf56ee23 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xbfd37000 -}}
       {x41241400 x3fc3fd26 1 x3fc3fd26 1}
       {x415a8e70 x3fb23249 1 x3fb23249 1}
       {x 4
        {x41a00000 -}}
       {x42267e6e -}
       {x421c050f xbeb8ba85 1 xbeb8ba85 1}
       {x42026a00 xbf0ee7f5 1 0 1}}
      {{x 4
        {xc1d6da00 -}}
       {xc1afe372 x3f2055e3 1 x3f2055e3 1}
       {xc1a4bf29 x3f11c69b 1 x3f11c69b 1}
       {x 4
        {xc1900000 -}}
       {xc265b0b0 -}
       {xc255efe9 x3f0aea66 1 x3f0aea66 1}
       {xc22f6d20 x3f56ee23 1 0 1}}}
        {{{x 4
        {x42596d00 -}}
       {x42283f8c xbfca5e5a 1 xbfca5e5a 1}
       {x421a2f84 xbfb7fdee 1 xbfb7fdee 1}
       {x 5
        {x42000000 -}}
       {x41a731ad xbfc3c7c4 1 xbfc3c7c4 1}
       {xc0c7a089 xc01774a7 1 0 1}}
      {{x 4
        {x40144000 -}}
       {x41c9ea14 x403ca87a 1 x403ca87a 1}
       {x41fe5a99 x402b86c5 1 x402b86c5 1}
       {x 5
        {x42300000 -}}
       {x42424502 x3f211b71 1 x3f211b71 1}
       {x426eeeb8 x3f7943d6 1 0 1}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xc2596d00 -}}
       {xc2283f8c x3fca5e5a 1 x3fca5e5a 1}
       {xc21a2f84 x3fb7fdee 1 x3fb7fdee 1}
       {x 5
        {xc2000000 -}}
       {xc1a731ab x3fc3c7c7 1 x3fc3c7c7 1}
       {x40c7a09c x401774a9 1 0 1}}
      {{x 4
        {xc0143800 -}}
       {xc1c9e9a0 xc03ca90b 1 xc03ca90b 1}
       {xc1fe5a4e xc02b8749 1 xc02b8749 1}
       {x 5
        {xc2300000 -}}
       {xc2424502 xbf211b71 1 xbf211b71 1}
       {xc26eeeb8 xbf7943d6 1 0 1}}}
        {{{x 4
        {x42ce6640 -}}
       {x42d3adc0 x3eadcd00 1 x3eadcd00 1}
       {x42d53042 x3e9e0925 1 x3e9e0925 1}
       {x 7
        {x42d80000 -}}}
      {{x 4
        {xc25fc780 -}}
       {x3df02f41 x40e6b2eb 1 x40e6b2eb 1}
       {x4181304c x40d1bfe5 1 x40d1bfe5 1}
       {x 7
        {x42380000 -}}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xc2ce6600 -}}
       {xc2d3adb8 xbeadd333 1 xbeadd333 1}
       {xc2d53040 xbe9e0a49 1 xbe9e0a49 1}
       {x 7
        {xc2d80000 -}}}
      {{x 4
        {x425fc780 -}}
       {xbdf02f41 xc0e6b2eb 1 xc0e6b2eb 1}
       {xc181304c xc0d1bfe5 1 xc0d1bfe5 1}
       {x 7
        {xc2380000 -}}}}
        {{{x 4
        {x42a439c0 -}}
       {xc3a56fb0 -}
       {xc36f1b95 x42843fd2 1 x42843fd2 1}
       {x 7
        {x43040000 -}}}
      {{x 4
        {xc2ceb3e0 -}}
       {xc401cedb -}
       {xc3d025a1 x42945a1f 1 x42945a1f 1}
       {x 7
        {0 -}}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xc2a439c0 -}}
       {x4400c4b0 -}
       {x43c1652f xc2b8e0c9 1 xc2b8e0c9 1}
       {x 7
        {xc3040000 -}}}
      {{x 4
        {x42ceb3c0 -}}
       {x444a12cf -}
       {x44220323 xc2e6f0ed 1 xc2e6f0ed 1}
       {x 7
        {0 -}}}}
        {{{x 4
        {x41c4fe00 -}}
       {x42842684 x40aa92fd 1 x40aa92fd 1}
       {x429bdb5e x409b15ae 1 x409b15ae 1}
       {x 7
        {x42c80000 -}}}
      {{x 4
        {xc2d84f80 -}}
       {xc296260e x4088214d 1 x4088214d 1}
       {xc2833ab0 x40778965 1 x40778965 1}
       {x 7
        {xc2400000 -}}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {xc1c50000 -}}
       {xc28426be xc0aa926d 1 xc0aa926d 1}
       {xc29bdb84 xc09b1529 1 xc09b1529 1}
       {x 7
        {xc2c80000 -}}}
      {{x 4
        {x42d84fc0 -}}
       {x4296262b xc0882195 1 xc0882195 1}
       {x42833ac3 xc07789e9 1 xc07789e9 1}
       {x 7
        {x42400000 -}}}}
        {{{x 4
        {xc390077c -}}
       {xc2b41b21 x41cbb37c 1 x41cbb37c 1}
       {xc205ba76 x41b93413 1 x41b93413 1}
       {x 7
        {x42900000 -}}}
      {{x 4
        {xc406b5bf -}}
       {xc394348d x41f96717 1 x41f96717 1}
       {xc363161f x41e2c142 1 x41e2c142 1}
       {x 7
        {xc2c40000 -}}}}
        {{{0 -}}
      {{0 -}}}
        {{{x 4
        {x4390077d -}}
       {x42b41b22 xc1cbb37d 1 xc1cbb37d 1}
       {x4205ba77 xc1b93413 1 xc1b93413 1}
       {x 7
        {xc2900000 -}}}
      {{x 4
        {x4406b5bf -}}
       {x4394348d xc1f96717 1 xc1f96717 1}
       {x4363161f xc1e2c142 1 xc1e2c142 1}
       {x 7
        {x42c40000 -}}}}}}}
     {tx x44a1e000 x455bfee6 x44c37dcb}
     {a osw x41200000 osf 0 str 1 spx x44800000 spy x44428000 sb 1 ltn x44a1e000 ltm x44a1e000 tt x40800000}}}}}}
 toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_ripple true
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1024 778}
 colorOverlay {0 0 0 0}
 lifetime_type "all frames"
 lifetime_start 1295
 lifetime_end 1295
 motionblur_shutter_offset_type centred
 source_black_outside true
 name Roto10
 selected true
 xpos -4354
 ypos 7569
}
set N1fa82100 [stack 0]
Write {
 channels rgba
 file //lux/collection/MOFAstock/00_INBOX/NUKE_JM/KeySample/Precomp/matte_v01.####.jpg
 file_type jpeg
 _jpeg_quality 1
 checkHashOnRead false
 in_colorspace linear
 out_colorspace linear
 name Write4
 selected true
 xpos -4153
 ypos 7563
 addUserKnob {20 caravr l CaraVR}
 addUserKnob {4 viewPresets l "View Presets" M {main stereo cams all}}
 addUserKnob {22 set l Set -STARTLINE T "w = nuke.thisNode()\nscriptViews = nuke.views()\nviewPreset = w\['viewPresets'].getValue()\nselectedViews = None\nif viewPreset == 0:\n  selectedViews = \['main']\nif viewPreset == 1:\n  stereoViews = \['left', 'right']\n  if set(stereoViews).issubset(set(scriptViews)):\n    selectedViews = stereoViews\n  else:\n    selectedViews = None\nelif viewPreset == 2:\n  selectedViews = \[v for v in scriptViews if 'cam' in v.lower()]\nelif viewPreset == 3:\n  selectedViews = scriptViews\nif selectedViews:\n  w\['views'].fromScript(' '.join(selectedViews))\n"}
}
Colorspace {
 inputs 0
 colorspace_out YCbCr
 name Colorspace4
 selected true
 xpos -5269
 ypos 6082
}
Blur {
 channels {-rgba.red rgba.green rgba.blue -rgba.alpha}
 size 4
 name Blur5
 selected true
 xpos -5269
 ypos 6108
}
Colorspace {
 colorspace_in YCbCr
 name Colorspace14
 selected true
 xpos -5269
 ypos 6134
}
Dot {
 name Dot421
 selected true
 xpos -5235
 ypos 6424
}
Denoise2 {
 analysisRegion {924 1649.5 1956 2710.5}
 analysisFrame 864
 needsAnalyzing false
 profileCurve {profile {curve x0.1000000015 0 x0.1333521456 0 x0.1778279394 0 x0.2371373773 0 x0.3162277639 0 x0.4216965139 0 x0.5623413324 0 x0.7498942018 0 x1 0}}
 serializeKnob "1.14305 0.824309 1.08732
0.00130495 0.00408269 0.000921237
0.00130495 0.00408269 0.000921237
0.000399797 0.000851005 0.000275689
0 0 0
0.00123604 0.00486622 0.000878212
0.00123604 0.00486622 0.000878212
0.000638939 0.00245391 0.00045212
0 0 0
0.000800973 0.00331939 0.000569271
0.000800973 0.00331939 0.000569271
0.000449663 0.00186782 0.000319361
0 0 0
0.00044149 0.00186847 0.000313885
0.00044149 0.00186847 0.000313885
0.000234856 0.00103259 0.000166983
0 0 0 0 0 0 0 0 0 
4628228260172597779"
 name Denoise2
 selected true
 xpos -5269
 ypos 6459
}
Radial {
 inputs 0
 area {-235 1910 6410 4500}
 name Radial2
 selected true
 xpos -5561
 ypos 9829
}
Read {
 inputs 0
 file /jobs/RUSTCITY/dc0410/ELEMENT/E_dc0410_roto_id_fg01_s01_00_L020_v009/2156x1152/e_dc0410_roto_id_fg01_s01_00_L020_v009.####.exr
 localizationPolicy off
 format "2156 1152 0 0 2156 1152 1 RUSTCITY Delivery"
 proxy_format "640 480 0 0 640 480 1 PC_Video"
 first 1001
 last 1319
 origfirst 1001
 origlast 1319
 origset true
 smartGrade true
 name Read13
 label "<font size=3 color=green> Approved"
 selected true
 xpos -4580
 ypos 7183
 postage_stamp_frame 1160
 addUserKnob {20 Ivy}
 addUserKnob {22 ivy_documentation l "Ivy Documentation" t "Open IvyTab documentation page in your web browser" T "__import__('dnnuke.utils.asst.common', fromlist=\['openDocsName']).openDocsName('IvyTab')" +STARTLINE}
 addUserKnob {26 divider4 l "" +STARTLINE}
 addUserKnob {1 _ivyVals l "" +STARTLINE +HIDDEN}
 _ivyVals "\{'ivy_job': '', 'ivy_usemanualuri': False, 'leafname': '', 'ivy_vnum': 0, 'ivy_twignametags': \{\}, 'ivy_shot': '', 'ivy_regex': False, 'ivy_type': '', 'ivy_versionquery': '', 'spider_uri': ''\}"
 addUserKnob {52 ivyTab l "" -STARTLINE T "__import__('nukescripts').panels.WidgetKnob(__import__('dnnuke.core.ivy.tab.widget.query', fromlist=\['getBoundKnob']).getBoundKnob(nuke.thisNode()))"}
 addUserKnob {1 _ivyFile l "" +STARTLINE +HIDDEN +INVISIBLE}
 _ivyFile /jobs/RUSTCITY/dc0410/ELEMENT/E_dc0410_roto_id_fg01_s01_00_L020_v009/2156x1152/e_dc0410_roto_id_fg01_s01_00_L020_v009.####.exr
 addUserKnob {78 _expressions l "" -STARTLINE +HIDDEN +INVISIBLE n 1}
 _expressions {{curve}}
 addUserKnob {26 divider0 l "" +STARTLINE}
 addUserKnob {20 dbinfo l "DB Info" n 1}
 dbinfo 0
 addUserKnob {1 twig_dnuuid l "Twig Id"}
 twig_dnuuid 812230a9-f03c-4afd-a91e-22445eaa2c7a
 addUserKnob {1 stalk_dnuuid l "Stalk Id"}
 stalk_dnuuid 78538077-65f3-451b-a30c-9c714ab448ba
 addUserKnob {1 twigtype_dnuuid l "Twig Type Id"}
 twigtype_dnuuid e9f824fa-c932-4c3e-acbd-c612fb5ea846
 addUserKnob {1 leaf_dnuuid l "Leaf Id"}
 leaf_dnuuid e3d433f5-f0c5-4d7e-bace-cf0cf70a486c
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {1 twigtype l "Twig Type"}
 twigtype elmr
 addUserKnob {1 leaf_label l Leaf}
 leaf_label main_proxy0
 addUserKnob {1 ivy_version l Version}
 ivy_version 9
 addUserKnob {43 ivy_notes l Notes}
 ivy_notes "Roto Done"
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {1 build_label l "Build Label"}
 addUserKnob {20 dbinfoEndGroup l "DB Info" n -1}
}
set N1fa7f040 [stack 0]
RGBAUnion {
 name RGBAUnion3
 selected true
 xpos -4745
 ypos 7335
 g false
 b false
}
push $N1fa7f040
RGBAUnion {
 name RGBAUnion5
 selected true
 xpos -4599
 ypos 7307
 r false
 b false
 a false
}
FilterErode {
 size -16
 filter gaussian
 name FilterErode5
 selected true
 xpos -4599
 ypos 7345
}
push $N1fa7f040
RGBAUnion {
 name RGBAUnion4
 selected true
 xpos -4459
 ypos 7294
 r false
 g false
 a false
}
FilterErode {
 size -16
 filter gaussian
 name FilterErode4
 selected true
 xpos -4459
 ypos 7332
}
ChannelMerge {
 inputs 2
 name ChannelMerge8
 selected true
 xpos -4515
 ypos 7398
}
ChannelMerge {
 inputs 2
 name ChannelMerge7
 selected true
 xpos -4582
 ypos 7470
}
Clamp {
 maximum 0
 MaxClampTo_enable true
 name Clamp4
 selected true
 xpos -4582
 ypos 7765
}
Dot {
 inputs 0
 name Dot25
 selected true
 xpos -5235
 ypos 6761
}
Dot {
 name Dot422
 selected true
 xpos -5235
 ypos 7621
}
set N20277930 [stack 0]
Grade {
 blackpoint {-0.00155 0 0 0}
 blackpoint_panelDropped true
 black_clamp false
 name Grade52
 selected true
 xpos -4841
 ypos 7617
}
Dot {
 name Dot423
 selected true
 xpos -4807
 ypos 7643
}
IBKColourV3 {
 name IBKColourV3_37
 selected true
 xpos -4841
 ypos 7692
 Size 0.01
 off {0.007 -0.219 -0.011}
 off_panelDropped true
 mult {1 0.983 1}
 erode 6
 multi 14
}
Merge2 {
 inputs 2
 operation stencil
 name Merge70
 selected true
 xpos -4841
 ypos 7771
}
IBKColourV3 {
 name IBKColourV3_38
 selected true
 xpos -4841
 ypos 7802
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*2}}
}
IBKColourV3 {
 name IBKColourV3_39
 selected true
 xpos -4841
 ypos 7828
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*3}}
}
IBKColourV3 {
 name IBKColourV3_40
 selected true
 xpos -4841
 ypos 7848
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*4}}
}
IBKColourV3 {
 name IBKColourV3_41
 selected true
 xpos -4841
 ypos 7874
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*5}}
}
IBKColourV3 {
 name IBKColourV3_42
 selected true
 xpos -4841
 ypos 7920
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*6}}
}
IBKColourV3 {
 name IBKColourV3_43
 selected true
 xpos -4841
 ypos 7946
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*7}}
}
IBKColourV3 {
 name IBKColourV3_44
 selected true
 xpos -4841
 ypos 7972
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*8}}
}
IBKColourV3 {
 name IBKColourV3_45
 selected true
 xpos -4841
 ypos 7998
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*16}}
}
IBKColourV3 {
 name IBKColourV3_46
 selected true
 xpos -4841
 ypos 8018
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*32}}
}
IBKColourV3 {
 name IBKColourV3_47
 selected true
 xpos -4841
 ypos 8044
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*64}}
}
IBKColourV3 {
 name IBKColourV3_48
 selected true
 xpos -4841
 ypos 8070
 Size {{parent.IBKColourV3_37.Size}}
 off {{parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off} {parent.IBKColourV3_37.off}}
 mult {{parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult} {parent.IBKColourV3_37.mult}}
 erode {{parent.IBKColourV3_37.erode*0}}
 multi {{parent.IBKColourV3_37.multi*132}}
}
push $N20277930
Group {
 inputs 2
 name PxF_ScreenClean
 help "Clean chroma key background imperfections using a clean plate."
 tile_color 0x733520ff
 selected true
 xpos -5269
 ypos 8068
 addUserKnob {20 User}
 addUserKnob {4 screen_type l ScreenType t "The color of the chroma key background." M {Red Green Blue "" "" ""}}
 screen_type Green
 addUserKnob {18 screen_color l ScreenColor t "The color that will be used to repair the chroma key background (usually the average color of the background)."}
 screen_color {0.0006761939148 0.303132534 0.02479609847}
 addUserKnob {6 screen_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 screen_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 screen_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {26 t l "" t "PxF_ScreenClean.\nInput 1 = Plate.\nInput 2 = Clean Plate.\nUse ScreenClean to erase\nimperfections in a green/blue/red\nscreen using a clean plate." -STARTLINE T "PxF_ScreenClean 2.0.3 - (c) 2012 - Xavier Bourque - www.pixelfudger.com"}
}
 Input {
  inputs 0
  name mask
  xpos 419
  ypos 274
  number 2
 }
 Input {
  inputs 0
  name plate
  xpos 203
  ypos -448
 }
 Dot {
  name Dot1
  xpos 209
  ypos -347
 }
set N211e4a80 [stack 0]
 Dot {
  name Dot2
  xpos -64
  ypos -202
 }
 Dot {
  name Dot3
  xpos -57
  ypos 214
 }
set N211edf60 [stack 0]
push $N211edf60
push $N211e4a80
 Shuffle {
  red blue
  green blue
  alpha black
  name Blue
  xpos 203
  ypos -187
 }
set N211f2a10 [stack 0]
push $N211e4a80
 Shuffle {
  red green
  blue green
  alpha black
  name Green
  xpos 112
  ypos -179
 }
set N21201730 [stack 0]
push $N211e4a80
 Shuffle {
  green red
  blue red
  alpha black
  name Red
  xpos 17
  ypos -180
 }
set N21210400 [stack 0]
 Switch {
  inputs 3
  which {{screen_type i x1 0}}
  name High
  xpos 17
  ypos -99
 }
push $N21201730
push $N21210400
 Switch {
  inputs 2
  which {{"screen_type == 0 ? 1 : screen_type == 1 ? 0 : 0" i x1 0}}
  name LowA
  xpos 145
  ypos -108
 }
push $N211f2a10
push $N21201730
push 0
 Switch {
  inputs 3
  which {{"screen_type == 0 ? 2 : screen_type == 1 ? 2 : 1" i x1 1}}
  name LowB
  xpos 261
  ypos -107
 }
 Merge2 {
  inputs 2
  operation max
  name Merge1
  xpos 217
  ypos -59
 }
 Merge2 {
  inputs 2
  operation minus
  name Merge2
  xpos 116
  ypos -20
 }
 Input {
  inputs 0
  name clean_plate
  xpos 462
  ypos -437
  number 1
 }
 Dot {
  name Dot4
  xpos 530
  ypos -235
 }
set N2125abe0 [stack 0]
 Shuffle {
  red blue
  green blue
  alpha black
  name Blue1
  xpos 570
  ypos -194
 }
set N2125f630 [stack 0]
push $N2125abe0
 Shuffle {
  red green
  blue green
  alpha black
  name Green1
  xpos 481
  ypos -195
 }
set N2126e310 [stack 0]
push $N2125abe0
 Shuffle {
  green red
  blue red
  alpha black
  name Red1
  xpos 382
  ypos -194
 }
set N2127d0b0 [stack 0]
 Switch {
  inputs 3
  which {{screen_type i x1 0}}
  name High1
  xpos 401
  ypos -130
 }
push $N2126e310
push $N2127d0b0
 Switch {
  inputs 2
  which {{"screen_type == 0 ? 1 : screen_type == 1 ? 0 : 0" i}}
  name LowA1
  xpos 498
  ypos -131
 }
push $N2125f630
push $N2126e310
push 0
 Switch {
  inputs 3
  which {{"screen_type == 0 ? 2 : screen_type == 1 ? 2 : 1" i}}
  name LowB1
  xpos 592
  ypos -128
 }
 Merge2 {
  inputs 2
  operation max
  name Merge3
  xpos 532
  ypos -73
 }
 Merge2 {
  inputs 2
  operation minus
  name Merge4
  xpos 429
  ypos -19
 }
 Merge2 {
  inputs 2
  operation divide
  name Merge5
  xpos 309
  ypos 87
 }
 Clamp {
  name Clamp1
  xpos 309
  ypos 114
 }
push $N2125abe0
 Dot {
  name Dot5
  xpos 720
  ypos -198
 }
push $N211e4a80
 Dot {
  name Dot7
  xpos 845
  ypos -231
 }
 ColorCorrect {
  gain 0
  offset {{screen_color.r i} {screen_color.g i} {screen_color.b i} {1 i}}
  name ColorCorrect1
  xpos 817
  ypos -159
  postage_stamp true
 }
 Merge2 {
  inputs 2
  operation minus
  name Merge6
  xpos 692
  ypos -24
 }
 Dot {
  name Dot6
  xpos 688
  ypos 165
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge7
  xpos 309
  ypos 166
 }
 Merge2 {
  inputs 2
  operation minus
  name Merge8
  xpos 309
  ypos 215
 }
 Keymix {
  inputs 3
  invertMask true
  bbox B
  name Keymix1
  selected true
  xpos 309
  ypos 299
  disable {{"\[exists parent.input2] ? 0 : 1" i x1 0}}
 }
 Output {
  name Output1
  xpos 309
  ypos 348
 }
end_group
Dot {
 name Dot424
 selected true
 xpos -5235
 ypos 8251
}
set N21345360 [stack 0]
Dot {
 name Dot425
 selected true
 xpos -4427
 ypos 8251
}
set N21349830 [stack 0]
Dot {
 name Dot426
 selected true
 xpos -4216
 ypos 8251
}
Primatte3 {
 data { 5
    0 38442 11211
    65552
    0 5
    30234 30234 30234 0
    1 1317.57 1 1 1482.08 1 1 1 1 2469.03 1 1 1 1 1 1847 1 802.977 1 1 1 1 1 1 4370.65 1 1 1 1 1 1 1 1 1 1 756.562 1 9825.83 1 1 328.756 727.593 1 1 1 1 1 1 1 1 1 1 1 1 1 420.693 1 1 1 1 1 1 1 1 1 1
    130560 130560 130560 130560 41065.8 130560 130560 130560 130560 130560 130560 130560 130560 47611.3 25970.3 130560 130560 68203.5 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 46930.4 52473.1 28611.1 130560 37424.4 130560 130560 130560 37387.3 130560 130560 130560 130560 130560 130560 130560 130560 130560 82082.6 130560 130560 51531.3 35266.1 130560 130560 130560 130560 130560 130560 130560 80977.4 34894.2 29309.8
    130560 130560 130560 130560 41065.8 130560 130560 130560 130560 130560 130560 130560 130560 47611.3 30911.5 130560 130560 68203.5 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 47278.4 52473.1 35646.2 130560 37424.4 130560 130560 130560 37387.3 130560 130560 130560 130560 130560 130560 130560 130560 130560 82082.6 130560 130560 51531.3 38728.5 130560 130560 130560 130560 130560 130560 130560 80977.4 34894.2 32904.9
    -1.45626e+06 -2.00653e+13 -2.00653e+13 9.97954e+06 2.13577e+13 2.13577e+13
    -1.10175e+09 -4.39713e+12 -5.47833e+12 7.55014e+09 4.68035e+12 5.83119e+12
    -131.5 -2.22551e+14 -2.22551e+14 4.66388e+06 -6.24267e+13 -6.24267e+13
    -131.5 -2.22551e+14 -2.22551e+14 4.66388e+06 -6.24267e+13 -6.24267e+13
    -107835 -2.00454e+13 -2.00454e+13 -10187.3 1.61739e+13 1.61739e+13
    -8.15837e+07 -4.39277e+12 -5.4729e+12 -7.70752e+06 3.54438e+12 4.4159e+12
    -575864 -2.22551e+14 -2.22551e+14 -6.77294e+06 -6.8629e+13 -6.8629e+13
    -575864 -2.22551e+14 -2.22551e+14 -6.77294e+06 -6.8629e+13 -6.8629e+13
    -0.1828 -4.06321e+14 -4.06321e+14 4115.83 7.02515e+13 7.02515e+13
    -337.5 -4.06321e+14 -4.06321e+14 -1.45057e+07 9.51209e+13 9.51209e+13
    -0.182373 -4.06321e+14 -4.06321e+14 -1997.7 -3.41305e+13 -3.41305e+13
    -0.182312 -4.06321e+14 -4.06321e+14 -3465.87 -5.89999e+13 -5.89999e+13
    -48196.5 -2.12259e+14 -2.12259e+14 -6.13901e+06 1.50824e+14 1.50824e+14
    -0.182678 -7.29232e+12 -9.74444e+12 3465.87 1.23082e+13 1.20778e+13
    -0.182434 -4.06321e+14 -4.06321e+14 -4115.83 -7.02516e+13 -7.02516e+13
    -450.5 -4.06321e+14 -4.06321e+14 1.93954e+07 -9.51209e+13 -9.51209e+13
    -337.5 -4.06321e+14 -4.06321e+14 -1.45057e+07 9.51209e+13 9.51209e+13
    -0.182312 -1.28211e+13 -1.52604e+13 4115.83 2.39951e+13 2.16453e+13
    -0.182312 -4.06321e+14 -4.06321e+14 -3465.87 -5.89999e+13 -5.89999e+13
    -0.182373 -4.06321e+14 -4.06321e+14 -1997.7 -3.41305e+13 -3.41305e+13
    -0.182434 -4.06321e+14 -4.06321e+14 3465.87 5.89999e+13 5.89999e+13
    -48197 -1.3165e+14 -1.3165e+14 -6.13901e+06 9.35458e+13 9.35458e+13
    -450.5 -4.06321e+14 -4.06321e+14 1.93954e+07 -9.51209e+13 -9.51209e+13
    -0.182434 -2.55453e+14 -2.55453e+14 -4115.83 -7.58997e+13 -7.58997e+13
    -0.236816 -5.24559e+14 -5.24559e+14 4850.44 8.25363e+13 8.25363e+13
    -0.236816 -2.0704e+14 -2.0704e+14 4850.44 1.13685e+14 1.13685e+14
    -0.236816 -5.24559e+14 -5.24559e+14 -1095.98 -1.88357e+13 -1.88357e+13
    -0.236816 -5.24559e+14 -5.24559e+14 -1095.98 -1.88357e+13 -1.88357e+13
    -0.236816 -5.24559e+14 -5.24559e+14 1095.98 1.88357e+13 1.88357e+13
    -0.236816 -2.66349e+13 -2.99019e+13 1095.98 1.61775e+13 1.13834e+13
    -0.236816 -5.24559e+14 -5.24559e+14 -4850.44 -8.25363e+13 -8.25363e+13
    -0.236816 -1.20264e+14 -1.20264e+14 -4850.44 8.10806e+13 8.10806e+13
    -0.182526 -4.06321e+14 -4.06321e+14 6465.88 1.10192e+14 1.10192e+14
    -1.39393e+09 -3.14602e+13 -3.4549e+13 3.54175e+09 3.53749e+13 3.8848e+13
    -0.182739 -4.06321e+14 -4.06321e+14 -5021.96 -8.57195e+13 -8.57195e+13
    -0.183075 -4.06321e+14 -4.06321e+14 -5801.58 -9.89407e+13 -9.89407e+13
    -106667 -6.07827e+13 -6.07827e+13 4.7394e+06 8.2216e+13 8.2216e+13
    -138.25 -4.73374e+12 -7.01982e+12 -6.4381e+06 5.75415e+12 5.56342e+12
    -0.183136 -4.06321e+14 -4.06321e+14 -6465.88 -1.10192e+14 -1.10192e+14
    -1.97021e+06 -4.06321e+14 -4.06321e+14 -1.66954e+07 -1.23414e+14 -1.23414e+14
    -0.100113 -2.22551e+14 -2.22551e+14 806.213 1.37349e+13 1.37349e+13
    -0.100098 -2.22551e+14 -2.22551e+14 1750.92 2.97439e+13 2.97439e+13
    -0.10022 -2.22551e+14 -2.22551e+14 492.543 8.47645e+12 8.47645e+12
    -0.100174 -2.22551e+14 -2.22551e+14 -442.148 -7.53257e+12 -7.53257e+12
    -32.875 -2.22551e+14 -2.22551e+14 -4.14783e+06 -8.47646e+12 -8.47646e+12
    -0.100082 -3.21515e+13 -3.23899e+13 442.148 3.00797e+13 3.04829e+13
    -0.100143 -2.22551e+14 -2.22551e+14 -806.213 -1.37349e+13 -1.37349e+13
    -0.100098 -2.22551e+14 -2.22551e+14 -1750.92 -2.97439e+13 -2.97439e+13
    -0.183228 -4.06321e+14 -4.06321e+14 2925.08 4.9786e+13 4.9786e+13
    -0.183472 -1.60373e+14 -1.60373e+14 2243.31 1.92437e+14 1.92437e+14
    -0.18335 -4.06321e+14 -4.06321e+14 -21.649 -4.43709e+11 -4.43709e+11
    -0.183228 -4.06321e+14 -4.06321e+14 669.647 1.12044e+13 1.12044e+13
    -0.18335 -4.06321e+14 -4.06321e+14 21.649 4.43709e+11 4.43709e+11
    -0.18335 -9.19017e+13 -9.19017e+13 -669.647 1.44367e+13 1.44367e+13
    -0.183228 -4.06321e+14 -4.06321e+14 -2925.08 -4.9786e+13 -4.9786e+13
    -0.183472 -3.34853e+13 -3.37336e+13 -2243.31 1.99945e+13 1.97274e+13
    -434.252 -5.24559e+14 -5.24559e+14 8265.64 1.41063e+14 1.41063e+14
    -98.8125 -1.11242e+13 -1.45407e+13 -2.95141e+06 1.34394e+13 1.50209e+13
    -0.234802 -5.24559e+14 -5.24559e+14 -5545.74 -9.44314e+13 -9.44314e+13
    -0.234863 -5.24559e+14 -5.24559e+14 -4546.94 -7.73629e+13 -7.73629e+13
    -0.234924 -5.24559e+14 -5.24559e+14 5545.74 9.44314e+13 9.44314e+13
    -188.79 -4.54242e+13 -4.54242e+13 4546.94 5.78751e+13 5.78751e+13
    -580.429 -5.24559e+14 -5.24559e+14 -8264.58 -1.41063e+14 -1.41063e+14
    -0.234924 -3.29788e+14 -3.29788e+14 -7266.84 -2.82018e+13 -2.82018e+13
    -3.31341e+06 -1.1647e+14 -1.1647e+14 8.41884e+06 1.30963e+14 1.30963e+14
    -58176 -4.78419e+12 -7.79118e+12 -2.03313e+09 4.45709e+12 6.08584e+12
    -0.183075 -4.06321e+14 -4.06321e+14 -5801.58 -9.89407e+13 -9.89407e+13
    -0.182739 -4.06321e+14 -4.06321e+14 -5021.96 -8.57195e+13 -8.57195e+13
    -0.182648 -4.06322e+14 -4.06322e+14 5801.58 9.89408e+13 9.89408e+13
    -106667 -1.62451e+13 -1.62451e+13 4.7394e+06 2.19735e+13 2.19735e+13
    -1.97021e+06 -4.06321e+14 -4.06321e+14 -1.66954e+07 -1.23414e+14 -1.23414e+14
    -0.183136 -4.06321e+14 -4.06321e+14 -6465.88 -1.10192e+14 -1.10192e+14
    -0.183228 -4.06321e+14 -4.06321e+14 2243.31 3.81378e+13 3.81378e+13
    -0.183105 -4.06321e+14 -4.06321e+14 2925.08 4.9786e+13 4.9786e+13
    -0.183228 -4.06321e+14 -4.06321e+14 669.647 1.12044e+13 1.12044e+13
    -0.18335 -4.06321e+14 -4.06321e+14 -21.649 -4.43709e+11 -4.43709e+11
    -0.18335 -4.06321e+14 -4.06321e+14 -669.647 -1.12044e+13 -1.12044e+13
    -0.18335 -1.19568e+13 -1.3523e+13 21.6488 1.46449e+13 1.19078e+13
    -0.183472 -4.06321e+14 -4.06321e+14 -2243.31 -3.81378e+13 -3.81378e+13
    -0.183228 -1.48173e+14 -1.48173e+14 -2925.08 5.12654e+13 5.12654e+13
    -0.100098 -2.22551e+14 -2.22551e+14 1750.92 2.97439e+13 2.97439e+13
    -0.100113 -8.94452e+13 -8.94452e+13 806.213 1.29455e+14 1.29455e+14
    -0.100174 -2.22551e+14 -2.22551e+14 -442.148 -7.53257e+12 -7.53257e+12
    -0.10022 -2.22551e+14 -2.22551e+14 492.543 8.47645e+12 8.47645e+12
    -0.100082 -2.22551e+14 -2.22551e+14 442.148 7.53257e+12 7.53257e+12
    -32.875 -2.22551e+14 -2.22551e+14 -4.14783e+06 -8.47646e+12 -8.47646e+12
    -0.100098 -2.22551e+14 -2.22551e+14 -1750.92 -2.97439e+13 -2.97439e+13
    -0.100143 -7.99971e+13 -8.05903e+13 -806.213 -4.36463e+13 -4.35218e+13
    -0.234802 -5.24559e+14 -5.24559e+14 7266.84 1.23995e+14 1.23995e+14
    -183040 -1.41691e+14 -1.55602e+14 -6.09009e+09 1.35905e+14 1.36093e+14
    -0.234863 -5.24559e+14 -5.24559e+14 -4546.94 -7.73629e+13 -7.73629e+13
    -0.235291 -5.24559e+14 -5.24559e+14 -5545.74 -9.44314e+13 -9.44314e+13
    -188.79 -2.74025e+14 -2.74025e+14 4546.94 7.73629e+13 7.73629e+13
    -0.234924 -6.26047e+12 -8.36561e+12 5545.74 5.28001e+12 6.32761e+12
    -0.235413 -5.24559e+14 -5.24559e+14 -7266.84 -1.23995e+14 -1.23995e+14
    -580.5 -5.24559e+14 -5.24559e+14 -8265.64 -1.41063e+14 -1.41063e+14
    -1604 -1.04174e+14 -1.04174e+14 1.38143e+06 1.09951e+14 1.09951e+14
    -5.10695e+08 -6.16639e+12 -8.4369e+12 1.03163e+09 6.77235e+12 9.1077e+12
    -0.1633 -3.63425e+14 -3.63425e+14 -5610.71 -9.56761e+13 -9.56761e+13
    -0.1633 -3.63425e+14 -3.63425e+14 -5610.71 -9.56761e+13 -9.56761e+13
    -118.938 -1.04071e+14 -1.04071e+14 1.52952e+06 7.01628e+13 7.01628e+13
    -89856 -6.09532e+12 -7.59408e+12 -3.95807e+09 7.93904e+12 6.9063e+12
    -714 -3.63425e+14 -3.63425e+14 -618037 -1.11653e+14 -1.11653e+14
    -713.5 -3.63425e+14 -3.63425e+14 -618038 -1.11653e+14 -1.11653e+14
    -0.163818 -3.63425e+14 -3.63425e+14 2076.72 3.53797e+13 3.53797e+13
    -0.163574 -3.63425e+14 -3.63425e+14 3383.17 5.76235e+13 5.76235e+13
    -0.163818 -3.63425e+14 -3.63425e+14 177.862 2.84069e+12 2.84069e+12
    -0.163788 -3.63425e+14 -3.63425e+14 -1138.93 -1.94031e+13 -1.94031e+13
    -53.8125 -3.63425e+14 -3.63425e+14 -1.20703e+06 -2.84068e+12 -2.84068e+12
    -0.163818 -1.17866e+13 -1.33304e+13 1138.93 7.79243e+12 6.53637e+12
    -0.163727 -3.63425e+14 -3.63425e+14 -2076.72 -3.53797e+13 -3.53797e+13
    -0.163818 -3.63425e+14 -3.63425e+14 -3383.17 -5.76235e+13 -5.76235e+13
    -0.163574 -3.63425e+14 -3.63425e+14 3383.17 5.76235e+13 5.76235e+13
    -0.163818 -5.76504e+13 -5.76504e+13 2076.72 6.9882e+13 6.9882e+13
    -0.163818 -3.63425e+14 -3.63425e+14 -1138.93 -1.94031e+13 -1.94031e+13
    -0.163696 -3.63425e+14 -3.63425e+14 177.862 2.84069e+12 2.84069e+12
    -0.163818 -3.63425e+14 -3.63425e+14 1138.93 1.94031e+13 1.94031e+13
    -53.8125 -2.25408e+14 -2.25408e+14 -1.20703e+06 8.01519e+13 8.01519e+13
    -0.163818 -3.63425e+14 -3.63425e+14 -3383.17 -5.76235e+13 -5.76235e+13
    -0.163818 -8.21296e+13 -8.27386e+13 -2076.72 5.0383e+13 4.96885e+13
    -0.270996 -6.05708e+14 -6.05708e+14 8265.64 1.41063e+14 1.41063e+14
    -114.25 -6.45761e+13 -7.09161e+13 -3.80098e+06 7.71865e+13 7.33026e+13
    -0.271973 -6.05708e+14 -6.05708e+14 -4546.94 -7.73629e+13 -7.73629e+13
    -0.271973 -6.05708e+14 -6.05708e+14 -4546.94 -7.73629e+13 -7.73629e+13
    -0.271484 -6.05708e+14 -6.05708e+14 4546.94 7.73629e+13 7.73629e+13
    -0.271484 -2.25405e+13 -2.53053e+13 4546.94 2.49446e+13 2.95773e+13
    -0.271973 -6.05708e+14 -6.05708e+14 -8265.64 -1.41063e+14 -1.41063e+14
    -0.271973 -3.80807e+14 -3.80807e+14 -8265.64 -3.63087e+13 -3.63087e+13
    -1 -1 -1 -1
    -1 -1 999999 999999
    -1 -1 -1 -1
    0.05 0.419884 0.479884
    0.05 0.417799 0.417799
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
  }

 primEdgedata { 5
    0 38442 11211
    65552
    0 5
    30234 30234 30234 0
    1 1317.57 1 1 1482.08 1 1 1 1 2469.03 1 1 1 1 1 1847 1 802.977 1 1 1 1 1 1 4370.65 1 1 1 1 1 1 1 1 1 1 756.562 1 9825.83 1 1 328.756 727.593 1 1 1 1 1 1 1 1 1 1 1 1 1 420.693 1 1 1 1 1 1 1 1 1 1
    130560 130560 130560 130560 41065.8 130560 130560 130560 130560 130560 130560 130560 130560 47611.3 25970.3 130560 130560 68203.5 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 46930.4 52473.1 28611.1 130560 37424.4 130560 130560 130560 37387.3 130560 130560 130560 130560 130560 130560 130560 130560 130560 82082.6 130560 130560 51531.3 35266.1 130560 130560 130560 130560 130560 130560 130560 80977.4 34894.2 29309.8
    130560 130560 130560 130560 41065.8 130560 130560 130560 130560 130560 130560 130560 130560 47611.3 30911.5 130560 130560 68203.5 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 47278.4 52473.1 35646.2 130560 37424.4 130560 130560 130560 37387.3 130560 130560 130560 130560 130560 130560 130560 130560 130560 82082.6 130560 130560 51531.3 38728.5 130560 130560 130560 130560 130560 130560 130560 80977.4 34894.2 32904.9
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    -1 -1 -1 -1
    -1 -1 999999 999999
    -1 -1 -1 -1
    0.05 0.419884 0.479884
    0.05 0.417799 0.417799
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
  }

 primBodydata { 5
    0 38442 11211
    65552
    0 5
    30234 30234 30234 0
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
    130560 130560 130560 130560 41065.8 130560 130560 130560 130560 130560 130560 130560 130560 47611.3 25970.3 130560 130560 68203.5 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 46930.4 52473.1 28611.1 130560 37424.4 130560 130560 130560 37387.3 130560 130560 130560 130560 130560 130560 130560 130560 130560 82082.6 130560 130560 51531.3 35266.1 130560 130560 130560 130560 130560 130560 130560 80977.4 34894.2 29309.8
    130560 130560 130560 130560 41065.8 130560 130560 130560 130560 130560 130560 130560 130560 47611.3 30911.5 130560 130560 68203.5 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 130560 47278.4 52473.1 35646.2 130560 37424.4 130560 130560 130560 37387.3 130560 130560 130560 130560 130560 130560 130560 130560 130560 82082.6 130560 130560 51531.3 38728.5 130560 130560 130560 130560 130560 130560 130560 80977.4 34894.2 32904.9
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 0
    -1 -1 -1 -1
    -1 -1 999999 999999
    -1 -1 -1 -1
    0.05 0.419884 0.479884
    0.05 0.417799 0.417799
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
    0.05 0.426616 0.426616
  }

 crop {0 0 5960 3160}
 "Adjust Lighting" 0
 "Hybrid Matte" 0
 "Fine Tuning" 0
 name Primatte3
 selected true
 xpos -4250
 ypos 8569
}
Dot {
 name Dot427
 selected true
 xpos -4216
 ypos 8641
}
push $N21349830
OFXuk.co.thefoundry.keylight.keylight_v201 {
 show "Final Result"
 unPreMultiply false
 screenColour {{parent.PxF_ScreenClean.screen_color x1250 0.0006761939148} {parent.PxF_ScreenClean.screen_color x1250 0.303132534} {parent.PxF_ScreenClean.screen_color x1250 0.02479609847}}
 screenGain 1.19
 screenBalance 0.5
 alphaBias {0.5 0.5 0.5}
 despillBias {0.5 0.5 0.5}
 gangBiases true
 preBlur 0
 "Screen Matte" 0
 screenClipMin 0
 screenClipMax 1
 screenClipRollback 0
 screenGrowShrink 0
 screenSoftness 0
 screenDespotBlack 0
 screenDespotWhite 0
 screenReplaceMethod "Soft Colour"
 screenReplaceColour {0.5 0.5 0.5}
 Tuning 0
 midPoint 0.5
 lowGain 1
 midGain 1
 highGain 1
 "Inside Mask" 0
 sourceAlphaHandling Ignore
 insideReplaceMethod "Soft Colour"
 insideReplaceColour {0.5 0.5 0.5}
 Crops 0
 SourceXMethod Colour
 SourceYMethod Colour
 SourceEdgeColour 0
 SourceCropL 0
 SourceCropR 1
 SourceCropB 0
 SourceCropT 1
 balanceSet false
 insideComponent None
 outsideComponent None
 cacheBreaker true
 name Keylight1
 selected true
 xpos -4461
 ypos 8573
}
ChannelMerge {
 inputs 2
 name ChannelMerge1
 selected true
 xpos -4461
 ypos 8624
}
Shuffle {
 red alpha
 green alpha
 blue alpha
 name Shuffle20
 selected true
 xpos -4461
 ypos 8682
}
Dot {
 name Dot428
 selected true
 xpos -4427
 ypos 9278
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097152}
    {t x45400000 x44c58000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup Bezier1 512 bezier
     {{cc
       {f 8192}
       {px x449c4000
        {0 xc0000000}
        {x44b9a000 x44648000}
        {0 x40000000}
        {x42240000 x40c00000}
        {x44ae8000 x4481e000}
        {xc2240000 xc0c00000}
        {x42cc0000 x42000000}
        {x44882000 x4457c000}
        {xc2cc0000 xc2000000}
        {x42bc0000 x42500000}
        {x444f0000 x44504000}
        {xc2bc0000 xc2500000}
        {x41880000 x41300000}
        {x441c8000 x442b0000}
        {xc1880000 xc1300000}
        {x42440000 x41880000}
        {x43dc8000 x44150000}
        {xc2440000 xc1880000}
        {0 0}
        {x434e0000 x440ac000}
        {0 0}
        {0 0}
        {x42820000 x43ee0000}
        {0 0}
        {x41200000 x42440000}
        {xc1b00000 x43820000}
        {xc1200000 xc2440000}
        {xc1f00000 x420c0000}
        {x40000000 xc1700000}
        {x41f00000 xc20c0000}
        {0 0}
        {x44a04000 xc2780000}
        {0 0}
        {xc1100000 xc1e80000}
        {x44d98000 xc2480000}
        {x41100000 x41e80000}}}     idem}
     {tx x449c4000 x443e6000 x43fde000}
     {a osw x41200000 osf 0 str 1 spx x45400000 spy x44c58000 sb 1 ltn x449c4000 ltm x449c4000 tt x40800000}}}}}}
 toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {3072 1580}
 colorOverlay {0 0 0 0}
 lifetime_type "all frames"
 lifetime_start 1250
 lifetime_end 1250
 motionblur_shutter_offset_type centred
 source_black_outside true
 name Roto11
 selected true
 xpos -3135
 ypos 6450
}
Blur {
 size 36
 name Blur7
 selected true
 xpos -3135
 ypos 6546
}
set N2143eb40 [stack 0]
push $N2143eb40
ColorCorrect {
 inputs 0
 shadows.gain 1.06
 midtones.gamma 0.84
 name ColorCorrect10
 selected true
 xpos -3257
 ypos 6310
}
HueCorrect {
 hue {sat {curve 1 x1.035675764 0.6552239656 x2.035675764 0.8248757124 x3 1 x4 1 1 1}
   lum {}
   red {}
   green {}
   blue {}
   r_sup {}
   g_sup {}
   b_sup {}
   sat_thrsh {}}
 name HueCorrect3
 selected true
 xpos -3257
 ypos 6336
}
Group {
 name LUE4NUKE2
 tile_color 0x2cffffff
 selected true
 xpos -3257
 ypos 6391
 addUserKnob {20 Primaries}
 addUserKnob {26 Credits l "" +STARTLINE T "<img src=C:/Users/jorgem/.nuke/LUE/lue.png>"}
 addUserKnob {22 Init_logo l INVISIBLE +INVISIBLE T "DotNuke = nukescripts.getNukeUserFolder() \nif os.path.isfile(DotNuke+\"/LUE/lue.png\"):\n\tnuke.thisNode().knob(\"Credits\").setValue(\"<img src=\"+DotNuke+\"/LUE/lue.png>\")" +STARTLINE}
 addUserKnob {52 Init_Init_logo T "nuke.thisNode().knob(\"Init_logo\").execute()" +STARTLINE}
 addUserKnob {22 CurveKnobSetup l INVISIBLE +INVISIBLE T "#Initialize Curve Knobs\n#Need to clean up old code!!!\n\nthisNode = nuke.thisNode()\n\ntry:\n\tthisNode.knob(\"lut\").delCurve(\"sat_thrsh\")\n\tthisNode.knob(\"lut\").delCurve(\"amount\")\n\tthisNode.knob(\"lut\").addCurve(\"HueVsHue\")\n\tthisNode.knob(\"lut\").addCurve(\"HueVsSat\")\n\tthisNode.knob(\"lut\").addCurve(\"HueVsLum\")\n\tthisNode.knob(\"lut\").addCurve(\"SatVsSat\")\n\tthisNode.knob(\"lut\").addCurve(\"SatVsLum\")\n\tthisNode.knob(\"lut\").addCurve(\"BlackAndWhite\")\n\n\tdef RunNode():\n\t\tif nuke.thisKnob().Class() == \"LookupCurves_Knob\":\n\t\t\tthisNode = nuke.thisNode().fullName().split(\".\")\[-2]\n\t\t\twith nuke.Root():\n\t\t\t\tinputNode = nuke.toNode(thisNode)\n\t\t\t\tcurve = inputNode.knob(\"lut\").toScript()\n\t\t\twith inputNode:\n\t\t\t\tmyCurve = curve.splitlines()\[0]\n\t\t\t\tnuke.toNode(inputNode.name()+\".HueVsHue\").knob(\"lut\").editCurve(\"amount\",myCurve)\n\t\t\t\tmyCurve = curve.splitlines()\[1]\n\t\t\t\tnuke.toNode(inputNode.name()+\".HueVsSat\").knob(\"lut\").editCurve(\"amount\",myCurve)\n\t\t\t\tmyCurve = curve.splitlines()\[2]\n\t\t\t\tnuke.toNode(inputNode.name()+\".HueVsLum\").knob(\"lut\").editCurve(\"amount\",myCurve)\n\t\t\t\tmyCurve = curve.splitlines()\[3]\n\t\t\t\tnuke.toNode(inputNode.name()+\".SatVsSat\").knob(\"lut\").editCurve(\"master\",myCurve)\n\t\t\t\tmyCurve = curve.splitlines()\[4]\n\t\t\t\tnuke.toNode(inputNode.name()+\".SatVsLum\").knob(\"lut\").editCurve(\"master\",myCurve)            \n\t\t\t\tmyCurve = curve.splitlines()\[5]\n\t\t\t\tnuke.toNode(inputNode.name()+\".BlackAndWhite\").knob(\"lut\").editCurve(\"amount\",myCurve) \n\t\t\t\tnuke.toNode(\"HueKeyer2\").knob('knobChanged').setValue(\"RunNode()\")\n\t\t\t#help(nuke.toNode(\"HueKeyer1\").knob('knobChanged').setValue)\nexcept:\n    pass\n\n\n#Hue VS Hue\nwith thisNode:\n    curve = nuke.toNode(\"HueVsHue\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"HueVsHue\",myCurve\[8:-1])\n\n#Hue Vs Sat\nwith thisNode:\n    curve = nuke.toNode(\"HueVsSat\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"HueVsSat\",myCurve\[8:-1])\n\n#Hue Vs Lum\nwith thisNode:\n    curve = nuke.toNode(\"HueVsLum\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"HueVsLum\",myCurve\[8:-1])\n\n#Sat Vs Sat\nwith thisNode:\n    curve = nuke.toNode(\"SatVsSat\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"SatVsSat\",myCurve\[8:-1])\n\n#Sat Vs Lum\nwith thisNode:\n    curve = nuke.toNode(\"SatVsLum\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"SatVsLum\",myCurve\[8:-1])\n\n\n#Hue Vs Lum\nwith thisNode:\n    curve = nuke.toNode(\"BlackAndWhite\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"BlackAndWhite\",myCurve\[13:-1])\n\n\n\n#curve = nuke.toNode(\"HueKeyer1\").knob(\"lut\").toScript()\n#myCurve = curve.splitlines()\[2]\n#print myCurve\n#nuke.toNode(\"HueKeyer2\").knob(\"lut\").editCurve(\"amount\",myCurve)\n\n\n\n\ndef RunNode():\n\tif nuke.thisKnob().Class() == \"LookupCurves_Knob\":\n\t\tthisNode = nuke.thisNode().fullName().split(\".\")\[-2]\n\t\twith nuke.Root():\n\t\t\tinputNode = nuke.toNode(thisNode)\n\t\t\tcurve = inputNode.knob(\"lut\").toScript()\n\t\twith inputNode:\n\t\t\tmyCurve = curve.splitlines()\[0]\n\t\t\tnuke.toNode(inputNode.name()+\".HueVsHue\").knob(\"lut\").editCurve(\"amount\",myCurve.replace(\"amount\",\"curve\")\[10:-1])\n\t\t\tmyCurve = curve.splitlines()\[1]\n\t\t\tnuke.toNode(inputNode.name()+\".HueVsSat\").knob(\"lut\").editCurve(\"amount\",myCurve.replace(\"amount\",\"curve\")\[10:-1])\n\t\t\tmyCurve = curve.splitlines()\[2]\n\t\t\tnuke.toNode(inputNode.name()+\".HueVsLum\").knob(\"lut\").editCurve(\"amount\",myCurve.replace(\"amount\",\"curve\")\[10:-1])\n\t\t\tmyCurve = curve.splitlines()\[3]\n\t\t\tnuke.toNode(inputNode.name()+\".SatVsSat\").knob(\"lut\").editCurve(\"master\",myCurve.replace(\"master\",\"curve\")\[10:-1])\n\t\t\tmyCurve = curve.splitlines()\[4]\n\t\t\tnuke.toNode(inputNode.name()+\".SatVsLum\").knob(\"lut\").editCurve(\"master\",myCurve.replace(\"master\",\"curve\")\[10:-1])    \n\t\t\tmyCurve = curve.splitlines()\[5]\n\t\t\tnuke.toNode(inputNode.name()+\".BlackAndWhite\").knob(\"lut\").editCurve(\"amount\",myCurve.replace(\"amount\",\"curve\")\[15:-1])          \n\t\t\tnuke.toNode(\"HueKeyer2\").knob('knobChanged').setValue(\"RunNode()\")" +STARTLINE}
 addUserKnob {52 Init_CurveKnobSetup l "" +STARTLINE T "nuke.thisNode().knob(\"CurveKnobSetup\").execute()" +STARTLINE}
 addUserKnob {52 SMH_init T "nuke.toNode(nuke.thisNode().name()+\".BaseColorCorrect\").knob(\"RunThis\").execute()" +STARTLINE}
 addUserKnob {52 init_init_colorwheel l "" +STARTLINE T "nuke.thisNode().knob(\"init_colorwheel\").execute()" +STARTLINE}
 addUserKnob {22 init_colorwheel l INVISIBLE +INVISIBLE T "import sys, math\nimport nuke\nimport PySide.QtGui as QtGui\nimport PySide.QtCore as QtCore\nfrom PySide.QtGui import *\nfrom PySide.QtCore import *\nfrom PySide.QtWebKit import *\nfrom nukescripts import panels\nimport datetime\n#Projekt Variabler\n\n#FasteVariabler\ntry:\n\tif defined == 1:\n\t    pass\n\t    #print \"allready launched\"\nexcept: \n\tclass ColorWheelWidget(QtGui.QWidget):\n\t    def __init__(self, parent=None, mainDiameter=138, outerRingWidth=10,my_Knob=\"None\"):\n\t        QtGui.QWidget.__init__(self, parent)\n\t        # this is the pixel diameter of the actual color wheel, without the extra decorations drawn as part of this widget\n\t        self.dim = mainDiameter\n\t        self.offset = outerRingWidth\n\t        self.ColorKnob = my_Knob\n\t        self.colorWheelSensitivity = 0.1\n\t        self.setstate = 0\n\t        self.bMouseDown = False\n\t        self.shiftDown = False\n\t        self.ctrlDown = False\n\t        self.altDown = False\n\t        self.guiSelection = 0\n\t        self.middleMouse = 0\n\t        self.initialPoint = (0,0)    \n\t        self.master_radius = (self.dim/2)+self.offset+1\n\t        self.huepoint = (self.master_radius, self.master_radius)\n\t        self.value_angle = 360\n\t        self.value_angleSat = 0\t   \n\t        color = QtGui.QColor(0,0,0,0).rgba()\n\t        self.myTimer = QtCore.QTime()\n\t \n\t        self.center = (self.master_radius, self.master_radius)\n\t        # this is the color value that this widget represents\n\t        self.color = QtGui.QColor()\n\n\n\n\t        # the color wheel image, only needs to be generated once\n\t        self.image = QtGui.QImage(self.master_radius*2, self.master_radius*2, QtGui.QImage.Format_ARGB32)\n\t        # this is the image for the current color selection\n\t        self.current_image = QtGui.QImage(self.master_radius*2, self.master_radius*2, QtGui.QImage.Format_ARGB32)\n\t        self.current_image.fill(QtGui.QColor(self.color).rgba())\n\t        self.current_imageB = QtGui.QImage(self.master_radius*2, self.master_radius*2, QtGui.QImage.Format_ARGB32)\n\t        self.current_imageB.fill(QtGui.QColor(self.color).rgba())       \n\t        # these are used for the current color selection image\n\t        self.lastPoint = (self.master_radius, self.master_radius)\n\t        self.currentPoint = (self.master_radius, self.master_radius)\n\t        self.points = self.getRadialLinePoints((self.dim / 2), self.master_radius, 45)\n\t        self.points2 = self.getRadialLinePoints((self.dim / 2), self.master_radius, 135)\t        \n\t        self.image.fill(color)\n\n\n\t        self.color.setRgbF(min(1,max(0,my_Knob.value()\[0])),min(1,max(0,my_Knob.value()\[1])),min(1,max(0,my_Knob.value()\[2])))\n\n\n\t        self.luma = (my_Knob.value()\[3]/2.0)*255.0\n\t        self.hue = self.color.hueF()*255.0\n\t        self.sat = self.color.saturationF()*255.0\n\t   \n\n\t        self.setUIColor(self.hue,self.sat,self.luma) \n\n\t        for y in range(int(self.master_radius*2)):\n\t            for x in range(int(self.master_radius*2)):\n\t                d = 2 * self.getDist((x,y),self.center) / self.dim\n\t                if d <= 1: #Hue Wheel\n\t                    color = QtGui.QColor()\n\t                    hue = self.getHue(x, y)\n\t                    percent = max(0,min(1,(d - 0.90)*30))\n\t                    color.setHsv(hue,(d*255),90+(165*percent),90+(165*percent)) #The dark part in the center\n\n\t                    self.image.setPixel(x,y, color.rgba())\n\t                else:\n\t                    d2 = self.getDist((x,y),self.center) / (self.master_radius-1)\n\t                    if d2 > 1: #MainBG                       \n\t                        color = QtGui.QColor()\n\t                        color.setAlpha(0)\n\t                        self.image.setPixel(x,y, color.rgba())\n\t                    else:\n\t                    \tpass\n\n\t        self.setUIColor(self.hue,self.sat,self.luma) \n\t        self.setColor(self.hue, self.sat, self.luma)\n\n\n\t    def getRadialLinePoints(self, r_inner, r_outer, angle,distance=1.0):\n\t        rad = math.radians(angle)\n\t        sr = math.sin(rad)\n\t        cr = math.cos(rad)\n\t        x1 = r_outer - (r_outer * (sr*distance))\n\t        y1 = r_outer - (r_outer * (cr*distance)) \n\t        x2 = r_outer - (r_inner * (sr*distance))\n\t        y2 = r_outer - (r_inner * (cr*distance))\n\t        return (x1, y1, x2, y2)\n\t  \n\t    def getRot(self, x, y):\n\t        return ( math.degrees ( math.atan2 ( 2*(x - self.master_radius),2*(y - self.master_radius)))) % 360\n\t    def getLum(self, x, y):\n\t        return ( math.degrees ( math.atan2 ( 2.0*(x - self.master_radius),2.0*(y - self.master_radius)))) % 360\n\n\t    def getHue(self, x, y):\n\t        return ( math.degrees ( math.atan2 ( 2*(x - self.master_radius),2*(y - self.master_radius))) + 165 ) % 360\n\t    \n\t    def setColor(self, h, s, v):\n\n\t        self.color.setHsvF(0.0,0.0,min(1,v/255.0))\n\t        alpha = self.current_image.alphaChannel()\n\t        self.current_image.fill(self.color.rgb())\n\t        self.current_image.setAlphaChannel(alpha)\n\t        self.color.setHsvF(min(1,h/255.0),1.0,min(1,v/255.0)) #Should be 255 and not 254.5 but it causes a unknown error!\n\t        alpha = self.current_imageB.alphaChannel()\n\t        self.current_imageB.fill(self.color.rgb())\n\t        self.current_imageB.setAlphaChannel(alpha)\n\t        self.update()      \n\n\t    def reset(self,x):\n\t        self.middleMouse = 1\n\t        self.bMouseDown = True\n\t        self.guiSelection = 0\n\t        self.initialPoint = (self.center\[0], self.center\[1])\n\t        self.lastPoint = (self.center\[0], self.center\[1]) \n\t        self.alterColor(self.lastPoint\[0], self.lastPoint\[1])\n\t        self.guiSelection = 1\n\t        self.initialPoint = (self.center\[0], self.center\[1])\n\t        self.lastPoint = (self.center\[0], self.center\[1]) \n\t        self.alterColor(self.lastPoint\[0], self.lastPoint\[1]-10)\n\t        self.lastPoint = self.currentPoint\n\t        self.setColor(self.hue, self.sat, self.luma)\n\t        self.setUIColor(self.hue,self.sat,self.luma)\n\t        self.bMouseDown = False\n\t        if not self.ColorKnob == \"None\":\n\t\t\t\ttry:\n\t\t\t\t\tself.color.setHsvF(min(1,self.hue/255.0),min(1,self.sat/255.0),1.0)\n\t\t\t\t\tself.ColorKnob.setValue(\[float(self.color.redF()),float(self.color.greenF()),float(self.color.blueF()),float(self.luma*2)/255])\n\t\t\t\texcept: \n\t\t\t\t\tprint \"Error trying to send values to color control. Make sure all layouts are set to 4 Colors and not 1\"\n\n\t        \n\t    def getDist(self, (x1, y1), (x2, y2)):\n\t        return math.sqrt((x2-x1)**2 + (y2-y1)**2)\n\t        \n\t    def paintEvent(self, evt):\n\t        painter = QtGui.QPainter(self)\n\t        painter.setRenderHint(QtGui.QPainter.Antialiasing)\n\t        pen = QtGui.QPen()\n\t        if not self.ColorKnob == \"None\":\n\t\t\t\ttry:\n\t\t\t\t\tif self.setstate > 0:\n\t\t\t\t\t\tself.color.setHsvF(min(1,self.hue/255.0),min(1,self.sat/255.0),1.0)\n\t\t\t\t\t\tself.ColorKnob.setValue(\[float(self.color.redF()),float(self.color.greenF()),float(self.color.blueF()),float(self.luma*2)/255])\n\t\t\t\t\tif self.setstate > 1:\n\t\t\t\t\t\tself.setstate = 0\n\n\t\t\t\texcept: \n\t\t\t\t\tprint \"Error trying to send values to color control. Make sure all layouts are set to 4 Colors and not 1\"\n\t        self.color.setHsvF(min(1,self.hue/255.0),min(1,self.sat/255.0),min((self.luma/255.0)*2.0,1.0))\n\t        brush = QtGui.QBrush(QtGui.QColor(self.color.rgb())) #Color of the elipse\n\t        pen.setColor(QtGui.QColor(20,20,20)) #Outline Color\n\t        pen.setWidth(2) #Outline Width\n\t        painter.setPen(pen)\n\t        \n\t        painter.drawImage(0,0,self.image)\n\t        #painter.drawImage(0,0,self.current_image)\n\t        #painter.drawImage(0,0,self.current_imageB)\n\t        r = self.dim/2 \n\t        r2 = r + self.offset\n\t        center = QtCore.QPoint(r2+2,r2+2) \n\t        center = QtCore.QPointF(self.center\[0],self.center\[1] )\n\t        \n\t        painter.drawEllipse(center, r, r ) #DRAW THE OUTER BLACK CIRCLE\n\n\n\t   \n\t        #LUMINANCE ARC\n\t        pen.setWidth(3) #Outline Width\n\t        pen.setColor(QtGui.QColor(150,150,150)) #Outline Color\n\t        gradient = QtGui.QConicalGradient()\n\t        gradient.setCenter(center)\n\t        gradient.setAngle(-90)\n\t        gradient.setColorAt(1, QtGui.QColor(255, 255, 255))\n\t        gradient.setColorAt(0.497, QtGui.QColor(170, 170, 170))\n\t        gradient.setColorAt(0.498, QtGui.QColor(255, 255, 255))\n\t        gradient.setColorAt(0.5, QtGui.QColor(255, 255, 255))\n\t        gradient.setColorAt(0.502, QtGui.QColor(255, 255, 255))\n\t        gradient.setColorAt(0.503, QtGui.QColor(170, 170, 170))\n\t        gradient.setColorAt(0, QtGui.QColor(70, 70, 70))\n\t        pen.setBrush(gradient)\n\n\t        painter.setPen(pen)    \n\t        rectangle = QtCore.QRectF(self.center\[0]-((self.dim*1.1)/2), self.center\[1]-((self.dim*1.1)/2), self.dim*1.1, self.dim*1.1)     \n\t        startAngle = -90*16\n\n\t        spanAngle = (self.value_angle)*16\n\t        painter.drawArc(rectangle, startAngle, spanAngle)\n\n\n\t        pen.setWidth(1) #Outline Width\n\t        pen.setColor(QtGui.QColor(20,20,20)) #Outline Color\n\t        painter.setPen(pen)\n\t        #painter.drawEllipse(center, r-8, r-8) #DRAW THE INNER BLACK CIRCLE\n\n\t        pen.setColor(QtGui.QColor(200,200,200)) #Outline Color\n\t        painter.setPen(pen)\n\t        #Middle Crosshair\n\t        painter.drawLine((self.master_radius)+4,(self.master_radius),(self.master_radius)-4,(self.master_radius))\n\t        painter.drawLine((self.master_radius),(self.master_radius)+4,(self.master_radius),(self.master_radius)-4)\n\n\t        pen.setWidth(6) #Outline Width\n\t        painter.setPen(pen)\n\t        (x1,y1,x2,y2) = self.points\n\t        (x1,y1,x2,y2) = self.points2\n\n\n\t        #Draw the GuideLines\n\t        pen.setWidth(1.99)\n\t        pen.setColor(QtGui.QColor(220,220,220))\n\t        pen.setStyle(QtCore.Qt.PenStyle.DashLine)\n\t        painter.setPen(pen)\n\t        (hpx, hpy) =  self.huepoint\n\t        d = self.getDist((hpx,hpy),self.center)\n\t        if self.bMouseDown == False: #Hide the guidelines when the mouse is not clicked\n\t            pass\n\t        else:\n\t            (x1,y1,x2,y2) = self.getRadialLinePoints(0, self.master_radius, ((self.hue/255)*360)+15,0.80) \n\t            painter.drawLine(x1,y1,x2,y2)\n\t            if d > 46: #If the radial is in the bright area, then display a dark version\n\t                pen.setColor(QtGui.QColor(20,20,20))  \n\t                painter.setPen(pen)\n\t            if d != 0:\n\t                painter.drawEllipse(QtCore.QPointF(self.master_radius, self.master_radius), d, d)\n\n\n\t        #Draw Hue Dot\n\t        pen.setWidth(1)\n\t        pen.setStyle(QtCore.Qt.PenStyle.SolidLine)\n\t        if self.luma > 90:\n\t            pen.setColor(QtGui.QColor(0,0,0))\n\t        else:\n\t            pen.setColor(QtGui.QColor(220,220,220))\n\t        painter.setPen(pen)\n\t        painter.setBrush(brush)\n\t        painter.drawEllipse(QtCore.QPointF(hpx, hpy), 5, 5)\n\n\n\n\t    def setUIColor(self,h,s,v):\n\t        (x1,y1,x2,y2) = self.getRadialLinePoints((self.dim / 2.0), self.master_radius,  ((self.hue/255)*360)+15,(s/255.0))\n\t        self.huepoint = (x2,y2)\n\t        self.lastPoint = (x2,y2)\n\t        self.currentPoint = (x2,y2)\n\t        #Saturation\n\t        self.value_angleSat = (1.0-((s/255.0) * 90.0)) + 135.0       \n\n\t        #Luminance\n\t        self.value_angle = ((v/255.0) * 360.0) \n\n\n\t        \n\t    def alterColor(self, x, y):\t\n\t        d = 2.0 * self.getDist((x,y),self.center) / self.dim\n\t        if self.guiSelection == 0:\n\t            if self.getDist((x,y),self.center) >= (self.dim/2.0):\n\t                Percent = self.getDist((x,y),self.center) / (self.dim/2.0)\n\t                prex = (((x-self.center\[0]) / Percent) * 1)+self.center\[0]\n\t                prey = (((y-self.center\[1]) / Percent) * 1)+self.center\[1]\n\t                self.initialPoint = (self.initialPoint\[0]-(prex-x), self.initialPoint\[1]-(prey-y))\n\t                x = prex\n\t                y = prey\n\t            hue = self.getHue(x, y)\n\n\t            self.value_angleSat = (1.0-((self.getDist((x,y),self.center) / (self.dim/2.0)) * 90.0)) + 135.0  \n\t            self.hue = (hue/360)*255\n\t            self.sat = min(d*255.0,255.0)\n\t            self.huepoint = (x,y)\n\t            self.setColor(hue,min(d*255.0,255.0),self.luma)\n\t        \n\t        elif self.guiSelection == 1:\n\t            self.value_angle = self.getRot(x, y)\n\t            lum = self.getLum(x, y)\n\t            v = (lum/360.0)*255.0\n\t            self.setColor(self.color.hueF(), self.color.saturationF(), v)\n\t            self.luma = v\n\n\n\t        else:\n\t            pass\n\n\n\t    def mousePressEvent(self, evt):\n\t    \tself.setstate = 1\n\t        self.myTimer.start()\n\t\t\t\n\t        d = 2 * self.getDist((evt.x(), evt.y()),self.center) / self.dim\n\t        if evt.button() == QtCore.Qt.MouseButton.MiddleButton:\n\t            self.middleMouse = 1\n\t        else:\n\t            self.middleMouse = 0\n\t        if d <= 1: \n\t            self.guiSelection = 0\n\t            if self.middleMouse == 1:\n\t                self.initialPoint = (self.center\[0], self.center\[1])\n\t                self.lastPoint = (self.center\[0], self.center\[1]) \n\t                self.alterColor(self.lastPoint\[0], self.lastPoint\[1])\n\t            else:\n\t                self.initialPoint = (evt.x(), evt.y())\n\t                self.alterColor(self.lastPoint\[0], self.lastPoint\[1])\n\t        else:\n\t            d = self.getDist((evt.x(), evt.y()),self.center) / self.master_radius\n\t            if d <= 1:\n\t                self.guiSelection = 1\n\t                if self.middleMouse == 1:\n\t                    self.initialPoint = (self.center\[0], self.center\[1])\n\t                    self.lastPoint = (self.center\[0], self.center\[1]) \n\t                    self.alterColor(self.lastPoint\[0], self.lastPoint\[1]-10)\n\t                else:\n\t                    self.alterColor(evt.x(), evt.y())\n\t            else:\n\t                self.guiSelection = 3\n\t        self.bMouseDown = True\n\n\n\n\n\t    def mouseMoveEvent(self, evt):\n\t    \tself.setstate = 1\n\t    \tnMilliseconds = self.myTimer.elapsed()\n\t    \tif nMilliseconds < 1:\n\t    \t\tpass\n\t    \telse:\n\n\t\t        modifiers = QtGui.QApplication.keyboardModifiers()\n\t\t        self.shiftDown = False\n\t\t        self.ctrlDown = False\n\t\t        self.altDown = False\n\t\t        self.colorWheelSensitivity = 0.1\n\n\t\t        if modifiers == QtCore.Qt.ShiftModifier:\n\t\t            self.shiftDown = True\n\t\t        if modifiers == QtCore.Qt.ControlModifier:\n\t\t            self.ctrlDown = True\n\t\t        if modifiers == QtCore.Qt.AltModifier:\n\t\t            self.altDown = True\n\t\t            self.colorWheelSensitivity = 1\n\t\t        if modifiers == (QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier):\n\t\t            self.ctrlDown = True\n\t\t            self.shiftDown = True\n\n\t\t        if self.bMouseDown and self.middleMouse == 0:\n\t\t            if self.guiSelection == 1 or self.guiSelection == 2:\n\t\t                self.alterColor(evt.x(), evt.y())\n\t\t            else:\n\n\t\t                x = (((evt.x()-self.initialPoint\[0]) * self.colorWheelSensitivity))+self.lastPoint\[0]\n\t\t                y = (((evt.y()-self.initialPoint\[1]) * self.colorWheelSensitivity))+self.lastPoint\[1]\n\t\t                self.alterColor(x, y)\n\t\t                self.currentPoint = (x, y) \n\t\t        self.myTimer.restart()\n\t        \n\n\t    def mouseReleaseEvent(self, evt):\n\t    \tself.setstate = 2\n\t        self.lastPoint = self.currentPoint\n\t        self.setColor(self.hue, self.sat, self.luma)\n\t        self.setUIColor(self.hue,self.sat,self.luma)\n\t        self.bMouseDown = False\n\nclass Example(QtGui.QWidget):\n\tdef __init__(self, parent=None,myNode=\"none\"):\n\t\tQtGui.QWidget.__init__(self, None)\n\t\t#self.setGeometry(900, 900, 800, 600)\n\t\t#self.setWindowTitle('ColorBars')\n\t\tself.baseNode = myNode\n\t\tself.palette = QtGui.QPalette()\n\t\tself.LiftLabel = QtGui.QLabel(\"<b>Lift</b>\")\n\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n\t\tself.LiftLabel.setPalette(self.palette)\n\t\tself.LiftLabel.mouseReleaseEvent = self.showText1\n\t\tself.Lift = ColorWheelWidget(None, 138, 10,myNode.knob(\"Lift\"))\n\n\n\t\tself.GammaLabel = QtGui.QLabel(\"<b>Gamma</b>\")\n\t\tself.GammaLabel.setPalette(self.palette)\n\t\tself.GammaLabel.mouseReleaseEvent = self.showText2\n\t\tself.Gamma = ColorWheelWidget(None, 138, 10,myNode.knob(\"Gamma\"))\n\n\t\tself.GainLabel = QtGui.QLabel(\"<b>Gain</b>\")\n\t\tself.GainLabel.setPalette(self.palette)\n\t\tself.GainLabel.mouseReleaseEvent = self.showText3\n\t\tself.Gain = ColorWheelWidget(None, 138, 10,myNode.knob(\"Gain\"))\n\n\t\tlayout = QtGui.QGridLayout()\n\t\tlayout.addWidget(self.LiftLabel,0,0)\n\t\tlayout.addWidget(self.GammaLabel,0,1)\n\t\tlayout.addWidget(self.GainLabel,0,2)\n\t\tlayout.addWidget(self.Lift,1,0)\n\t\tlayout.addWidget(self.Gamma,1,1)\n\t\tlayout.addWidget(self.Gain,1,2)\n\t\tlayout.setRowStretch(1,1)\n\t\tself.setLayout(layout)\n\t\t#self.show()\n\tdef showText1(self, event):\n\t\tmyNode = self.baseNode.knob(\"LiftEnabled\")\n\t\tif myNode.value() == 1:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n\t\t\tself.LiftLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(0)\n\t\telse:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n\t\t\tself.LiftLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(1)\n\n\tdef showText2(self, event):\n\t\tmyNode = self.baseNode.knob(\"GammaEnabled\")\n\t\tif myNode.value() == 1:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n\t\t\tself.GammaLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(0)\n\t\telse:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n\t\t\tself.GammaLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(1)\n\n\tdef showText3(self, event):\n\t\tmyNode = self.baseNode.knob(\"GainEnabled\")\n\t\tif myNode.value() == 1:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n\t\t\tself.GainLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(0)\n\t\telse:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n\t\t\tself.GainLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(1)\n\n\nclass ColorWheelKnob_LGG:\n\tdef __init__( self ):\n\t\tself.instance = 0\n\t\treturn None\n\n\tdef makeUI( self ):\n\t\tself.instance = Example(None,nuke.thisNode())\n\t\treturn self.instance\n\ndefined = 1" +STARTLINE}
 addUserKnob {22 init_colorwheel2 l INVISIBLE +INVISIBLE T "class Example2(QtGui.QWidget):\n  def __init__(self, parent=None,myNode=\"none\"):\n    QtGui.QWidget.__init__(self, None)\n    #self.setGeometry(900, 900, 800, 600)\n    #self.setWindowTitle('ColorBars')\n    self.baseNode = myNode\n    self.palette = QtGui.QPalette()\n    self.ShadowLabel = QtGui.QLabel(\"<b>Shadows</b>\")\n    self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n    self.ShadowLabel.setPalette(self.palette)\n    self.ShadowLabel.mouseReleaseEvent = self.showText1\n    self.Shadow = ColorWheelWidget(None, 138, 10,myNode.knob(\"Shadows\"))\n\n\n    self.MidtoneLabel = QtGui.QLabel(\"<b>Midtones</b>\")\n    self.MidtoneLabel.setPalette(self.palette)\n    self.MidtoneLabel.mouseReleaseEvent = self.showText2\n    self.Midtone = ColorWheelWidget(None, 138, 10,myNode.knob(\"Midtones\"))\n\n    self.HighlightLabel = QtGui.QLabel(\"<b>Highlights</b>\")\n    self.HighlightLabel.setPalette(self.palette)\n    self.HighlightLabel.mouseReleaseEvent = self.showText3\n    self.Highlight = ColorWheelWidget(None, 138, 10,myNode.knob(\"Highlights\"))\n\n    layout = QtGui.QGridLayout()\n    layout.addWidget(self.ShadowLabel,0,0)\n    layout.addWidget(self.MidtoneLabel,0,1)\n    layout.addWidget(self.HighlightLabel,0,2)\n    layout.addWidget(self.Shadow,1,0)\n    layout.addWidget(self.Midtone,1,1)\n    layout.addWidget(self.Highlight,1,2)\n    layout.setRowStretch(1,1)\n    self.setLayout(layout)\n    #self.show()\n  def showText1(self, event):\n    myNode = self.baseNode.knob(\"ShadowsEnabled\")\n    if myNode.value() == 1:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n      self.ShadowLabel.setPalette(self.palette)\n      myNode.setValue(0)\n    else:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n      self.ShadowLabel.setPalette(self.palette)\n      myNode.setValue(1)\n\n  def showText2(self, event):\n    myNode = self.baseNode.knob(\"MidtonesEnabled\")\n    if myNode.value() == 1:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n      self.MidtoneLabel.setPalette(self.palette)\n      myNode.setValue(0)\n    else:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n      self.MidtoneLabel.setPalette(self.palette)\n      myNode.setValue(1)\n\n  def showText3(self, event):\n    myNode = self.baseNode.knob(\"HighlightsEnabled\")\n    if myNode.value() == 1:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n      self.HighlightLabel.setPalette(self.palette)\n      myNode.setValue(0)\n    else:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n      self.HighlightLabel.setPalette(self.palette)\n      myNode.setValue(1)\n\nclass ColorWheelKnob_SMH:\n  def __init__( self ):\n    self.instance = 0\n    return None\n\n  def makeUI( self ):\n    self.instance = Example2(None,nuke.thisNode())\n    return self.instance\n" +STARTLINE}
 addUserKnob {52 init_init_colorwheel2 T "nuke.thisNode().knob(\"init_colorwheel2\").execute()" +STARTLINE}
 addUserKnob {26 info_general l "<b><font color=#70EE70>General</font><b>"}
 addUserKnob {22 General_Clear l Clear T "nuke.thisNode().knob(\"blackpoint\").setValue(\[0,0,0,0])\nnuke.thisNode().knob(\"blackpoint\").setValue(0)\nnuke.thisNode().knob(\"whitepoint\").setValue(\[0,0,0,0])\nnuke.thisNode().knob(\"whitepoint\").setValue(1)\nnuke.thisNode().knob(\"add\").setValue(\[0,0,0,0])\nnuke.thisNode().knob(\"add\").setValue(0)\nnuke.thisNode().knob(\"red\").setValue(0)\nnuke.thisNode().knob(\"Temperature\").setValue(1)\nnuke.thisNode().knob(\"Tint\").setValue(1)\nnuke.thisNode().knob(\"Contrast\").setValue(1)\nnuke.thisNode().knob(\"Saturation\").setValue(1)\nnuke.thisNode().knob(\"ColorBoost\").setValue(1)" +STARTLINE}
 addUserKnob {6 General_Enable l Enable -STARTLINE}
 General_Enable true
 addUserKnob {41 blackpoint l "Blackpoint <font color=#1A1A1A>●</font>" T BaseGrade.blackpoint}
 addUserKnob {41 whitepoint l "Whitepoint <font color=#E6E6E6>●</font>" T BaseGrade.whitepoint}
 addUserKnob {41 add l "Offset <sup>▲</sup><sub>▼</sub>" T BaseGrade.add}
 addUserKnob {26 basedevider l "" +STARTLINE T " \n"}
 addUserKnob {41 red l Exposure T Exposure1.red}
 addUserKnob {7 Temperature l "Temperature <font color=#E6E6A1><sup>◄</sup></font><font color=#A1E6E6><sub>►</sub></font>" R 0 2}
 Temperature 1
 addUserKnob {7 Tint l "Tint <font color=#E6A1A1><sup>◄</sup></font><font color=#A1E6A1><sub>►</sub></font>" R 0 2}
 Tint 1
 addUserKnob {7 Contrast R 0.5 1.5}
 Contrast 1.9
 addUserKnob {7 Saturation R 0 2}
 Saturation 0.86
 addUserKnob {7 ColorBoost l Vibrance R 0 2}
 ColorBoost 1.01
 addUserKnob {6 pop_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 info_liftgammagain l "<b><font color=#70EE70>3-Way LGG</font><b>"}
 addUserKnob {22 liftgammagain_clear l Clear T "nuke.thisNode().knob(\"LiftGammaGain\").getObject().instance.Lift.reset(1)\nnuke.thisNode().knob(\"LiftGammaGain\").getObject().instance.Gamma.reset(1)\nnuke.thisNode().knob(\"LiftGammaGain\").getObject().instance.Gain.reset(1)" +STARTLINE}
 addUserKnob {6 liftgammagain_Enable l Enable -STARTLINE}
 liftgammagain_Enable true
 addUserKnob {52 LiftGammaGain l "" t "Hotkeys:\nClick MiddleMouse = Reset\nALT+Drag = Absolute Offset" +STARTLINE T ColorWheelKnob_LGG() +STARTLINE}
 addUserKnob {41 colorspace_out l GradingSpace T LGGColorspace_in.colorspace_out}
 addUserKnob {7 LumaMix l " Mix Luma" -STARTLINE}
 LumaMix 1
 addUserKnob {20 org l "" +STARTLINE n 1}
 org 0
 addUserKnob {19 Lift R 0 2}
 Lift {1 1 1 1}
 addUserKnob {6 Lift_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Lift_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Lift_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 LiftEnabled l "" -STARTLINE}
 LiftEnabled true
 addUserKnob {19 Gamma R 0 2}
 Gamma {1 1 1 1}
 addUserKnob {6 Gamma_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gamma_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gamma_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 GammaEnabled l "" -STARTLINE}
 GammaEnabled true
 addUserKnob {19 Gain R 0 2}
 Gain {1 1 1 1}
 addUserKnob {6 Gain_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gain_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gain_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 GainEnabled l "" -STARTLINE}
 GainEnabled true
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 info_ShadowMidtoneHighlight l "<b><font color=#70EE70>3-Way SMH</font><b>"}
 addUserKnob {22 SMH_Clear l Clear T "nuke.thisNode().knob(\"ShadowsMidtonesHighlights\").getObject().instance.Shadow.reset(1)\nnuke.thisNode().knob(\"ShadowsMidtonesHighlights\").getObject().instance.Midtone.reset(1)\nnuke.thisNode().knob(\"ShadowsMidtonesHighlights\").getObject().instance.Highlight.reset(1)" +STARTLINE}
 addUserKnob {6 SMH_Enable l Enable -STARTLINE}
 addUserKnob {52 ShadowsMidtonesHighlights l "" +STARTLINE T ColorWheelKnob_SMH() +STARTLINE}
 addUserKnob {41 low l Low T BaseColorCorrect.low}
 addUserKnob {41 High -STARTLINE T BaseColorCorrect.High}
 addUserKnob {20 smh_group l "" +STARTLINE n 1}
 smh_group 0
 addUserKnob {19 Shadows R 0 2}
 Shadows {1 1 1 1}
 addUserKnob {6 Shadows_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Shadows_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Shadows_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 ShadowsEnabled l "" -STARTLINE}
 ShadowsEnabled true
 addUserKnob {6 Midtones_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Highlights_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {19 Midtones R 0 2}
 Midtones {1 1 1 1}
 addUserKnob {6 Midtones_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Midtones_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Midtones_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 MidtonesEnabled l "" -STARTLINE}
 MidtonesEnabled true
 addUserKnob {19 Highlights R 0 2}
 Highlights {1 1 1 1}
 addUserKnob {6 Highlights_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Highlights_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Highlights_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 HighlightsEnabled l "" -STARTLINE}
 HighlightsEnabled true
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {20 PAGE_Secondaries l Secondaries}
 addUserKnob {26 SplitToning_DEVIDER l "<b><font color=#70EE70>Split Toning</font><b>"}
 addUserKnob {22 SplitToning_Clear l Clear T "nuke.thisNode().knob(\"Split_Bright_Hue\").setValue(0.095)\nnuke.thisNode().knob(\"Split_Bright_Sat\").setValue(1)\nnuke.thisNode().knob(\"Split_Dark_Hue\").setValue(0.715)\nnuke.thisNode().knob(\"Split_Dark_Sat\").setValue(1)\nnuke.thisNode().knob(\"Split_Contrast\").setValue(0)\nnuke.thisNode().knob(\"Split_Mix\").setValue(0.17)\nnuke.thisNode().knob(\"Split_Offset\").setValue(0)" +STARTLINE}
 addUserKnob {6 SplitToning_Enable l Enable -STARTLINE}
 addUserKnob {7 Split_Bright_Hue l "Hue White <font color=#E6E6E6>●</font>"}
 Split_Bright_Hue 0.095
 addUserKnob {7 Split_Bright_Sat l "Sat  <font color=#E6E6E6>●</font>" -STARTLINE}
 Split_Bright_Sat 1
 addUserKnob {7 Split_Dark_Hue l "Hue Black <font color=#1A1A1A>●</font>"}
 Split_Dark_Hue 0.715
 addUserKnob {7 Split_Dark_Sat l "Sat <font color=#1A1A1A>●</font>" -STARTLINE}
 Split_Dark_Sat 1
 addUserKnob {7 Split_Contrast l "Contrast ◊"}
 addUserKnob {7 Split_Offset l Offset -STARTLINE R -1 1}
 addUserKnob {7 Split_Mix l "Mix ◌"}
 Split_Mix 0.17
 addUserKnob {26 PrimariesOffset_Devider l "<b><font color=#70EE70>Primaries Offset</font><b>"}
 addUserKnob {22 Primatries_Clear l Clear T "nuke.thisNode().knob(\"Prim_HueRed\").setValue(0)\nnuke.thisNode().knob(\"Prim_HueGreen\").setValue(0)\nnuke.thisNode().knob(\"Prim_HueBlue\").setValue(0)" +STARTLINE}
 addUserKnob {6 Primaries_Enable l Enable -STARTLINE}
 addUserKnob {7 Prim_HueRed l "Offset Red <font color=#FF4040>●</font>" R -1 1}
 addUserKnob {7 Prim_HueGreen l "Offset Green <font color=#40FF40>●</font>" R -1 1}
 addUserKnob {7 Prim_HueBlue l "Offset Blue <font color=#4040FF>●</font>" R -1 1}
 addUserKnob {4 PO_Method l Method M {"Color Overwrite" "Color Shift" "YCbCr Rotation" "" "" "" "" "" "" ""}}
 PO_Method "Color Shift"
 addUserKnob {26 ColorMixer_DEVIDER l "<b><font color=#70EE70>Color Mixer</font><b>"}
 addUserKnob {22 ColorMixer_Clear l Clear T "nuke.thisNode().knob(\"RED\").setValue(\[1,0,0])\nnuke.thisNode().knob(\"Green\").setValue(\[0,1,0])\nnuke.thisNode().knob(\"Blue\").setValue(\[0,0,1])\n\n" +STARTLINE}
 addUserKnob {6 ColorMixer_Enable l Enable -STARTLINE}
 addUserKnob {41 RED T NoOp1.RED}
 addUserKnob {41 Green l GREEN T NoOp1.Green}
 addUserKnob {41 Blue l BLUE T NoOp1.Blue}
 addUserKnob {20 PAGE_HUE l "Hue Corrections"}
 addUserKnob {26 HueShift_DEVIDER l "<b><font color=#70EE70>Hue Shift</font><b>"}
 addUserKnob {22 HueShift_Clear l Clear T "string = \"\"\"HueVsHue \{amount L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0\}\nHueVsSat \{amount L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0\}\nHueVsLum \{amount L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0\}\nSatVsSat \{master L x-1 0.5 0.5 x6 0.5 K x7 0.5\}\nSatVsLum \{master L x-1 0.5 0.5 x6 0.5 K x7 0.5\}\nBlackAndWhite \{amount L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0\}\n\"\"\"\nwith nuke.thisNode():\n    nuke.toNode(\"HueKeyer2\").knob(\"lut\").fromScript(string)" +STARTLINE}
 addUserKnob {6 HueShift_Enable l Enable -STARTLINE}
 addUserKnob {41 lut l "" +STARTLINE T HueKeyer2.lut}
 addUserKnob {26 TEEEEEEEEEEEEEEEEEEEEEEEEEEEEEST l "<b><font color=#70EE70>Settings</font><b>"}
 addUserKnob {6 BW_Enable l "Enable Black and White" +STARTLINE}
 addUserKnob {7 BWSoftFilter l "BW Soft Filter"}
 BWSoftFilter 0.245
 addUserKnob {26 soft_devider l "" +STARTLINE T "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-"}
 addUserKnob {20 Vingette}
 addUserKnob {26 Vingette_DEVIDER l "<b><font color=#70EE70>Vingette Add</font><b>"}
 addUserKnob {22 Vingette_Clear l Clear T "nuke.thisNode().knob(\"Vin_Scale\").setValue(0.7)\nnuke.thisNode().knob(\"Vin_Feather\").setValue(0.8)\nnuke.thisNode().knob(\"Vin_Gain\").setValue(1)" +STARTLINE}
 addUserKnob {6 Vingette_Enable l Enable -STARTLINE}
 addUserKnob {18 Vin_Gain l Gain}
 Vin_Gain 1
 addUserKnob {6 Vin_Gain_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Vin_Gain_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Vin_Gain_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 Vin_Scale l Scale R 0.5 4}
 Vin_Scale 0.7
 addUserKnob {7 Vin_Feather l Feather}
 Vin_Feather 0.8
 addUserKnob {12 Vin_Offset l Center}
 addUserKnob {6 Vin_HighlightPrio l "Highlight Preservation" +STARTLINE}
 Vin_HighlightPrio true
 addUserKnob {4 Vin_Method l "" -STARTLINE M {Straight Ease Gaussian "" ""}}
 addUserKnob {7 Vin_HilightIn l In R 0 3}
 addUserKnob {7 Vin_HilightOut l Out -STARTLINE R 0.5 3}
 Vin_HilightOut 0.98
 addUserKnob {26 VingetteOver_DEVIDER l "<b><font color=#70EE70>Vingette Over</font><b>"}
 addUserKnob {22 VingetteO_Clear l Clear T "nuke.thisNode().knob(\"VinO_Scale\").setValue(0.5)\nnuke.thisNode().knob(\"VinO_Feather\").setValue(0.5)\nnuke.thisNode().knob(\"VinO_Opacity\").setValue(0)\nnuke.thisNode().knob(\"VinO_Tint\").setValue(0.5,0)\nnuke.thisNode().knob(\"VinO_Tint\").setValue(0.5,1)\nnuke.thisNode().knob(\"VinO_Tint\").setValue(0.5,2)" +STARTLINE}
 addUserKnob {6 VingetteO_Enable l Enable -STARTLINE}
 VingetteO_Enable true
 addUserKnob {7 VinO_Opacity l Opacity}
 addUserKnob {6 VinO_Invert l Inverse -STARTLINE}
 VinO_Invert true
 addUserKnob {7 VinO_Scale l Scale R 0 4}
 VinO_Scale 0.5
 addUserKnob {7 VinO_Feather l Feather}
 VinO_Feather 0.5
 addUserKnob {12 VinO_Offset l Center}
 addUserKnob {18 VinO_Tint l Tint R 0 2}
 VinO_Tint {0.5 0.5 0.5}
 addUserKnob {6 VinO_Tint_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 VinO_Tint_panelDropped true
 addUserKnob {6 VinO_Tint_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 VinO_Tint_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {20 Effects}
 addUserKnob {26 Sharpen_DEVIDER l "<b><font color=#70EE70>Sharpen</font><b>"}
 addUserKnob {22 Sharpen_Clear l Clear T "nuke.thisNode().knob(\"Grain_Size\").setValue(1)\nnuke.thisNode().knob(\"Grain_Intensity\").setValue(0.25)" +STARTLINE}
 addUserKnob {6 Sharpen_Enable l Enable -STARTLINE}
 addUserKnob {7 Sharpen_1 l Sharpen}
 Sharpen_1 0.4
 addUserKnob {26 Grain_DEVIDER l "<b><font color=#70EE70>Grain</font><b>"}
 addUserKnob {22 Grain_Clear l Clear T "nuke.thisNode().knob(\"Grain_Size\").setValue(1)\nnuke.thisNode().knob(\"Grain_Intensity\").setValue(0.25)" +STARTLINE}
 addUserKnob {6 Grain_Enable l Enable -STARTLINE}
 addUserKnob {7 Grain_Size l Size R 0 8}
 Grain_Size 1
 addUserKnob {7 Grain_Intensity l Intensity}
 Grain_Intensity 0.25
 addUserKnob {26 Mist_DEVIDER l "<b><font color=#70EE70>Mist</font><b>"}
 addUserKnob {22 Mist_Clear l Clear T "nuke.thisNode().knob(\"Grain_Size\").setValue(1)\nnuke.thisNode().knob(\"Grain_Intensity\").setValue(0.25)" +STARTLINE}
 addUserKnob {6 Mist_Enable l Enable -STARTLINE}
 addUserKnob {7 Mist_Opacity l Opacity}
 Mist_Opacity 0.345
 addUserKnob {7 Mist_Gamma l "Selection Curve"}
 Mist_Gamma 0.465
 addUserKnob {7 Feather}
 Feather 0.28
 addUserKnob {7 Mist_ColorMix l "Color Mix"}
 Mist_ColorMix 0.435
 addUserKnob {6 Mist_Premultiplied l Premult -STARTLINE}
 Mist_Premultiplied true
 addUserKnob {20 Mask}
 addUserKnob {26 Devider_Mask l Mask}
 addUserKnob {41 mix -STARTLINE T Merge18.mix}
 addUserKnob {41 invert_mask l invert -STARTLINE T Merge18.invert_mask}
}
 BackdropNode {
  inputs 0
  name BackdropNode16
  tile_color 0x63c681ff
  label "Hue Curves"
  note_font_size 42
  xpos 455
  ypos 779
  bdwidth 1236
  bdheight 482
  z_order -1
 }
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0xafc663ff
  label Lift/Gain/Gamma
  note_font_size 42
  xpos 467
  ypos -269
  bdwidth 540
  bdheight 583
 }
 BackdropNode {
  inputs 0
  name BackdropNode10
  tile_color 0x6369c6ff
  label "Overlay Vingette"
  note_font_size 42
  xpos 467
  ypos 2846
  bdwidth 445
  bdheight 122
 }
 BackdropNode {
  inputs 0
  name BackdropNode11
  tile_color 0x63c0c6ff
  label "Primaries Offset"
  note_font_size 42
  xpos 462
  ypos 1821
  bdwidth 483
  bdheight 276
 }
 BackdropNode {
  inputs 0
  name BackdropNode12
  tile_color 0x639fc6ff
  label "Two Strip (NYI)"
  note_font_size 42
  xpos 464
  ypos 2154
  bdwidth 452
  bdheight 202
 }
 BackdropNode {
  inputs 0
  name BackdropNode13
  tile_color 0x8863c6ff
  label Mist
  note_font_size 42
  xpos 464
  ypos 3227
  bdwidth 496
  bdheight 179
 }
 BackdropNode {
  inputs 0
  name BackdropNode14
  tile_color 0x9763c6ff
  label Grain
  note_font_size 42
  xpos 464
  ypos 3417
  bdwidth 498
  bdheight 140
 }
 BackdropNode {
  inputs 0
  name BackdropNode15
  tile_color 0x7363c6ff
  label Sharpen
  note_font_size 42
  xpos 468
  ypos 3034
  bdwidth 500
  bdheight 177
 }
 BackdropNode {
  inputs 0
  name BackdropNode17
  tile_color 0xaa5555ff
  label ColorMixer
  note_font_size 42
  xpos 489
  ypos -1823
  bdwidth 515
  bdheight 349
 }
 BackdropNode {
  inputs 0
  name BackdropNode19
  tile_color 0x6dc663ff
  label "Curves (NYI)"
  note_font_size 42
  xpos 464
  ypos 560
  bdwidth 539
  bdheight 152
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0xc67a63ff
  label "Black & White Mix (NYI)"
  note_font_size 42
  xpos 490
  ypos -1447
  bdwidth 517
  bdheight 319
 }
 BackdropNode {
  inputs 0
  name BackdropNode20
  tile_color 0xaaaaaa00
  label REPLACE
  note_font_size 42
  xpos 956
  ypos 1820
  bdwidth 288
  bdheight 275
 }
 BackdropNode {
  inputs 0
  name BackdropNode21
  tile_color 0xaaaaaa00
  label "YCbCr Rotation"
  note_font_size 42
  xpos 1436
  ypos 1822
  bdwidth 313
  bdheight 272
 }
 BackdropNode {
  inputs 0
  name BackdropNode22
  tile_color 0x91c663ff
  label Shadow/Midtone/Highlights
  note_font_size 42
  xpos 465
  ypos 357
  bdwidth 545
  bdheight 155
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x63c6a8ff
  label "Split Toning"
  note_font_size 42
  xpos 457
  ypos 1312
  bdwidth 443
  bdheight 365
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0xaaaaaa00
  label SHIFT
  note_font_size 42
  xpos 1264
  ypos 1821
  bdwidth 158
  bdheight 276
 }
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x388e8e00
  label "Used to store curves.\n(Do NOT cut and paste)"
  note_font_size 20
  xpos 1414
  ypos 943
  bdwidth 239
  bdheight 159
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0xc6bf63ff
  label "Color Boost"
  note_font_size 42
  xpos 499
  ypos -631
  bdwidth 526
  bdheight 261
 }
 BackdropNode {
  inputs 0
  name BackdropNode7
  tile_color 0xc69563ff
  label "Temperature & Tint"
  note_font_size 42
  xpos 499
  ypos -1091
  bdwidth 511
  bdheight 188
 }
 BackdropNode {
  inputs 0
  name BackdropNode8
  tile_color 0xc6aa63ff
  label "Base Color Correction"
  note_font_size 42
  xpos 499
  ypos -859
  bdwidth 516
  bdheight 182
 }
 BackdropNode {
  inputs 0
  name BackdropNode9
  tile_color 0x6387c6ff
  label "Gain Vingette"
  note_font_size 42
  xpos 467
  ypos 2519
  bdwidth 439
  bdheight 265
 }
 Input {
  inputs 0
  name Input
  xpos 509
  ypos -2122
 }
 Dot {
  name Dot47
  xpos 543
  ypos -2059
 }
set N215a8830 [stack 0]
 Shuffle {
  alpha white
  name Shuffle21
  xpos 509
  ypos -2007
 }
 Dot {
  name Dot33
  xpos 543
  ypos -1708
 }
set N215bc170 [stack 0]
 Dot {
  name Dot32
  xpos 749
  ypos -1708
 }
 ColorMatrix {
  matrix {
      {{(parent.NoOp1.RED.r/(parent.NoOp1.RED.r+parent.NoOp1.RED.g+parent.NoOp1.RED.b)*(parent.NoOp1.RED.r>=0?parent.NoOp1.RED.r:-parent.NoOp1.RED.r))} {(parent.NoOp1.RED.g/(parent.NoOp1.RED.r+parent.NoOp1.RED.g+parent.NoOp1.RED.b)*(parent.NoOp1.RED.g>=0?parent.NoOp1.RED.g:-parent.NoOp1.RED.g))} {(parent.NoOp1.RED.b/(parent.NoOp1.RED.r+parent.NoOp1.RED.g+parent.NoOp1.RED.b)*(parent.NoOp1.RED.b>=0?parent.NoOp1.RED.b:-parent.NoOp1.RED.b))}}
      {{(parent.NoOp1.Green.r/(parent.NoOp1.Green.r+parent.NoOp1.Green.g+parent.NoOp1.Green.b)*(parent.NoOp1.Green.r>=0?parent.NoOp1.Green.r:-parent.NoOp1.Green.r))} {(parent.NoOp1.Green.g/(parent.NoOp1.Green.r+parent.NoOp1.Green.g+parent.NoOp1.Green.b)*(parent.NoOp1.Green.g>=0?parent.NoOp1.Green.g:-parent.NoOp1.Green.g))} {(parent.NoOp1.Green.b/(parent.NoOp1.Green.r+parent.NoOp1.Green.g+parent.NoOp1.Green.b)*(parent.NoOp1.Green.b>=0?parent.NoOp1.Green.b:-parent.NoOp1.Green.b))}}
      {{(parent.NoOp1.Blue.r/(parent.NoOp1.Blue.r+parent.NoOp1.Blue.g+parent.NoOp1.Blue.b)*(parent.NoOp1.Blue.r>=0?parent.NoOp1.Blue.r:-parent.NoOp1.Blue.r))} {(parent.NoOp1.Blue.g/(parent.NoOp1.Blue.r+parent.NoOp1.Blue.g+parent.NoOp1.Blue.b)*(parent.NoOp1.Blue.g>=0?parent.NoOp1.Blue.g:-parent.NoOp1.Blue.g))} {(parent.NoOp1.Blue.b/(parent.NoOp1.Blue.r+parent.NoOp1.Blue.g+parent.NoOp1.Blue.b)*(parent.NoOp1.Blue.b>=0?parent.NoOp1.Blue.b:-parent.NoOp1.Blue.b))}}
    }
  name ColorMatrix3
  xpos 715
  ypos -1633
 }
 Expression {
  expr0 isnan(r)==1?0:r
  expr1 isnan(g)==1?0:g
  expr2 isnan(b)==1?0:b
  name Expression3
  xpos 715
  ypos -1530
 }
push $N215bc170
 Switch {
  inputs 2
  which {{parent.ColorMixer_Enable}}
  name Switch1
  xpos 509
  ypos -1530
 }
 Dot {
  name Dot12
  xpos 543
  ypos -1354
 }
set N215e96a0 [stack 0]
 Dot {
  name Dot13
  xpos 814
  ypos -1354
 }
 Saturation {
  saturation 0
  mode Maximum
  name Saturation1
  xpos 780
  ypos -1250
 }
set N215f2910 [stack 0]
 Dot {
  name Dot14
  xpos 814
  ypos -1153
 }
push $N215f2910
 ColorLookup {
  lut {master {curve C x0.008857131004 0 s0.400000006 v1.05014801 L x0.7664735317 1 s0.5 t0 u1.130736947}
    red {}
    green {}
    blue {}
    alpha {}}
  name ColorLookup1
  xpos 678
  ypos -1250
 }
 Shuffle {
  green red
  blue red
  alpha red
  name Shuffle3
  xpos 678
  ypos -1224
 }
push $N215e96a0
 HueKeyer {
  lut {amount {curve L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0}
    sat_thrsh {curve 0}}
  invert false
  name BlackAndWhite
  xpos 509
  ypos -1331
  disable {{1-parent.BW_Enable}}
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle2
  xpos 509
  ypos -1285
  disable {{1-parent.BW_Enable}}
 }
set N2162d0f0 [stack 0]
 Shuffle {
  red white
  green white
  blue white
  alpha white
  name Shuffle4
  xpos 619
  ypos -1285
 }
 Dot {
  name Dot15
  xpos 653
  ypos -1252
 }
push $N2162d0f0
 Blur {
  size {{75*parent.BWSoftFilter}}
  filter box
  quality 2
  name Blur2
  xpos 509
  ypos -1259
  disable {{1-parent.BW_Enable}}
 }
 Merge2 {
  inputs 2+1
  maskChannelMask rgba.red
  name Merge1
  xpos 509
  ypos -1224
  disable {{1-parent.BW_Enable}}
 }
set N2165cfc0 [stack 0]
 Merge2 {
  inputs 2
  operation multiply
  name Merge4
  xpos 509
  ypos -1157
  disable {{1-parent.BW_Enable}}
 }
 Colorspace {
  colorspace_out CIE-XYZ
  name Colorspace3
  xpos 509
  ypos -1011
  disable {{1-parent.General_Enable}}
 }
 Grade {
  white {1 {parent.Tint*0.1+0.9} {parent.Temperature*0.5+0.5} 1}
  black_clamp false
  name Grade2
  xpos 509
  ypos -972
  disable {{parent.Colorspace3.disable}}
 }
set N21690b80 [stack 0]
 Colorspace {
  colorspace_in CIE-XYZ
  name Colorspace7
  xpos 509
  ypos -933
  disable {{parent.Colorspace3.disable}}
 }
 Saturation {
  saturation {{parent.Saturation}}
  name Saturation2
  xpos 509
  ypos -795
  disable {{1-parent.General_Enable}}
 }
 Grade {
  black_clamp false
  name BaseGrade
  xpos 509
  ypos -769
  disable {{1-parent.General_Enable}}
 }
set N216c2a80 [stack 0]
 EXPTool {
  mode Stops
  red -0.32
  green -0.32
  blue -0.32
  name Exposure1
  xpos 509
  ypos -743
  disable {{parent.red==0?1:1-parent.General_Enable}}
 }
 Expression {
  temp_name0 Gamma
  temp_expr0 parent.Contrast
  expr0 "r<1&&r>0?r<0.5?pow(r,Gamma)*pow(0.5, 1-Gamma):1-pow(1-r,Gamma)*pow(0.5, 1-Gamma):r"
  expr1 "g<1&&g>0?g<0.5?pow(g,Gamma)*pow(0.5, 1-Gamma):1-pow(1-g,Gamma)*pow(0.5, 1-Gamma):g"
  expr2 "b<1&&b>0?b<0.5?pow(b,Gamma)*pow(0.5, 1-Gamma):1-pow(1-b,Gamma)*pow(0.5, 1-Gamma):b"
  name Expression9
  xpos 509
  ypos -717
  disable {{parent.Contrast==1?1:1-parent.General_Enable}}
 }
 Expression {
  temp_name0 Gamma
  temp_expr0 parent.Contrast
  expr0 r<1?(r>0?r:1-pow(1-r,1/(pow(Gamma,4)))):pow(r,1/(pow(Gamma,4)))
  expr1 g<1?(g>0?g:1-pow(1-g,1/(pow(Gamma,4)))):pow(g,1/(pow(Gamma,4)))
  expr2 b<1?(b>0?b:1-pow(1-b,1/(pow(Gamma,4)))):pow(b,1/(pow(Gamma,4)))
  name Expression4
  xpos 509
  ypos -691
  disable {{parent.Contrast==1?1:1-parent.General_Enable}}
 }
 Dot {
  name Dot55
  xpos 543
  ypos -576
 }
set N216fef80 [stack 0]
 Colorspace {
  colorspace_out HSV
  name Colorspace1
  xpos 509
  ypos -558
  disable {{parent.ColorBoost==1?1:1-parent.General_Enable}}
 }
 Grade {
  channels {-rgba.red rgba.green -rgba.blue none}
  gamma {{parent.ColorBoost}}
  black_clamp false
  name Grade4
  xpos 509
  ypos -532
  disable {{parent.Colorspace1.disable}}
 }
set N21718160 [stack 0]
 Dot {
  name Dot9
  xpos 424
  ypos -528
 }
push $N21690b80
 Dot {
  name Dot11
  xpos 428
  ypos -968
 }
push $N2165cfc0
 Dot {
  name Dot16
  xpos 438
  ypos -1220
 }
 StickyNote {
  inputs 0
  name StickyNote10
  label "<center>Black and White Mix\n"
  xpos 335
  ypos -1233
 }
push $N216fef80
 Dot {
  name Dot56
  xpos 637
  ypos -576
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace13
  xpos 603
  ypos -454
  disable {{parent.ColorBoost==1?1:0}}
 }
push $N21718160
 Colorspace {
  colorspace_in HSV
  name Colorspace2
  xpos 509
  ypos -506
  disable {{parent.Colorspace1.disable}}
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace14
  xpos 509
  ypos -480
  disable {{parent.Colorspace1.disable}}
 }
 ShuffleCopy {
  inputs 2
  red red
  alpha alpha2
  name ShuffleCopy2
  xpos 509
  ypos -454
  disable {{parent.Colorspace1.disable}}
 }
 Colorspace {
  colorspace_in YCbCr
  name Colorspace15
  xpos 509
  ypos -428
  disable {{parent.Colorspace1.disable}}
 }
 Dot {
  name Dot53
  xpos 543
  ypos -195
 }
set N217a22e0 [stack 0]
 Colorspace {
  colorspace_out sRGB
  name LGGColorspace_in
  xpos 509
  ypos -123
 }
set N217a6d20 [stack 0]
 Dot {
  name Dot4
  xpos 772
  ypos -119
 }
 Grade {
  black {{parent.LiftEnabled?parent.Lift.a-1:0}}
  white {{parent.GainEnabled?parent.Gain.a:1}}
  gamma {{parent.GammaEnabled?parent.Gamma.a:1}}
  black_clamp false
  name LuminanceMod
  xpos 738
  ypos -17
 }
 Colorspace {
  colorspace_in {{parent.LGGColorspace_in.colorspace_out}}
  name LGGColorspace_OutL
  xpos 738
  ypos 45
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace5
  xpos 738
  ypos 100
 }
 Shuffle {
  alpha white
  name Shuffle23
  xpos 738
  ypos 164
 }
push $N217a6d20
 Grade {
  black {{parent.LiftEnabled?((parent.Lift.r-((parent.Lift.r+parent.Lift.g+parent.Lift.b)/3))*1)+(parent.Lift.a)-1:0} {parent.LiftEnabled?((parent.Lift.g-((parent.Lift.r+parent.Lift.g+parent.Lift.b)/3))*1)+(parent.Lift.a)-1:0} {parent.LiftEnabled?((parent.Lift.b-((parent.Lift.r+parent.Lift.g+parent.Lift.b)/3))*1)+(parent.Lift.a)-1:0} 1}
  white {{parent.GainEnabled?((parent.Gain.r-((parent.Gain.r+parent.Gain.g+parent.Gain.b)/3))*1)+(parent.Gain.a):1} {parent.GainEnabled?((parent.Gain.g-((parent.Gain.r+parent.Gain.g+parent.Gain.b)/3))*1)+(parent.Gain.a):1} {parent.GainEnabled?((parent.Gain.b-((parent.Gain.r+parent.Gain.g+parent.Gain.b)/3))*1)+(parent.Gain.a):1} {curve}}
  gamma {{parent.GammaEnabled?((parent.Gamma.r-((parent.Gamma.r+parent.Gamma.g+parent.Gamma.b)/3))*1)+(parent.Gamma.a):1} {parent.GammaEnabled?((parent.Gamma.g-((parent.Gamma.r+parent.Gamma.g+parent.Gamma.b)/3))*1)+(parent.Gamma.a):1} {parent.GammaEnabled?((parent.Gamma.b-((parent.Gamma.r+parent.Gamma.g+parent.Gamma.b)/3))*1)+(parent.Gamma.a):1} {curve}}
  black_clamp false
  name Grade1
  xpos 510
  ypos -18
 }
 Colorspace {
  colorspace_in {{parent.LGGColorspace_in.colorspace_out}}
  name LGGColorspace_Out
  xpos 510
  ypos 54
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace4
  xpos 510
  ypos 101
  disable {{parent.LumaMix==0?1:0}}
 }
 Merge2 {
  inputs 2
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  Bchannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  output {rgba.red -rgba.green -rgba.blue rgba.alpha}
  mix {{parent.LumaMix}}
  name Merge2
  xpos 510
  ypos 158
 }
 Colorspace {
  colorspace_in YCbCr
  name Colorspace6
  xpos 510
  ypos 216
  disable {{parent.LumaMix==0?1:0}}
 }
push $N217a22e0
 Dot {
  name Dot54
  xpos 481
  ypos -195
 }
 Dot {
  name Dot52
  xpos 481
  ypos 294
 }
 Switch {
  inputs 2
  which {{parent.liftgammagain_Enable}}
  name Switch4
  xpos 509
  ypos 290
 }
 ColorCorrect {
  shadows.gain {{((parent.Shadows.r-((parent.Shadows.r+parent.Shadows.g+parent.Shadows.b)/3))*2)+(parent.Shadows.a)} {((parent.Shadows.g-((parent.Shadows.r+parent.Shadows.g+parent.Shadows.b)/3))*2)+(parent.Shadows.a)} {((parent.Shadows.b-((parent.Shadows.r+parent.Shadows.g+parent.Shadows.b)/3))*2)+(parent.Shadows.a)} 1}
  midtones.gain {{((parent.Midtones.r-((parent.Midtones.r+parent.Midtones.g+parent.Midtones.b)/3))*1)+(parent.Midtones.a)} {((parent.Midtones.g-((parent.Midtones.r+parent.Midtones.g+parent.Midtones.b)/3))*1)+(parent.Midtones.a)} {((parent.Midtones.b-((parent.Midtones.r+parent.Midtones.g+parent.Midtones.b)/3))*1)+(parent.Midtones.a)} 1}
  highlights.gain {{((parent.Highlights.r-((parent.Highlights.r+parent.Highlights.g+parent.Highlights.b)/3))*2)+(parent.Highlights.a)} {((parent.Highlights.g-((parent.Highlights.r+parent.Highlights.g+parent.Highlights.b)/3))*2)+(parent.Highlights.a)} {((parent.Highlights.b-((parent.Highlights.r+parent.Highlights.g+parent.Highlights.b)/3))*2)+(parent.Highlights.a)} 1}
  lookup {shadow {curve 1 s0 x0.5 0 s0}
    midtone {1-shadow-highlight}
    highlight {}}
  name BaseColorCorrect
  knobChanged RunNodeC()
  xpos 509
  ypos 434
  disable {{1-parent.SMH_Enable}}
  addUserKnob {20 User}
  addUserKnob {22 RunThis T "def RunNodeC():\n\tif nuke.thisKnob().Class() == \"Array_Knob\":\n\t\t\tthisNode = nuke.thisNode().fullName().split(\".\")\[-2]\n\t\t\twith nuke.Root():\n\t\t\t\tinputNode = nuke.toNode(thisNode)\n\t\t\t#nuke.message( inputNode)\n\t\t\twith inputNode:\n\t\t\t\tshadowval = nuke.toNode(inputNode.name()+\".BaseColorCorrect\").knob(\"low\").value()\n\t\t\t\thighlightval = nuke.toNode(inputNode.name()+\".BaseColorCorrect\").knob(\"High\").value()\n\t\t\t\tcurve = nuke.toNode(inputNode.name()+\".BaseColorCorrect\").knob(\"lookup\").toScript()\n\t\t\t\tmyCurve = curve.splitlines()\[0]\n\t\t\t\tmyCurve = \"shadow \{curve 1 s0 x0.5 0 s0\}\"\n\t\t\t\tmyCurve = myCurve.replace(myCurve.split(\" \")\[4]\[1:],str(shadowval))\n\t\t\t\tnuke.toNode(inputNode.name()+\".BaseColorCorrect\").knob(\"lookup\").editCurve(\"shadow\",myCurve.replace(\"shadow\",\"curve\")\[7:-1])\n\t\t\t\tmyCurve = curve.splitlines()\[2]\n\t\t\t\tmyCurve = \"highlight \{curve x0.5 0 s0 x1 1 s0\}\"\n\t\t\t\tmyCurve = myCurve.replace(myCurve.split(\" \")\[2]\[1:],str(highlightval))\n\t\t\t\tnuke.toNode(inputNode.name()+\".BaseColorCorrect\").knob(\"lookup\").editCurve(\"highlight\",myCurve.replace(\"highlight\",\"curve\")\[7:-1])\nnuke.toNode(\"BaseColorCorrect\").knob('knobChanged').setValue(\"RunNodeC()\")\n" +STARTLINE}
  addUserKnob {7 low l Low}
  low 0.5
  addUserKnob {7 High}
  High 0.5
 }
 ColorLookup {
  name ColorLookup2
  xpos 509
  ypos 660
  disable true
 }
 Dot {
  name Dot34
  xpos 543
  ypos 857
 }
set N218a6a50 [stack 0]
 Dot {
  name Dot5
  xpos 694
  ypos 857
 }
set N218ab2e0 [stack 0]
 Colorspace {
  colorspace_out HSL
  name Hue_HSL_To
  xpos 660
  ypos 888
 }
set N218a6590 [stack 0]
 Grade {
  multiply 6
  black_clamp false
  name Grade8
  xpos 1064
  ypos 888
 }
 Dot {
  name Dot39
  xpos 1174
  ypos 892
 }
set N218c4280 [stack 0]
 Dot {
  name Dot40
  xpos 1284
  ypos 892
 }
 Shuffle {
  red blue
  green blue
  alpha blue
  name Shuffle17
  xpos 1250
  ypos 934
 }
 ColorLookup {
  lut {master {curve L x-1 0.5 0.5 x6 0.5 K x7 0.5}
    red {}
    green {}
    blue {}
    alpha {}}
  name SatVsLum
  xpos 1250
  ypos 960
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle18
  xpos 1250
  ypos 986
 }
 Grade {
  channels rgba
  multiply 2
  black_clamp false
  name Grade9
  xpos 1250
  ypos 1012
 }
 Dot {
  name Dot38
  xpos 1284
  ypos 1164
 }
push $N218c4280
 Shuffle {
  red green
  blue green
  alpha green
  name Shuffle16
  xpos 1140
  ypos 934
 }
 ColorLookup {
  lut {master {curve L x-1 0.5 0.5 x6 0.5 K x7 0.5}
    red {}
    green {}
    blue {}
    alpha {}}
  name SatVsSat
  xpos 1140
  ypos 960
 }
 Shuffle {
  green red
  blue red
  alpha red
  name Shuffle19
  xpos 1140
  ypos 986
 }
 Grade {
  channels rgba
  multiply 2
  black_clamp false
  name Grade11
  xpos 1140
  ypos 1012
 }
 Dot {
  name Dot41
  xpos 1174
  ypos 1138
 }
push $N218ab2e0
 Dot {
  name Dot36
  xpos 804
  ypos 857
 }
set N2192f810 [stack 0]
 Dot {
  name Dot42
  xpos 914
  ypos 857
 }
set N21967d30 [stack 0]
 Dot {
  name Dot43
  xpos 1024
  ypos 857
 }
 HueKeyer {
  lut {amount {curve i L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0}
    sat_thrsh {curve 0 x6 0 s0}}
  invert false
  name HueVsLum
  xpos 990
  ypos 939
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle20
  xpos 990
  ypos 977
 }
 Grade {
  multiply 2
  black_clamp false
  name Grade12
  xpos 990
  ypos 1003
 }
 Dot {
  name Dot45
  xpos 1024
  ypos 1106
 }
push $N21967d30
 HueKeyer {
  lut {amount {curve L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0}
    sat_thrsh {}}
  invert false
  name HueVsSat
  xpos 880
  ypos 939
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle15
  xpos 880
  ypos 977
 }
 Grade {
  multiply 2
  black_clamp false
  name Grade10
  xpos 880
  ypos 1003
 }
 Dot {
  name Dot44
  xpos 914
  ypos 1068
 }
push $N218a6590
push $N2192f810
 HueKeyer {
  lut {amount {curve L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0}
    sat_thrsh {curve 0 x6 0 s0}}
  invert false
  name HueVsHue
  xpos 770
  ypos 913
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle14
  xpos 770
  ypos 951
 }
 MergeExpression {
  inputs 2
  expr0 ((B.Red-0.5)*((A.Blue*2)-0.5))+0.5
  name MergeExpression1
  xpos 770
  ypos 977
  disable true
 }
 Grade {
  channels rgba
  add 0.5
  black_clamp false
  name Grade7
  xpos 770
  ypos 1003
 }
 Dot {
  name Dot46
  xpos 804
  ypos 1036
 }
push $N218a6590
 Merge2 {
  inputs 2
  operation plus
  Achannels {rgba.red -rgba.green -rgba.blue -rgba.alpha}
  Bchannels {rgba.red -rgba.green -rgba.blue -rgba.alpha}
  output {rgba.red -rgba.green -rgba.blue -rgba.alpha}
  name Merge13
  xpos 660
  ypos 1032
 }
 Merge2 {
  inputs 2
  operation multiply
  Achannels {-rgba.red rgba.green -rgba.blue rgba.alpha}
  Bchannels {-rgba.red rgba.green -rgba.blue rgba.alpha}
  output {-rgba.red rgba.green -rgba.blue rgba.alpha}
  name Merge16
  xpos 660
  ypos 1058
 }
 Merge2 {
  inputs 2
  operation multiply
  Achannels {-rgba.red -rgba.green rgba.blue rgba.alpha}
  Bchannels {-rgba.red -rgba.green rgba.blue rgba.alpha}
  output {-rgba.red -rgba.green rgba.blue rgba.alpha}
  name Merge17
  xpos 660
  ypos 1096
 }
 Merge2 {
  inputs 2
  operation multiply
  Achannels {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  Bchannels {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  output {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  name Merge15
  xpos 660
  ypos 1134
 }
 Merge2 {
  inputs 2
  operation multiply
  Achannels {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  Bchannels {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  output {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  name Merge14
  xpos 660
  ypos 1160
 }
 Colorspace {
  colorspace_in HSL
  name Hue_HSL_From
  xpos 660
  ypos 1186
 }
 Dot {
  name Dot37
  xpos 694
  ypos 1223
 }
push $N218a6a50
 Switch {
  inputs 2
  which {{parent.HueShift_Enable}}
  name Switch3
  xpos 509
  ypos 1219
 }
 Dot {
  name Dot17
  xpos 543
  ypos 1372
 }
set N21a6c510 [stack 0]
 Colorspace {
  colorspace_out HSL
  name Colorspace8
  xpos 709
  ypos 1368
 }
set N21a7d800 [stack 0]
 Dot {
  name Dot18
  xpos 837
  ypos 1459
 }
 Grade {
  white {{1+(parent.Split_Contrast/2)}}
  add {{parent.Split_Offset}}
  gamma {{1-(parent.Split_Contrast/2)}}
  black_clamp false
  name Grade3
  xpos 803
  ypos 1631
 }
 Shuffle {
  name Shuffle9
  xpos 711
  ypos 1631
 }
push $N21a7d800
 Expression {
  expr0 parent.Split_Bright_Hue
  expr1 parent.Split_Bright_Sat
  name Expression5
  xpos 709
  ypos 1434
 }
 Colorspace {
  colorspace_in HSL
  name Colorspace9
  xpos 709
  ypos 1513
 }
 Shuffle {
  alpha white
  name Shuffle1
  xpos 709
  ypos 1539
 }
push $N21a7d800
 Expression {
  expr0 parent.Split_Dark_Hue
  expr1 parent.Split_Dark_Sat
  name Expression6
  xpos 601
  ypos 1435
 }
 Colorspace {
  colorspace_in HSL
  name Colorspace10
  xpos 601
  ypos 1514
 }
 Shuffle {
  alpha white
  name Shuffle5
  xpos 601
  ypos 1540
 }
 Merge2 {
  inputs 2+1
  maskChannelMask rgba.blue
  name Merge5
  xpos 601
  ypos 1631
 }
push $N21a6c510
 Merge2 {
  inputs 2
  mix {{parent.Split_Mix}}
  name Merge6
  xpos 509
  ypos 1631
  disable {{1-parent.SplitToning_Enable}}
 }
set N21b0ae10 [stack 0]
 Dot {
  name Dot19
  xpos 391
  ypos 1635
 }
 StickyNote {
  inputs 0
  name StickyNote11
  label "<center>Split Toning\n"
  xpos 322
  ypos 1621
 }
push $N21b0ae10
 Dot {
  name Dot20
  xpos 543
  ypos 1900
 }
set N21b38800 [stack 0]
 Dot {
  name Dot58
  xpos 1059
  ypos 1900
 }
set N21b467d0 [stack 0]
 Dot {
  name Dot21
  xpos 1177
  ypos 1900
 }
set N21b4bb20 [stack 0]
 Dot {
  name Dot57
  xpos 1349
  ypos 1900
 }
set N21b50620 [stack 0]
 Dot {
  name Dot60
  xpos 1588
  ypos 1900
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace16
  xpos 1554
  ypos 1931
 }
 Expression {
  temp_name0 cosThetaB
  temp_expr0 "cos((RotationB+180) * (PI / 180))"
  temp_name1 sinThetaB
  temp_expr1 "sin((RotationB+180) * (PI / 180))"
  temp_name2 cosTheta
  temp_expr2 "cos(Rotation * (PI / 180))"
  temp_name3 sinTheta
  temp_expr3 "sin(Rotation * (PI / 180))"
  expr1 "(cosTheta * (g - 0.5) - sinTheta * (b - 0.5) + 0.5)"
  expr2 "(sinThetaB * (g - 0.5) - cosThetaB * (b - 0.5) + 0.5)"
  name Expression7
  xpos 1554
  ypos 1957
  addUserKnob {20 User}
  addUserKnob {7 Rotation R -180 180}
  Rotation {{180*parent.Prim_HueRed}}
  addUserKnob {7 RotationB R -180 180}
  RotationB {{180*parent.Prim_HueGreen}}
 }
 Colorspace {
  colorspace_in YCbCr
  name Colorspace17
  xpos 1554
  ypos 1983
 }
 Dot {
  name Dot61
  xpos 1588
  ypos 2063
 }
push $N21b50620
 ColorMatrix {
  matrix {
      {{(1+(parent.Prim_HueBlue))+(parent.Prim_HueGreen)} {-parent.Prim_HueGreen} {-parent.Prim_HueBlue}}
      {{parent.Prim_HueRed} {(1+(-parent.Prim_HueBlue))-(parent.Prim_HueRed)} {parent.Prim_HueBlue}}
      {{-parent.Prim_HueRed} {parent.Prim_HueGreen} {(1+(-parent.Prim_HueGreen))+parent.Prim_HueRed}}
    }
  name ShiftMatrix
  label "Custom Recipe \nBy Mads Hagbarth Lund"
  note_font "Verdana Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold"
  note_font_size 9
  xpos 1315
  ypos 1965
 }
 Dot {
  name Dot59
  xpos 1349
  ypos 2025
 }
push $N21b4bb20
 Keyer {
  invert true
  operation "luminance key"
  range {0.5795876367 1 1 1}
  name Keyer1
  xpos 1143
  ypos 1971
 }
push $N21b467d0
 ColorMatrix {
  inputs 1+1
  matrix {
      {1 {parent.Prim_HueGreen} {-parent.Prim_HueBlue}}
      {{-parent.Prim_HueRed} 1 {parent.Prim_HueBlue}}
      {{parent.Prim_HueRed} {-parent.Prim_HueGreen} 1}
    }
  name ReplaceMatrix
  label "Custom Recipe \nBy Mads Hagbarth Lund"
  note_font "Verdana Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold"
  note_font_size 9
  xpos 1025
  ypos 1964
 }
 Switch {
  inputs 3
  which {{parent.PO_Method}}
  name Switch7
  xpos 722
  ypos 2059
 }
push $N21b38800
 Switch {
  inputs 2
  which {{parent.Primaries_Enable}}
  name Switch6
  xpos 511
  ypos 2059
 }
set N21bcb3d0 [stack 0]
 Dot {
  name Dot23
  xpos 543
  ypos 2218
 }
set N21bd3580 [stack 0]
 Dot {
  name Dot24
  xpos 643
  ypos 2218
 }
set N21bd8090 [stack 0]
 Shuffle {
  blue green
  alpha white
  name Shuffle6
  xpos 719
  ypos 2214
 }
push $N21bd8090
 Shuffle {
  green blue
  alpha white
  name Shuffle7
  xpos 609
  ypos 2256
 }
 Merge2 {
  inputs 2
  mix 0.445
  name Merge7
  xpos 719
  ypos 2256
 }
push $N21bd8090
 Merge2 {
  inputs 2
  mix 0.6
  name Merge8
  selected true
  xpos 719
  ypos 2299
 }
push $N21bd3580
 AddMix {
  inputs 2
  mix {{parent.Split_Mix}}
  name AddMix1
  xpos 509
  ypos 2299
  disable true
 }
set Nbc34a70 [stack 0]
 Dot {
  name Dot25
  xpos 374
  ypos 2303
 }
 StickyNote {
  inputs 0
  name StickyNote13
  label "<center>Two Strip\n"
  xpos 305
  ypos 2289
 }
 StickyNote {
  inputs 0
  name StickyNote9
  label "<center>Converting to CIE-XYZ\nfor control.\nWill disable if values are default"
  xpos 268
  ypos -979
 }
push $N21bcb3d0
 Dot {
  name Dot22
  xpos 379
  ypos 2063
 }
 StickyNote {
  inputs 0
  name StickyNote12
  label "<center>Prim Offset\nFor post balancing\n"
  xpos 310
  ypos 2049
 }
push $N215a8830
 Dot {
  name Dot49
  xpos 95
  ypos -2059
 }
 Dot {
  name Dot48
  xpos 95
  ypos 3790
 }
 Dot {
  name Dot50
  xpos 453
  ypos 3790
 }
set N21c42130 [stack 0]
 Input {
  inputs 0
  name Mask
  xpos 748
  ypos 3786
  number 1
 }
push $Nbc34a70
 Dot {
  name Dot26
  xpos 543
  ypos 2455
 }
set N21c2ed50 [stack 0]
 Shuffle {
  red black
  green black
  blue black
  alpha black
  name Shuffle8
  xpos 742
  ypos 2451
 }
 Dot {
  name Dot27
  xpos 924
  ypos 2455
 }
 Dot {
  name Dot28
  xpos 924
  ypos 2718
 }
set N21c4f5e0 [stack 0]
 Dot {
  name Dot29
  xpos 924
  ypos 2915
 }
 Radial {
  invert {{parent.VinO_Invert}}
  area {{((width/2)-(width*parent.VinO_Scale))+(width*((VinO_Offset.x)/1000))} {((height/2)-(height*parent.VinO_Scale))+(height*((VinO_Offset.y)/1000))} {((width/2)+(width*parent.VinO_Scale))+(width*((VinO_Offset.x)/1000))} {((height/2)+(height*parent.VinO_Scale))+(height*((VinO_Offset.y)/1000))}}
  softness {{parent.VinO_Feather}}
  color {{parent.VinO_Tint} {parent.VinO_Tint} {parent.VinO_Tint} {parent.VinO_Tint}}
  name Radial2
  xpos 737
  ypos 2911
 }
push $N21c2ed50
 Dot {
  name Dot30
  xpos 543
  ypos 2596
 }
set N21c7c850 [stack 0]
 Keyer {
  invert true
  operation "luminance key"
  range {{parent.Vin_HilightIn} {parent.Vin_HilightOut} 999999 999999}
  name Keyer2
  xpos 636
  ypos 2586
 }
set N21c81330 [stack 0]
 Expression {
  expr3 "( 1- exp( -4 * pow2(a)) ) * 1.018657"
  name Expression1
  xpos 713
  ypos 2634
 }
push $N21c81330
 Expression {
  expr3 "0.5 - 0.5 * cos( a * pi )"
  name Expression2
  xpos 565
  ypos 2629
 }
push $N21c81330
 Switch {
  inputs 3
  which {{parent.Vin_Method}}
  name Switch2
  xpos 636
  ypos 2672
 }
push $N21c4f5e0
 Radial {
  invert true
  area {{((width/2)-(width*parent.Vin_Scale))+(width*((Vin_Offset.x)/1000))} {((height/2)-(height*parent.Vin_Scale))+(width*((Vin_Offset.y)/1000))} {((width/2)+(width*parent.Vin_Scale))+(width*((Vin_Offset.x)/1000))} {((height/2)+(height*parent.Vin_Scale))+(width*((Vin_Offset.y)/1000))}}
  softness {{parent.Vin_Feather}}
  name Radial1
  xpos 740
  ypos 2714
 }
 Merge2 {
  inputs 2
  operation multiply
  mix 0.085
  name Merge9
  xpos 636
  ypos 2714
  disable {{1-parent.Vin_HighlightPrio}}
 }
push $N21c7c850
 Grade {
  inputs 1+1
  white {{parent.Vin_Gain}}
  black_clamp false
  name Grade5
  xpos 509
  ypos 2714
  disable {{1-parent.Vingette_Enable x1 1}}
 }
 Merge2 {
  inputs 2
  mix {{parent.VinO_Opacity/5}}
  name Merge10
  xpos 509
  ypos 2911
  disable {{1-parent.VingetteO_Enable}}
 }
 Clamp {
  maximum_enable false
  name Clamp1
  xpos 509
  ypos 3049
  disable {{parent.Sharpen1.disable}}
 }
 Colorspace {
  colorspace_out Cineon
  name Colorspace18
  xpos 509
  ypos 3087
  disable {{parent.Sharpen1.disable}}
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace11
  xpos 509
  ypos 3113
  disable {{parent.Sharpen1.disable}}
 }
 Sharpen {
  channels {rgba.red -rgba.green -rgba.blue none}
  amount {{parent.Sharpen_1*6}}
  name Sharpen1
  xpos 509
  ypos 3139
  disable {{1-parent.Sharpen_Enable}}
 }
 Colorspace {
  colorspace_in YCbCr
  name Colorspace12
  xpos 509
  ypos 3165
  disable {{parent.Sharpen1.disable}}
 }
 Colorspace {
  colorspace_in Cineon
  name Colorspace19
  xpos 509
  ypos 3191
  disable {{parent.Sharpen1.disable}}
 }
 Dot {
  name Dot35
  xpos 543
  ypos 3257
 }
set N21d35430 [stack 0]
 Keyer {
  operation "luminance key"
  name Keyer3
  xpos 636
  ypos 3247
 }
 Premult {
  name Premult1
  xpos 636
  ypos 3281
  disable {{1-parent.Mist_Premultiplied}}
 }
 Grade {
  channels rgba
  gamma {{parent.Mist_Gamma}}
  black_clamp false
  name Grade6
  xpos 636
  ypos 3307
 }
 Blur {
  size {{(parent.Feather+0.3)*1000}}
  name Blur1
  xpos 636
  ypos 3332
 }
 Expression {
  expr0 a
  expr1 a
  expr2 a
  mix {{1-parent.Mist_ColorMix}}
  name Expression8
  xpos 636
  ypos 3370
 }
push $N21d35430
 Merge2 {
  inputs 2
  Achannels {rgba.red rgba.green rgba.blue -rgba.alpha}
  Bchannels {rgba.red rgba.green rgba.blue -rgba.alpha}
  output {rgba.red rgba.green rgba.blue -rgba.alpha}
  mix {{parent.Mist_Opacity}}
  name Merge12
  xpos 509
  ypos 3370
  disable {{1-parent.Mist_Enable}}
 }
 Group {
  name Grain
  help "Adds synthetic grain. Push \"presets\" to get predefined types of grain, these are the correct size for 2K scans.\n\nYou can also adjust the sliders to match a sample piece of grain. Find a sample with a rather constant background, blur it to remove the grain, and use as input to this. View with a wipe in the viewer so you can make a match. It helps to view and match each of the red, green, blue separately."
  xpos 509
  ypos 3487
  disable {{1-parent.Grain_Enable}}
  addUserKnob {20 "" l User}
  addUserKnob {3 seed t "Change this value to make different instances of this operator produce different noise"}
  seed 134
  addUserKnob {35 presets l "" -STARTLINE M {"presets/Kodak 5248" "knobs this \{red_size 3.30 green_size 2.90 blue_size 2.5 red_i 0.60 green_i 0.60 blue_i 0.60 red_m 0.42 green_m 0.46 blue_m 0.85 black 0.00 label \{Kodak 5248\}\}" "presets/Kodak 5279" "knobs this \{red_size 2.70 green_size 2.60 blue_size 2.40 red_i 1.00 green_i 0.76 blue_i 0.65 red_m 0.37 green_m 0.60 blue_m 1.65 black 0.00 label \{Kodak 5279\}\}" "presets/Kodak FX214" "knobs this \{red_size 1.87 green_size 2.60 blue_size 2.44 red_i 1 green_i 0.76 blue_i 0.79 red_m 0.41 green_m 0.60 blue_m 1.80 black 0.00 label \{Kodak FX214\}\}" "presets/Kodak GT5274" "knobs this \{red_size 0.04 green_size 0.10 blue_size 0.90 red_i 0.90 green_i 0.76 blue_i 0.81 red_m 0.49 green_m 0.50 blue_m 1.55 black 0.00 label \{Kodak GT5274\}\}" "presets/Kodak 5217" "knobs this \{red_size 0.23 green_size 1.20 blue_size 1.40 red_i 0.60 green_i 0.86 blue_i 0.60 red_m 0.48 green_m 0.42 blue_m 0.87 black 0.00 label \{Kodak 5217\}\}" "presets/Kodak 5218" "knobs this \{red_size 0.10 green_size 1.60 blue_size 1.91 red_i 0.60 green_i 0.86 blue_i 0.73 red_m 0.38 green_m 0.17 blue_m 0.87 black 0.00 label \{Kodak 5218\}\}" presets/other "knobs this \{label other\}"}}
  addUserKnob {26 "" l "@b;Size"}
  addUserKnob {14 red_size l red R 0 100}
  red_size {{parent.Grain_Size}}
  addUserKnob {14 green_size l green R 0 100}
  green_size {{parent.Grain_Size}}
  addUserKnob {14 blue_size l blue R 0 100}
  blue_size {{parent.Grain_Size}}
  addUserKnob {26 "" l "@b;Irregularity"}
  addUserKnob {7 red_i l red}
  red_i 0.6
  addUserKnob {7 green_i l green}
  green_i 0.6
  addUserKnob {7 blue_i l blue}
  blue_i 0.6
  addUserKnob {26 "" l "@b;Intensity"}
  addUserKnob {7 red_m l red t "Amount of grain to add to a white pixel"}
  red_m {{parent.Grain_Intensity}}
  addUserKnob {7 green_m l green}
  green_m {{parent.Grain_Intensity}}
  addUserKnob {7 blue_m l blue}
  blue_m {{parent.Grain_Intensity}}
  addUserKnob {18 black t "Amount of grain to add everywhere"}
  black {0 0 0}
  addUserKnob {6 black_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 black_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 black_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 minimum t "Minimum black level" R 0 0.01}
  minimum {0 0 0}
  addUserKnob {6 minimum_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 minimum_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 minimum_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {26 "" l "@b;Mask"}
  addUserKnob {6 maskgrain l "Apply only through alpha" -STARTLINE}
  addUserKnob {41 maskinvert l "Invert alpha" -STARTLINE T Copy1.invert_mask}
 }
  Input {
   inputs 0
   name Input1
   xpos 0
  }
set N21da1ff0 [stack 0]
  Noise {
   output {rgba.red -rgba.green -rgba.blue -rgba.alpha}
   cliptype none
   replace true
   size {{parent.red_size.w} {parent.red_size.h}}
   zoffset {{frame+seed+red_i/2}}
   octaves 2
   gamma 1
   xrotate {{red_i*45}}
   yrotate {{red_i*45}}
   name red
   xpos 220
  }
  Noise {
   output {-rgba.red rgba.green -rgba.blue -rgba.alpha}
   cliptype none
   replace true
   size {{parent.green_size.w} {parent.green_size.h}}
   zoffset {{frame+2*seed+green_i/2}}
   octaves 2
   gamma 1
   xrotate {{green_i*45}}
   yrotate {{green_i*45}}
   name green
   xpos 220
   ypos 43
  }
  Noise {
   output {-rgba.red -rgba.green rgba.blue -rgba.alpha}
   cliptype none
   replace true
   size {{parent.blue_size.w} {parent.blue_size.h}}
   zoffset {{frame+3*seed+blue_i/2}}
   octaves 2
   gamma 1
   xrotate {{blue_i*45}}
   yrotate {{blue_i*45}}
   name blue
   xpos 220
   ypos 86
  }
  Saturation {
   saturation 0
   name Saturation1
   xpos 220
   ypos 112
  }
push $N21da1ff0
  MergeExpression {
   inputs 2
   expr0 max(minimum.r,r+(2*Ar-1)*(r*red_m+black.r))
   expr1 max(minimum.g,g+(2*Ag-1)*(g*green_m+black.g))
   expr2 max(minimum.b,b+(2*Ab-1)*(b*blue_m+black.b))
   name MergeExpression1
   xpos 220
   ypos 208
  }
set N21e11170 [stack 0]
push $N21da1ff0
  Copy {
   inputs 2
   channels rgb
   maskChannelInput rgba.alpha
   name Copy1
   xpos 0
   ypos 154
  }
push $N21e11170
  Switch {
   inputs 2
   which {{maskgrain}}
   name Switch1
   xpos 0
   ypos 241
  }
  Output {
   name Output1
   xpos 0
   ypos 286
  }
 end_group
 Shuffle {
  alpha white
  name Shuffle22
  xpos 509
  ypos 3714
 }
push $N21c42130
 Merge2 {
  inputs 2+1
  name Merge18
  xpos 509
  ypos 3786
 }
 ShuffleCopy {
  inputs 2
  name ShuffleCopy1
  xpos 509
  ypos 3855
 }
 Dot {
  name Dot31
  xpos 543
  ypos 3969
 }
 Output {
  name Output1
  xpos 509
  ypos 4133
 }
 StickyNote {
  inputs 0
  name StickyNote15
  tile_color 0xff3100ff
  gl_color 0xff0000ff
  label "<center>IS THIS CORRECT?"
  note_font "Verdana Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold"
  note_font_size 20
  xpos 804
  ypos -940
 }
push $N216c2a80
 Dot {
  name Dot10
  xpos 428
  ypos -765
 }
 StickyNote {
  inputs 0
  name StickyNote8
  label "<center>Base Color Correction\nfor normalizing shot."
  xpos 318
  ypos -776
 }
 NoOp {
  inputs 0
  name NoOp1
  xpos 815
  ypos -1634
  addUserKnob {20 User}
  addUserKnob {6 Green_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  Green_panelDropped true
  addUserKnob {18 RED}
  RED {1 0 0}
  addUserKnob {6 RED_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  RED_panelDropped true
  addUserKnob {6 RED_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 RED_panelDropped_1_1 l "panel dropped state" +HIDDEN +STARTLINE}
  addUserKnob {18 Green}
  Green {0 1 0}
  addUserKnob {6 Green_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  Green_panelDropped true
  addUserKnob {6 Green_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Green_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 Blue}
  Blue {0 0 1}
  addUserKnob {6 Blue_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  Blue_panelDropped true
  addUserKnob {6 Blue_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Blue_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 }
 HueKeyer {
  inputs 0
  name HueKeyer2
  knobChanged RunNode()
  xpos 1499
  ypos 1036
 }
 StickyNote {
  inputs 0
  name StickyNote1
  label "Temporary, remove later->"
  xpos 330
  ypos 3054
 }
 StickyNote {
  inputs 0
  name StickyNote7
  label "<center>Color Boost\nIntroduce saturation in\nless saturated areas\n(should be reduced)"
  xpos 313
  ypos -540
 }
 StickyNote {
  inputs 0
  name StickyNote16
  tile_color 0xff3100ff
  gl_color 0xff0000ff
  label "<center>REDO THIS"
  note_font "Verdana Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold"
  note_font_size 20
  xpos 771
  ypos 1310
 }
end_group
Grade {
 blackpoint -0.005
 name Grade53
 selected true
 xpos -3257
 ypos 6417
}
ColorCorrect {
 inputs 1+1
 saturation {1.56 1.56 1.225714 1}
 saturation_panelDropped true
 invert_mask true
 name ColorCorrect12
 selected true
 xpos -3257
 ypos 6499
}
ColorCorrect {
 inputs 1+1
 saturation 0.82
 name ColorCorrect13
 selected true
 xpos -3257
 ypos 6552
}
Mirror2 {
 name Mirror2_10
 selected true
 xpos -3257
 ypos 6804
}
Reformat {
 format "4800 2700 0 0 4800 2700 1 RED FullHigh 4k"
 name Reformat4
 selected true
 xpos -3257
 ypos 6830
}
Transform {
 translate {1940 -1570}
 scale 2.23
 center {2400 1350}
 name Transform15
 selected true
 xpos -3257
 ypos 6868
}
Constant {
 inputs 0
 channels rgb
 name Constant8
 selected true
 xpos -3388
 ypos 6886
}
Merge2 {
 inputs 2
 name Merge72
 selected true
 xpos -3257
 ypos 6909
}
Crop {
 box {0 0 6144 3160}
 name Crop1
 selected true
 xpos -3257
 ypos 6935
}
Shuffle {
 alpha white
 name Shuffle21
 selected true
 xpos -3257
 ypos 6961
}
Group {
 name BokehBlur1
 tile_color 0xff7524ff
 note_font Verdana
 note_font_color 0x20202ff
 selected true
 xpos -3257
 ypos 7141
 addUserKnob {20 bokeh l Bokeh}
 addUserKnob {41 format l "output format" T ReformatMaster.format}
 addUserKnob {26 ""}
 addUserKnob {4 Iris l Iris_Shape t "Choose iris shape.\n" M {Pentagonal Hexagonal Heptagonal Octagonal Circular "" "" "" "" "" "" ""}}
 Iris Hexagonal
 addUserKnob {6 userShape l "Custom Kernal" -STARTLINE}
 addUserKnob {41 BokehSize l Bokeh_Size t "Amount of defocus." T Controller.BokehSize}
 addUserKnob {41 PostBlur l "Post Blur" t "Post blur on the iris\nshape." T softness1.size}
 addUserKnob {41 Irregularity t "Amount of iris Irregularity.\n" T amt.which}
 addUserKnob {41 Rotation l Iris_Rotation t "Rotates the orientation\nof the iris shape." T Controller.Rotation}
 addUserKnob {7 aspect l "Bokeh Aspect" R 0.5 1}
 aspect 1
 addUserKnob {41 useGPUIfAvailable l "Use GPU if available" T Convolve2.useGPUIfAvailable}
 addUserKnob {26 ""}
 addUserKnob {20 ColorCorrection l "Color Enhancement" n 1}
 addUserKnob {6 specSwitch l "Specular Gain" t "Turn on/off specular\ngain." +STARTLINE}
 addUserKnob {41 SpecularGain l "Specular Gain" T specGainer.SpecularGain}
 addUserKnob {41 SpecRangeHigh l "High Range" T ranger.SpecRangeHigh}
 addUserKnob {41 SpecRangeLow l "Low Range" T ranger.SpecRangeLow}
 addUserKnob {26 unnamed l "" +STARTLINE}
 addUserKnob {6 chromAbr l "Chromatic Aberration" +STARTLINE}
 addUserKnob {4 CAbr l "Aberration Type" M {Radial Offset Both "" "" "" ""}}
 CAbr Offset
 addUserKnob {41 rad_abr l "Radial Abr" T radial_abr.rad_abr}
 addUserKnob {41 Aberration l "Offset Abr" T aberration_offset.Aberration}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {6 twinkle l "Twinkle On/Off" t "Turn on/off the twinkle\neffect." +STARTLINE}
 addUserKnob {41 speed l "Twinkle Speed" t "Speed of the twinkle\neffect." T speed1.speed}
 addUserKnob {7 Twinkle_Size l "Twinkle Size" t "Size of the twinkle\neffect." R 1 1000}
 Twinkle_Size 150
 addUserKnob {41 intensity l "Twinkle Intensity" t "Intensity of the\ntwinkle effect." T Gainer.intensity}
 addUserKnob {41 Seed t "Changes the random seed." T seeder1.seeder}
 addUserKnob {26 ""}
 addUserKnob {6 SatBoostCtrl l "Saturation Gain" +STARTLINE}
 addUserKnob {41 Saturation_Boost_1 l Saturation T Saturation_Boost1.Saturation_Boost}
 addUserKnob {6 con_boost l "Contrast Gain" +STARTLINE}
 addUserKnob {41 con_boost_1 l Contrast T Contrast_Boost.con_boost}
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {20 DOF l "Depth Of Field Controls" n 1}
 DOF 0
 addUserKnob {6 Zblur l "DOF On/Off" t "Use Zmatte to control Depth of\nField." +STARTLINE}
 addUserKnob {7 ZblurAmount l "Zblur Amount" t "Amount of Zblur" R 0 10}
 ZblurAmount 0.2
 addUserKnob {41 center l "Focal Point" t "Center of the Zslice Focal\nPlane" T ZSliceBB.center}
 addUserKnob {41 dof l "DOF Width" t "Size of the focal plane." T ZSliceBB.dof}
 addUserKnob {41 blackpoint l "DOF Far" t "Adjust the blackpoint of\nthe Zmatte." T GradeBB.blackpoint}
 addUserKnob {41 whitepoint l "DOF Near" t "Adjust the whitepoint of\nthe Zmatte." T GradeBB.whitepoint}
 addUserKnob {6 ViewAlpha l "View Matte Only" t "View the alpha\nchannel." +STARTLINE}
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {26 ver l "" +STARTLINE T "<font color=gray>BokehBlur v5.3 By Jason Bidwell"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x222222ff
  label CAbr
  note_font_size 42
  xpos -589
  ypos 816
  bdwidth 515
  bdheight 291
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x222222ff
  label "Spec Gain"
  note_font_size 50
  xpos -1243
  ypos -1013
  bdwidth 710
  bdheight 330
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x222222ff
  label Twinkle
  note_font_size 50
  xpos -1022
  ypos 302
  bdwidth 856
  bdheight 430
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0x222222ff
  label CC
  note_font_size 50
  xpos -749
  ypos -1462
  bdwidth 420
  bdheight 343
 }
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x222222ff
  label Main
  note_font_size 50
  xpos -418
  ypos -1015
  bdwidth 870
  bdheight 1229
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0x222222ff
  label Zmatte
  note_font_size 50
  xpos 428
  ypos -1638
  bdwidth 513
  bdheight 519
 }
 NoOp {
  inputs 0
  name seeder1
  xpos -260
  ypos -524
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 seeder t "Changes the random seed." R 1 10}
  seeder 1
 }
 NoOp {
  inputs 0
  name speed1
  xpos -907
  ypos 407
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 speed t "Speed of the twinkle effect." R 0.001 0.5}
  speed 0.04
 }
 NoOp {
  inputs 0
  name ranger
  xpos -1009
  ypos -921
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 SpecRangeLow l "Low Range" t "Adjust the range of\nlower specular range of the highlights to be boosted."}
  SpecRangeLow 0.22
  addUserKnob {7 SpecRangeHigh l "High Range" t "Adjust the range of\nhigher specular range of the highlights to be boosted."}
  SpecRangeHigh 0.65
 }
 NoOp {
  inputs 0
  name Saturation_Boost1
  xpos -454
  ypos -1285
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 Saturation_Boost R 1 10}
  Saturation_Boost 1.5
 }
 NoOp {
  inputs 0
  name Contrast_Boost
  xpos -479
  ypos -1427
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 con_boost l con_booster R 1 5}
  con_boost 1.5
 }
 NoOp {
  inputs 0
  name aberration_offset
  xpos -539
  ypos 881
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 Aberration t "Adds chromatic abberation." R 0 10}
  Aberration 5
 }
 NoOp {
  inputs 0
  name radial_abr
  xpos -243
  ypos 978
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 rad_abr l "Radial Abberation Amount" R 0 10}
  rad_abr 1
 }
 NoOp {
  inputs 0
  name Controller
  xpos 106
  ypos -914
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 BokehSize}
  BokehSize 0.3
  addUserKnob {7 Rotation R -180 180}
 }
 Input {
  inputs 0
  name Image
  xpos -1552
  ypos -1658
 }
 Reformat {
  type "to box"
  box_width {{parent.Image.width}}
  box_height {{parent.Image.height}}
  box_fixed true
  filter Impulse
  black_outside true
  name Reformat13
  xpos -1552
  ypos -1577
 }
 Reformat {
  resize none
  black_outside true
  name ReformatMaster
  xpos -1552
  ypos -1553
 }
 set C21fa9e10 [stack 0]
set N21fa9e10 [stack 0]
 Dot {
  name Dot18
  xpos -1547
  ypos 1258
 }
set N21fb8710 [stack 0]
 Dot {
  name Dot23
  xpos -1547
  ypos 1501
 }
 Input {
  inputs 0
  name Depth
  xpos 438
  ypos -1701
  number 1
 }
 Expression {
  expr3 a==0?0:a
  name Expr
  xpos 438
  ypos -1578
 }
 Reformat {
  type "to box"
  box_width {{parent.Image.width i}}
  box_height {{parent.Image.height i}}
  box_fixed true
  resize distort
  filter Impulse
  black_outside true
  name Reformat12
  xpos 438
  ypos -1554
 }
set N21fd46c0 [stack 0]
 Dot {
  name Dot9
  xpos 740
  ypos -1550
 }
set N21fe2fa0 [stack 0]
push $N21fe2fa0
push 0
push $N21fe2fa0
 Shuffle {
  red blue
  green blue
  alpha blue
  name blue1
  xpos 755
  ypos -1432
 }
push $N21fe2fa0
 Shuffle {
  red green
  blue green
  alpha green
  name green1
  xpos 661
  ypos -1435
 }
 Merge2 {
  inputs 4+1
  operation max
  name Merge7
  xpos 711
  ypos -1381
 }
 ZSlice {
  Zchan rgba.red
  dof 1
  name ZSliceBB
  xpos 711
  ypos -1355
 }
 Grade {
  channels alpha
  blackpoint 0.045
  whitepoint 0.65
  white 2
  white_clamp true
  name GradeBB
  xpos 711
  ypos -1317
 }
 Blur {
  channels alpha
  size {{ZblurAmount}}
  name BlurBB
  xpos 711
  ypos -1279
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle2
  xpos 711
  ypos -1241
 }
 Dot {
  name Dot16
  xpos 745
  ypos -1155
 }
push $N21fd46c0
 Switch {
  inputs 2
  which {{Zblur i}}
  name ZblurSwitch
  xpos 438
  ypos -1158
 }
set N220526a0 [stack 0]
 Dot {
  name Dot10
  xpos 547
  ypos -1045
 }
 Dot {
  name Dot21
  xpos 547
  ypos 594
 }
set N2205f5d0 [stack 0]
 Dot {
  name Dot12
  xpos 556
  ypos 1335
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle4
  xpos -198
  ypos 1331
 }
 Input {
  inputs 0
  name Mask
  xpos -155
  ypos 1202
  number 2
 }
 Expression {
  expr3 a==0?0:a
  name Expr1
  xpos -155
  ypos 1228
 }
clone $C21fa9e10 {
  xpos -155
  ypos 1254
  selected false
 }
push $N21fb8710
clone $C21fa9e10 {
  xpos -440
  ypos 1254
  selected false
 }
push $N2205f5d0
 Invert {
  name Invert3
  xpos -82
  ypos 584
 }
set N220a75a0 [stack 0]
 Dot {
  name Dot22
  xpos -48
  ypos 1136
 }
push $N220a75a0
push $N220526a0
 Invert {
  name Invert2
  xpos -167
  ypos -1165
 }
set N220b76e0 [stack 0]
 Dot {
  name Dot20
  xpos -610
  ypos 553
  hide_input true
 }
 Constant {
  inputs 0
  channels rgb
  last 100
  name Constant1
  xpos -782
  ypos 339
 }
 Noise {
  size {{Twinkle_Size i}}
  zoffset {{(abs(frame%5-frame))*speed1.speed i}}
  lacunarity {{Twinkle_Size/100 i}}
  gain 0.31
  gamma 0.685
  center {1024 778}
  name Noise2
  xpos -782
  ypos 411
 }
 Reformat {
  format "512 512 0 0 512 512 1 square_512"
  resize distort
  black_outside true
  name Reformat8
  xpos -782
  ypos 435
 }
push $N220526a0
 Dot {
  name Dot17
  xpos 395
  ypos -1047
 }
 Dot {
  name Dot5
  xpos 395
  ypos 165
 }
 Invert {
  name Invert1
  xpos -207
  ypos 155
 }
 Constant {
  inputs 0
  format "2048 1556 0 0 2048 1556 1 2K_Super_35(full-ap)"
  last 100
  name Constant4
  xpos -293
  ypos -959
 }
 Dot {
  name Dot2
  xpos -259
  ypos -856
 }
set N22110eb0 [stack 0]
 Dot {
  name Dot1
  xpos -362
  ypos -856
 }
 Noise {
  cliptype none
  size 1000
  zoffset {{seeder1.seeder x1015 0}}
  center {1024 778}
  name Noise1
  xpos -396
  ypos -526
 }
 Reformat {
  format "512 512 0 0 512 512 1 square_512"
  black_outside true
  name Reformat6
  xpos -396
  ypos -500
 }
 Input {
  inputs 0
  name Kernal
  xpos 232
  ypos -910
  number 3
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle1
  xpos 232
  ypos -886
 }
 Reformat {
  format "512 512 0 0 512 512 1 square_512"
  resize distort
  name Reformat10
  xpos 232
  ypos -765
 }
 Transform {
  rotate {{parent.Controller.Rotation i}}
  scale {{parent.Controller.BokehSize i}}
  center {{input.width/2 i} {input.height/2 i}}
  filter Mitchell
  name Transform1
  xpos 232
  ypos -711
 }
 Reformat {
  format "512 512 0 0 512 512 1 square_512"
  black_outside true
  name Reformat5
  xpos 232
  ypos -645
 }
 NoOp {
  name Custom
  tile_color 0x1f00ffff
  xpos 232
  ypos -579
 }
push $N22110eb0
 RotoPaint {
  cliptype none
  format "512 512 0 0 512 512 1 square_512"
  curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 512}
    {t x44800000 x44428000}
    {a}
    {curvegroup Ellipse1 576 bezier
     {{cc
       {f 8192}
       {px x44828000
        {xc35ab47b 0}
        {x4478cccd x43c40000}
        {x435ab47b 0}
        {0 xc35ab47b}
        {x44ade666 x44450000}
        {0 x435ab47b}
        {x435ab47b 0}
        {x4478cccd x44940000}
        {xc35ab47b 0}
        {0 x435ab47b}
        {x4415cccd x44450000}
        {0 xc35ab47b}}}     idem}
     {t
      {{x44828000 x4483c000}}
      {{x44828000 x443e0000}}     0
      {{x44828000 0}}
      {{x44828000 0}}     0 0 0
      {{x44828000 0}}
      {{x44828000 1}}
      {{x44828000 1}}     1
      {{x44828000 0}}}
     {a spx x44800000 spy x44428000 sb 1 nv x40400000 view2 x40000000 view3 x40400000 ltn x44828000 ltm x44828000 tt x40c00000}}}}}}
  toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 tt 5 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 tt 6 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 tt 7 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
  toolbar_brush_hardness 0.200000003
  toolbar_source_transform_scale {1 1}
  toolbar_source_transform_center {320 240}
  colorOverlay 0
  lifetime_type "all frames"
  lifetime_start 1044
  lifetime_end 1044
  motionblur_shutter_offset_type centred
  source_translate_round false
  source_black_outside true
  name circles
  xpos 125
  ypos -761
 }
 Transform {
  rotate {{parent.Controller.Rotation}}
  scale {{parent.Controller.BokehSize}}
  center {1024 778}
  filter Mitchell
  name Transform3
  xpos 125
  ypos -714
 }
 Reformat {
  format "512 512 0 0 512 512 1 square_512"
  black_outside true
  name Reformat4
  xpos 125
  ypos -648
 }
 NoOp {
  name circle
  tile_color 0x1f00ffff
  xpos 125
  ypos -578
 }
push $N22110eb0
 RotoPaint {
  cliptype none
  format "512 512 0 0 512 512 1 square_512"
  curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 512}
    {t x44800000 x44428000}
    {a}
    {curvegroup Ellipse1 576 bezier
     {{cc
       {f 8192}
       {px x44828000
        {0 0}
        {x4478cccd x43c40000}
        {0 0}
        {0 0}
        {x449f8000 x44000000}
        {0 0}
        {0 0}
        {x44ade666 x44450000}
        {0 0}
        {0 0}
        {x44a0c000 x44840000}
        {0 0}
        {0 0}
        {x4478cccd x44940000}
        {0 0}
        {0 0}
        {x442ea148 x4483499a}
        {0 0}
        {0 0}
        {x4415cccd x44450000}
        {0 0}
        {0 0}
        {x44320000 x43fd0000}
        {0 0}}}     idem}
     {t
      {{x44828000 x4483c000 -}}
      {{x44828000 x443e0000 -}}     0
      {{x44828000 0 -}}
      {{x44828000 0 -}}     0 0 0
      {{x44828000 0 -}}
      {{x44828000 1 -}}
      {{x44828000 1 -}}     1
      {{x44828000 0 -}}}
     {a spx x44800000 spy x44428000 sb 1 nv x40400000 view2 x40000000 view3 x40400000 ltn x44828000 ltm x44828000 tt x40c00000}}}}}}
  toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 tt 5 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 tt 6 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 tt 7 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
  toolbar_brush_hardness 0.200000003
  toolbar_source_transform_scale {1 1}
  toolbar_source_transform_center {320 240}
  colorOverlay 0
  lifetime_type "all frames"
  lifetime_start 1044
  lifetime_end 1044
  motionblur_shutter_offset_type centred
  source_translate_round false
  source_black_outside true
  name octagon
  xpos 12
  ypos -759
 }
 Transform {
  rotate {{parent.Controller.Rotation.main}}
  scale {{parent.Controller.BokehSize}}
  center {1024 778}
  filter Mitchell
  name Transform6
  xpos 12
  ypos -706
 }
 Reformat {
  format "512 512 0 0 512 512 1 square_512"
  black_outside true
  name Reformat3
  xpos 12
  ypos -644
 }
 NoOp {
  name eight
  tile_color 0x1f00ffff
  xpos 12
  ypos -579
 }
push $N22110eb0
 RotoPaint {
  cliptype none
  format "512 512 0 0 512 512 1 square_512"
  curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 512}
    {t x44800000 x44428000}
    {a}
    {curvegroup Rectangle1 576 bezier
     {{cc
       {f 8192}
       {px x44828000
        {0 0}
        {x441f0000 x446f8000}
        {0 0}
        {0 0}
        {x44658000 x44920000}
        {0 0}
        {0 0}
        {x449b8000 x44888000}
        {0 0}
        {0 0}
        {x44ae0000 x44458000}
        {0 0}
        {0 0}
        {x449dc000 x43f40000}
        {0 0}
        {0 0}
        {x44630000 x43c90000}
        {0 0}
        {0 0}
        {x44218000 x44160000}
        {0 0}}}     idem}
     {t
      {{x44828000 x446d0000}}
      {{x44828000 x4448c000}}     0
      {{x44828000 0}}
      {{x44828000 0}}     0 0 0
      {{x44828000 0}}
      {{x44828000 1}}
      {{x44828000 1}}     1
      {{x44828000 0}}}
     {a spx x44800000 spy x44428000 sb 1 nv x40400000 view2 x40000000 view3 x40400000 ltn x44828000 ltm x44828000 tt x40e00000}}}}}}
  toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 tt 5 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 tt 6 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 tt 7 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
  toolbar_brush_hardness 0.200000003
  toolbar_source_transform_scale {1 1}
  toolbar_source_transform_center {320 240}
  colorOverlay 0
  lifetime_type "all frames"
  lifetime_start 1044
  lifetime_end 1044
  motionblur_shutter_offset_type centred
  source_translate_round false
  source_black_outside true
  name heptagon
  xpos -87
  ypos -764
 }
 Transform {
  rotate {{parent.Controller.Rotation i}}
  scale {{parent.Controller.BokehSize i}}
  center {1024 778}
  filter Mitchell
  name Transform5
  xpos -87
  ypos -711
 }
 Reformat {
  format "512 512 0 0 512 512 1 square_512"
  black_outside true
  name Reformat2
  xpos -87
  ypos -645
 }
 NoOp {
  name seven
  tile_color 0x1f00ffff
  xpos -87
  ypos -580
 }
push $N22110eb0
 RotoPaint {
  cliptype none
  format "512 512 0 0 512 512 1 square_512"
  curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 512}
    {t x44800000 x44428000}
    {a}
    {curvegroup Rectangle1 576 bezier
     {{cc
       {f 8192}
       {px x44828000
        {0 0}
        {x44240000 x447a0000}
        {0 0}
        {0 0}
        {x44778000 x44944000}
        {0 0}
        {0 0}
        {x44a68000 x44798000}
        {0 0}
        {0 0}
        {x44a70000 x44148000}
        {0 0}
        {0 0}
        {x44788000 x43c20000}
        {0 0}
        {0 0}
        {x44230000 x44130000}
        {0 0}}}     idem}
     {t
      {{x44828000 x446d0000}}
      {{x44828000 x4448c000}}     0
      {{x44828000 0}}
      {{x44828000 0}}     0 0 0
      {{x44828000 0}}
      {{x44828000 1}}
      {{x44828000 1}}     1
      {{x44828000 0}}}
     {a spx x44800000 spy x44428000 sb 1 nv x40400000 view2 x40000000 view3 x40400000 ltn x44828000 ltm x44828000 tt x40e00000}}}}}}
  toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 tt 5 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 tt 6 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 tt 7 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
  toolbar_brush_hardness 0.200000003
  toolbar_source_transform_scale {1 1}
  toolbar_source_transform_center {320 240}
  colorOverlay 0
  lifetime_type "all frames"
  lifetime_start 1044
  lifetime_end 1044
  motionblur_shutter_offset_type centred
  source_translate_round false
  source_black_outside true
  name hexagon
  xpos -184
  ypos -763
 }
 Transform {
  rotate {{parent.Controller.Rotation i}}
  scale {{parent.Controller.BokehSize i}}
  center {1024 778}
  filter Mitchell
  name Transform4
  xpos -184
  ypos -712
 }
 Reformat {
  format "512 512 0 0 512 512 1 square_512"
  black_outside true
  name Reformat1
  xpos -184
  ypos -649
 }
 NoOp {
  name six
  tile_color 0x1f00ffff
  xpos -184
  ypos -584
 }
push $N22110eb0
 RotoPaint {
  cliptype none
  format "512 512 0 0 512 512 1 square_512"
  curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 512}
    {t x44800000 x44428000}
    {a}
    {curvegroup Rectangle1 576 bezier
     {{cc
       {f 8192}
       {px x44828000
        {0 0}
        {x443f0000 x4488c000}
        {0 0}
        {0 0}
        {x449b4000 x44888000}
        {0 0}
        {0 0}
        {x44aac000 x44268000}
        {0 0}
        {0 0}
        {x447d0000 x43c40000}
        {0 0}
        {0 0}
        {x441e8000 x44210000}
        {0 0}}}     idem}
     {t
      {{x44828000 x446d0000}}
      {{x44828000 x4448c000}}     0
      {{x44828000 0}}
      {{x44828000 0}}     0 0 0
      {{x44828000 0}}
      {{x44828000 1}}
      {{x44828000 1}}     1
      {{x44828000 0}}}
     {a spx x44800000 spy x44428000 sb 1 nv x40400000 view2 x40000000 view3 x40400000 ltn x44828000 ltm x44828000 tt x40e00000}}}}}}
  toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 tt 5 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 tt 6 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 tt 7 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
  toolbar_brush_hardness 0.200000003
  toolbar_source_transform_scale {1 1}
  toolbar_source_transform_center {320 240}
  colorOverlay 0
  lifetime_type "all frames"
  lifetime_start 1044
  lifetime_end 1044
  motionblur_shutter_offset_type centred
  source_translate_round false
  source_black_outside true
  name pentagon
  xpos -293
  ypos -768
 }
 Transform {
  rotate {{parent.Controller.Rotation i}}
  scale {{parent.Controller.BokehSize i}}
  center {1024 778}
  filter Mitchell
  name Transform2
  xpos -293
  ypos -717
 }
 Reformat {
  format "512 512 0 0 512 512 1 square_512"
  black_outside true
  name Reformat11
  xpos -293
  ypos -647
 }
 NoOp {
  name five
  tile_color 0x1f00ffff
  xpos -293
  ypos -586
 }
 Switch {
  inputs 5
  which {{Iris i}}
  name Shape_Switch
  xpos -87
  ypos -512
 }
 Switch {
  inputs 2
  which {{userShape i}}
  name CustomSwitch
  xpos -87
  ypos -478
 }
 Blur {
  channels rgba
  size 0.01
  name softness1
  xpos -87
  ypos -434
 }
set N224b8890 [stack 0]
 Merge2 {
  inputs 2
  operation in
  name Merge2
  xpos -330
  ypos -428
 }
push $N224b8890
 Merge2 {
  inputs 2
  operation multiply
  name Merge1
  xpos -330
  ypos -391
 }
push $N224b8890
 Dissolve {
  inputs 2
  which 0.1
  name amt
  xpos -330
  ypos -332
 }
 Crop {
  box {0 0 512 512}
  reformat true
  name Crop3
  xpos -330
  ypos -293
 }
 Transform {
  scale {{parent.aspect} 1}
  center {256 256}
  name Transform9
  tile_color 0x7f00ffff
  xpos -333
  ypos -254
 }
push $N220b76e0
 Dot {
  name Dot19
  xpos -728
  ypos -838
 }
push $N220b76e0
push $N220b76e0
push $N21fa9e10
 Crop {
  box {0 0 {parent.Image.width i} {parent.Image.height i}}
  name Crop1
  xpos -638
  ypos -1553
 }
 Dot {
  name Dot11
  xpos -604
  ypos -1432
 }
set N22516390 [stack 0]
 ColorCorrect {
  inputs 1+1
  contrast {{Contrast_Boost.con_boost}}
  name ColorCorrect1
  xpos -580
  ypos -1394
 }
push $N22516390
 Switch {
  inputs 2
  which {{con_boost i}}
  name Switch1
  label contr
  xpos -638
  ypos -1341
 }
set N22535030 [stack 0]
 Saturation {
  inputs 1+1
  saturation {{Saturation_Boost1.Saturation_Boost}}
  name Saturation1
  xpos -562
  ypos -1245
 }
push $N22535030
 Switch {
  inputs 2
  which {{SatBoostCtrl i}}
  name Switch2
  label sat
  xpos -638
  ypos -1205
 }
 Dot {
  name Dot8
  xpos -604
  ypos -978
 }
set N2251afe0 [stack 0]
 Keyer {
  operation "luminance key"
  range {{parent.ranger.SpecRangeLow i} {parent.ranger.SpecRangeHigh i} 1 1}
  name Keyer2
  xpos -890
  ypos -927
 }
 Merge2 {
  inputs 2
  operation in
  name Merge6
  label "Z only"
  xpos -890
  ypos -848
 }
push $N2251afe0
 Grade {
  inputs 1+1
  white {{parent.specGainer.SpecularGain}}
  name Grade4
  xpos -890
  ypos -769
 }
push $N2251afe0
 Switch {
  inputs 2
  which {{specSwitch i}}
  name switch1
  label spec
  xpos -638
  ypos -775
 }
clone $C21fa9e10 {
  xpos -638
  ypos 161
  selected false
 }
 Convolve2 {
  inputs 2+1
  useGPUIfAvailable false
  name Convolve2
  xpos -330
  ypos 155
 }
set N225b8140 [stack 0]
 Dot {
  name Dot6
  xpos -296
  ypos 380
 }
set N22f10570 [stack 0]
 Keyer {
  operation "luminance key"
  range {0.04016392235 0.6462028021 1 1}
  name Keyer1
  xpos -672
  ypos 372
 }
 Dilate {
  size 1
  name Dilate1
  xpos -672
  ypos 406
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle5
  xpos -672
  ypos 440
 }
 Reformat {
  format "512 512 0 0 512 512 1 square_512"
  resize distort
  black_outside true
  name Reformat7
  xpos -672
  ypos 464
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge5
  xpos -782
  ypos 515
 }
 Grade {
  channels rgba
  white {{(Gainer.intensity)*4 i}}
  gamma 2
  white_clamp true
  name Grade1
  xpos -782
  ypos 541
 }
 Shuffle {
  green red
  blue red
  alpha red
  name Shuffle3
  xpos -782
  ypos 567
 }
 Reformat {
  type "to box"
  box_width {{parent.Image.width}}
  box_height {{parent.Image.height}}
  box_fixed true
  resize distort
  black_outside true
  name Reformat9
  xpos -782
  ypos 590
 }
 Merge2 {
  inputs 2
  operation in
  name Merge8
  label "Z only"
  xpos -644
  ypos 584
 }
push $N22f10570
 Grade {
  inputs 1+1
  channels rgba
  white {{Gainer.intensity*2 i}}
  gamma {{Gainer.intensity*2 i}}
  black_clamp false
  name Grade2
  xpos -534
  ypos 590
 }
push $N22f10570
 Dissolve {
  inputs 2+1
  which {{twinkle}}
  name Dissolve2
  xpos -330
  ypos 584
 }
clone $C21fa9e10 {
  xpos -330
  ypos 795
  selected false
 }
set N22fb0410 [stack 0]
 Dot {
  name Dot13
  xpos -296
  ypos 857
 }
set N22fbf8f0 [stack 0]
 Shuffle {
  green black
  blue black
  alpha black
  name red
  xpos -434
  ypos 918
 }
 Transform {
  translate {{aberration_offset.Aberration i} 0}
  center {1024 778}
  black_outside false
  name Transform7
  xpos -434
  ypos 944
 }
push $N22fbf8f0
 Shuffle {
  red black
  blue black
  alpha black
  name green
  xpos -330
  ypos 918
 }
 Merge2 {
  inputs 2
  operation max
  name Merge3
  xpos -391
  ypos 980
 }
push $N22fbf8f0
 Shuffle {
  red black
  green black
  alpha black
  name blue
  xpos -545
  ypos 918
 }
 Transform {
  translate {{-1*aberration_offset.Aberration i} 0}
  center {1024 778}
  black_outside false
  name Transform8
  xpos -545
  ypos 944
 }
 Merge2 {
  inputs 2
  operation max
  name Merge4
  xpos -483
  ypos 1020
 }
set N2301b940 [stack 0]
push $N22fbf8f0
 Dot {
  name Dot3
  xpos -127
  ypos 857
 }
 GodRays {
  channels {rgba.red -rgba.green rgba.blue none}
  scale {{abs(parent.radial_abr.rad_abr/20)+1 i}}
  center {{parent.Reformat13.box_width/2 i} {parent.Reformat13.box_height/2 i}}
  name Radial_Abbr
  tile_color 0x36252bff
  xpos -161
  ypos 1014
 }
set N230301c0 [stack 0]
 Merge2 {
  inputs 2
  operation max
  name Merge9
  xpos -308
  ypos 1020
 }
push $N2301b940
 Dot {
  name Dot15
  xpos -449
  ypos 1071
 }
push $N230301c0
 Dot {
  name Dot7
  xpos -127
  ypos 1071
 }
 Switch {
  inputs 3
  which {{CAbr i}}
  name CAbr_Type
  xpos -308
  ypos 1067
 }
push $N22fb0410
 Dot {
  name Dot4
  xpos -640
  ypos 799
 }
 Dot {
  name Dot14
  xpos -640
  ypos 1136
 }
 Dissolve {
  inputs 2+1
  which {{chromAbr i}}
  name Dissolve1
  xpos -308
  ypos 1126
 }
clone $C21fa9e10 {
  xpos -308
  ypos 1164
  selected false
 }
 Dissolve {
  inputs 2+1
  which 1
  name Dissolve3
  xpos -308
  ypos 1248
 }
 Switch {
  inputs 2
  which {{ViewAlpha i}}
  name viewMode
  xpos -308
  ypos 1331
 }
 ShuffleCopy {
  inputs 2
  name ShuffleCopy1
  xpos -308
  ypos 1497
 }
 Output {
  name Output1
  xpos -308
  ypos 1636
 }
 NoOp {
  inputs 0
  name specGainer
  xpos -1014
  ypos -767
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 SpecularGain l "Specular Gain" t "Adjust the range of\nthe specular highlughts to be boosted." R 1 10}
  SpecularGain 1.5
 }
 NoOp {
  inputs 0
  name Gainer
  xpos -601
  ypos 510
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 intensity t "Intensity of the twinkle effect."}
  intensity 0.09
 }
push $N225b8140
 Viewer {
  frame_range 1-100
  viewerProcess None
  input_process_node LUT_FTHM
  name Viewer1
  selected true
  xpos -1757
  ypos -1684
 }
end_group
set N21f3d890 [stack 0]
Dot {
 name Dot429
 selected true
 xpos -6328
 ypos 7144
}
Blur {
 size 100
 name Blur8
 selected true
 xpos -6362
 ypos 9136
}
push $N21345360
Dot {
 name Dot430
 selected true
 xpos -5789
 ypos 8251
}
Dot {
 name Dot431
 selected true
 xpos -6017
 ypos 8251
}
push $N1fa82100
Dot {
 name Dot420
 selected true
 xpos -4320
 ypos 7632
}
Dot {
 name Dot432
 selected true
 xpos -3776
 ypos 7632
}
Dot {
 name Dot24
 selected true
 xpos -3776
 ypos 8342
}
Dot {
 name Dot434
 selected true
 xpos -4926
 ypos 8342
}
Blur {
 size 100
 name Blur6
 selected true
 xpos -4960
 ypos 8671
}
Dot {
 name Dot435
 selected true
 xpos -4926
 ypos 8709
}
push $N21345360
Dot {
 name Dot436
 selected true
 xpos -5235
 ypos 8339
}
Dot {
 name Dot437
 selected true
 xpos -5235
 ypos 8426
}
set N231177d0 [stack 0]
Dot {
 name Dot438
 selected true
 xpos -5398
 ypos 8426
}
set N2311c2d0 [stack 0]
Dot {
 name Dot439
 selected true
 xpos -5577
 ypos 8426
}
Group {
 name apDespill3
 help "apDespill v1.0 by Adrian Pueyo\n\nGizmo to despill an image, with options to despill any hue (and not only the primaries), select different algorithms for des/respilling, and protect tones from the despill.\n\nIf you just want a basic despill, its default values should already be enough and the tool will avoid any extra calculations.\n\nadrianpueyo.com, 2014-2017"
 onCreate "n = nuke.thisNode()\nn\['tolerance'].setRange(0,2)\nn\['prot1_tolerance'].setFlag(0x00000004)\nn\['prot1_effect'].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nif k.name() == \"color\":\n    if k.getValue() == 0:\n        n\[\"custom_weight\"].setLabel(\"green - blue\")\n    elif k.getValue() == 1:\n        n\[\"custom_weight\"].setLabel(\"red - blue\")\n    elif k.getValue() == 2:\n        n\[\"custom_weight\"].setLabel(\"red - green\")\n    n\[\"pick\"].setVisible(k.getValue() == 3)\nelif k.name() == \"mode\":\n    n\[\"custom_weight\"].setVisible(n\[\"mode\"].getValue()==3)\nelif k.name() in \[\"out\",\"output_alpha\"]:\n    n\[\"respill_math\"].setEnabled(n\[\"out\"].getValue()==0 or n\[\"output_alpha\"].getValue()==1)\n    n\[\"respill_color\"].setEnabled(n\[\"out\"].getValue()==0)\nelif k.name() == \"prot1_activate\":\n    protA = n\[\"prot1_activate\"].value()\n    n\[\"prot1_preview\"].setEnabled(protA)\n    n\[\"prot1\"].setVisible(protA)\n    n\[\"prot1_tolerance\"].setVisible(protA)\n    n\[\"prot1_falloff\"].setVisible(protA)\n    n\[\"prot1_effect\"].setVisible(protA)"
 tile_color 0x8b8b8bff
 selected true
 xpos -5611
 ypos 8469
 addUserKnob {20 apDespill}
 addUserKnob {6 pick_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {41 "Local GPU: " T apDespillKernel.gpuName}
 addUserKnob {41 "Use GPU if Available" T apDespillKernel.useGPUIfAvailable}
 addUserKnob {41 vectorize l "Vectorize on CPU" -STARTLINE T apDespillKernel.vectorize}
 addUserKnob {26 ""}
 addUserKnob {4 color t "Select a primary as a starting point, or custom to show RGB controls to select any color." M {red green blue custom ""}}
 color green
 addUserKnob {18 pick +HIDDEN}
 pick {0 0 0}
 addUserKnob {6 pick_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 pick_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 pick_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 dfg_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {4 out l output t "Quick switch to output the despilled image or the substracted one." M {despill spill}}
 addUserKnob {6 output_alpha l "output spill matte in alpha" t "Output the spill luminance in the alpha channel." -STARTLINE}
 addUserKnob {4 mode l "despill math" t "average = avg of other two channels\nmaximum = max of other two channels\nminimum = min of other two channels\ncustom = select custom weights" M {average maximum minimum custom}}
 addUserKnob {7 custom_weight l "red - blue" t "-1 = only capped by the first channel\n0 = capped by avg of both\n1 = only capped by the second channel" -STARTLINE +HIDDEN R -1 1}
 addUserKnob {7 hue_offset l "hue offset" t "Rotate the despill vectors to despill an arbitrary tone other than the primaries.\nNote: A rotation of +-120 degrees is the same as selecting another color channel." R -180 180}
 addUserKnob {7 tolerance t "Use this to multiply the hue tolerance (the limiter value). You can move it all the way down to 0 to completely remove a hue from your image." R 0 2}
 tolerance 1
 addUserKnob {6 prot1_activate l "protect tones" t "Enable controls to select tones to protect from despilling." +STARTLINE}
 addUserKnob {6 prot1_preview l preview t "Output the protected tones." -STARTLINE +DISABLED}
 addUserKnob {18 prot1 l protect t "Pick the central hue to protect.\n(ctrl/cmd+alt+click)" +HIDDEN}
 prot1 {0 0 0}
 addUserKnob {6 prot1_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 prot1_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 prot1_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 prot1_tolerance l tolerance t "Amount of hues to include in the selection." +HIDDEN}
 prot1_tolerance 0.2
 addUserKnob {7 prot1_falloff l falloff t "Falloff for the hue selection. A higher falloff will make hues apart from the picked one lose weight more quickly." +HIDDEN R 0 4}
 prot1_falloff 2
 addUserKnob {7 prot1_effect l effect t "Multiplier for the hue protection, and for the spill limit value." +HIDDEN R 0 10}
 prot1_effect 1
 addUserKnob {26 respill_divider l "" +STARTLINE}
 addUserKnob {4 respill_math l "respill math" t "Settings for the way of desaturating the spill before adding it back." M {"Rec 709" "Ccir 601" Average Maximum "" ""}}
 addUserKnob {18 respill_color l "respill color" t "RGB multiplier for the desaturated spill when adding it back.\n\nNote: if used on non-degrained plates (which should be avoided anyway), any value other than 1 here will most likely produce grain artifacts." R 0 4}
 respill_color {0.44 0.28 0.09}
 addUserKnob {6 respill_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 respill_color_panelDropped true
 addUserKnob {6 respill_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 respill_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {41 maskChannelMask l mask T Merge.maskChannelMask}
 addUserKnob {41 inject -STARTLINE T Merge.inject}
 addUserKnob {41 invert_mask l invert -STARTLINE T Merge.invert_mask}
 addUserKnob {41 fringe -STARTLINE T Merge.fringe}
 addUserKnob {41 mix T Merge.mix}
 addUserKnob {26 version_author l "" t "apDespill v1.0\n14 March, 2017" +STARTLINE T "<span style=\"color:#666\"><br/><b>apDespill v1.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2014-2017</span>"}
 addUserKnob {20 GPU_Settings l "GPU Settings"}
 addUserKnob {41 maxGPUMemory l "Percentage of GPU memory to use" T apDespillKernel.maxGPUMemory}
 addUserKnob {41 maxTileLines l "Percentage of image height per tile" T apDespillKernel.maxTileLines}
}
 Input {
  inputs 0
  name Inputmask
  selected true
  xpos 339
  ypos -580
  number 1
 }
 Input {
  inputs 0
  name Inputimg
  selected true
  xpos 449
  ypos -608
 }
set N2313ca10 [stack 0]
 Shuffle {
  name Shuffle
  selected true
  xpos 559
  ypos -608
  disable {{"\[exists parent.input0]"}}
 }
 BlinkScript {
  ProgramGroup 1
  KernelDescription "2 \"apDespillKernel\" iterate pixelWise 86d17838f15464a9e9273cd415388c19006f9163a6efd15e7ad521c828dc89ac 2 \"src\" Read Point \"dst\" Write Point 17 \"limit\" Float 1 AACAPw== \"shift\" Float 1 AAAAAA== \"weights\" Float 1 AAAAAA== \"outmode\" Int 1 AAAAAA== \"output_alpha\" Int 1 AAAAAA== \"clr\" Int 1 AAAAAA== \"mode\" Int 1 AAAAAA== \"respill_math\" Int 1 AAAAAA== \"respill_color\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"prot1_on\" Int 1 AAAAAA== \"prot1_preview\" Int 1 AAAAAA== \"prot1\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"prot1_tolerance\" Float 1 AAAAAA== \"prot1_mult\" Float 1 AAAAAA== \"prot1_falloff\" Float 1 AAAAAA== \"lumaHueShift\" Int 1 AAAAAA== \"pickSpill\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== 17 \"limit\" 1 1 \"shift\" 1 1 \"weights\" 1 1 \"outmode\" 1 1 \"output_alpha\" 1 1 \"clr\" 1 1 \"mode\" 1 1 \"respill_math\" 1 1 \"respill_color\" 4 1 \"prot1_on\" 1 1 \"prot1_preview\" 1 1 \"prot1\" 3 1 \"prot1_tolerance\" 1 1 \"prot1_mult\" 1 1 \"prot1_falloff\" 1 1 \"lumaHueShift\" 1 1 \"pickSpill\" 3 1 3 \"_usePicked\" Int 1 1 AAAAAA== \"_clr\" Int 1 1 AAAAAA== \"_ret\" Int 1 1 AAAAAA=="
  kernelSource "//---------------------------------------------------------\n// apDespillKernel - apDespill v1.0 by Adrian Pueyo\n//\n// Despill an image, with options to despill any hue (and\n// not only the primaries), select different algorithms for\n// des/respilling, and protect tones from the despill.\n//\n// adrianpueyo.com, 2014-2017\n// ---------------------------------------------------------\n\nstatic inline float y_convert_ccir601(const float4 in)\{\n  return in.x * 0.299f + in.y * 0.587f + in.z * 0.114f;\n\}\n\nstatic inline float y_convert_rec709(const float4 in)\{\n  return in.x * 0.2125f + in.y * 0.7154f + in.z * 0.0721f;\n\}\n\nstatic inline float4 hueShift(const float4 in, const float H)\{\n  if(H==0.0f)\{\n    return in;\n  \}else\{\n    float U = cos(H*PI/180);\n    float W = sin(H*PI/180);\n    float3 ret;\n    ret.x = (.299+.701*U+.168*W)*in.x + (.587-.587*U+.330*W)*in.y + (.114-.114*U-.497*W)*in.z;\n    ret.y = (.299-.299*U-.328*W)*in.x + (.587+.413*U+.035*W)*in.y + (.114-.114*U+.292*W)*in.z;\n    ret.z = (.299-.3*U+1.25*W)*in.x + (.587-.588*U-1.05*W)*in.y + (.114+.886*U-.203*W)*in.z;\n    return float4(ret.x,ret.y,ret.z,in\[3]);\n  \}\n\}\n\nstatic inline float4 hueRotate(const float4 in, const float H)\{\n  if(H==0.0f)\{\n    return in;\n  \}else\{\n    float cosH = cos(H*PI/180);\n    float sinH = sin(H*PI/180);\n    float3 ret;\n    ret.x = (in.x+in.y+in.z)*(1-cosH)/3 + in.x*cosH + (-in.y/sqrt(3.0f)+in.z/sqrt(3.0f))*sinH;\n    ret.y = (in.x+in.y+in.z)*(1-cosH)/3 + in.y*cosH + (in.x/sqrt(3.0f)-in.z/sqrt(3.0f))*sinH;\n    ret.z = (in.x+in.y+in.z)*(1-cosH)/3 + in.z*cosH + (-in.x/sqrt(3.0f)+in.y/sqrt(3.0f))*sinH;\n    return float4(ret.x,ret.y,ret.z,in\[3]);\n  \}\n\}\n\nfloat3 vecToPlane(float3 v1, float3 v2 = float3(1.0f,1.0f,1.0f))\{\n  float3 v1onv2;\n  v1onv2 = v2 * float((float(dot(v2,v1))/float(dot(v2,v2)))); //Projection of vector on another (plane's normal)\n  return v1-v1onv2; //Projection of vector on plane\n\}\n\nstatic inline float colorAngle(const float3 v1, const float3 v2)\{\n  const float3 vN=float3(1.0f,1.0f,1.0f);\n  float ang = acos(float(dot(v1,v2))/float(sqrt(dot(v1,v1)*dot(v2,v2))));\n  float3 crs = cross(v1,v2);\n  if (dot(vN, crs) > 0) \{\n    ang = -ang;\n  \}\n  return ang;\n\}\n\nkernel apDespillKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src;\n  Image<eWrite> dst;\n\n  param:\n    float limit;\n    float shift;\n    float weights;\n    int outmode;//0=despill,1=spill\n    int output_alpha;\n    int clr; //0=red,1=green,2=blue\n    int mode; //0=average,1=maximum,2=minimum,3=custom\n    int respill_math; //0=Rec709,1=Ccir601,2=Avg,3=Max\n    float4 respill_color;\n    int prot1_on;\n    int prot1_preview;\n    float3 prot1;\n    float prot1_tolerance;\n    float prot1_mult;\n    float prot1_falloff;\n    int lumaHueShift;//If disabled, the hue is just rotated without the luma coefficients\n    float3 pickSpill;\n  local:\n    int _usePicked;\n    int _clr;\n    int _ret;\n\n  void define() \{\n    defineParam(limit, \"limit\", 1.0f);\n    defineParam(shift, \"shift\", 0.0f);\n  \}\n\n  void init() \{\n    _ret = 0;\n    if(clr!=3)\{//red green or blue\n      _usePicked = 0;\n      _clr = clr;\n    \}else if(pickSpill.x==pickSpill.y && pickSpill.x==pickSpill.z)\{\n      _ret = 1;//if \"custom\" selected but has a gray value, avoid any calculations\n    \}else\{\n      _usePicked = 1;\n      _clr = 0;\n    \}\n  \}\n\n  void process() \{\n\n    if(_ret == 1)\{ dst()=src(); return; \}//Avoid any calculations if no despill selected\n    //0. Calculate autoShift if picked spill is not 0\n    float autoShift = 0.0f;\n    if(_usePicked==1)\{\n      float3 vNorm = float3(1.0f,1.0f,1.0f);\n      autoShift = colorAngle(vecToPlane(pickSpill,vNorm),vecToPlane(float3(1.0f,0.0f,0.0f),vNorm));\n      autoShift = autoShift*180/PI;//to deg\n    \}\n\n    //1. HueShift IN\n    float4 despilled;\n    if (lumaHueShift==1)\{\n      despilled = hueShift(src(),shift-autoShift);\n    \}else\{\n      despilled = hueRotate(src(),shift-autoShift);\n    \}\n\n    //2. Calculate the limit\n    float resultLimit = 0.0f;\n    int2 others;\n    if(_clr==0)\{//If red (and if _usePicked, also set red)\n      others = int2(1,2);\n    \}else if(_clr==1)\{\n      others=int2(0,2);\n    \}else if(_clr==2)\{\n      others=int2(0,1);\n    \}\n\n    if(mode==0)\{//average\n      resultLimit = (despilled\[others\[0]]+despilled\[others\[1]])/2;\n    \}else if(mode==1)\{//max\n      resultLimit = max(despilled\[others\[0]],despilled\[others\[1]]);\n    \}else if(mode==2)\{//min\n      resultLimit = min(despilled\[others\[0]],despilled\[others\[1]]);\n    \}else\{//custom\n      resultLimit = despilled\[others\[0]]*weights+despilled\[others\[1]]*(1-weights);\n    \}\n\n    //3. Protect tones\n    float prot1_result;\n    if(prot1_on==1&&(prot1\[0]!=prot1\[1]||prot1\[0]!=prot1\[2]||prot1\[1]!=prot1\[2]))\{\n      float cos_prot1_angle;\n      cos_prot1_angle = (src(0)*prot1\[0]+src(1)*prot1\[1]+src(2)*prot1\[2]) / (sqrt(prot1\[0]*prot1\[0]+prot1\[1]*prot1\[1]+prot1\[2]*prot1\[2]) * sqrt(src(0)*src(0)+src(1)*src(1)+src(2)*src(2)));\n      prot1_result = pow(clamp(cos_prot1_angle,0.0f,1.0f),1/pow(prot1_tolerance,prot1_falloff));\n      resultLimit = resultLimit*(1+prot1_result*prot1_mult);\n    \}\n    \n\n    //4. Calculate the despill and return the hue shift\n    for (int component = 0; component < dst.kComps; component++)\{\n      despilled\[component] = component==_clr?min(despilled\[component],resultLimit*limit):despilled\[component];\n    \}\n    if (lumaHueShift==1)\{\n      despilled = hueShift(despilled,-shift+autoShift);\n    \}else\{\n      despilled = hueRotate(despilled,-shift+autoShift);\n    \}\n\n    //5. Respill/restore despill values\n    float luma;\n    float4 spill = src()-despilled;\n    if(respill_math==0)\{\n      luma = y_convert_rec709(spill);\n    \}else if(respill_math==1)\{\n      luma = y_convert_ccir601(spill);\n    \}else if(respill_math==2)\{\n      luma = (spill\[0]+spill\[1]+spill\[2])/3;\n    \}else\{\n      luma = max(max(spill\[0],spill\[1]),spill\[2]);\n    \}\n\n    //6. Output (options)\n    if(prot1_preview==1 && prot1_on==1)\{\n      dst() = src()*clamp(prot1_result*prot1_mult,0.0f,1.0f);\n    \}else if(outmode==0)\{\n      dst() = despilled+luma*respill_color;\n      if(output_alpha==0)\{\n        dst(3)=src(3);\n      \}else\{\n        dst(3)=luma;\n      \}\n    \}else\{\n      if(output_alpha==0)\{\n        spill\[3]=src(3);\n      \}else\{\n        spill\[3]=luma;\n      \}\n      dst() = spill;\n    \}\n    //dst() = hueRotate(src(),shift-autoShift);\n    //dst() = autoShift;\n  \}\n\};"
  rebuild ""
  apDespillKernel_limit {{parent.tolerance}}
  apDespillKernel_shift {{parent.hue_offset}}
  apDespillKernel_weights {{(parent.custom_weight+1)/2}}
  apDespillKernel_outmode {{parent.out}}
  apDespillKernel_output_alpha {{parent.output_alpha}}
  apDespillKernel_clr {{parent.color}}
  apDespillKernel_mode {{parent.mode}}
  apDespillKernel_respill_math {{parent.respill_math}}
  apDespillKernel_respill_color {{parent.respill_color.r} {parent.respill_color.g} {parent.respill_color.b} 1}
  apDespillKernel_prot1_on {{parent.prot1_activate}}
  apDespillKernel_prot1_preview {{parent.prot1_preview}}
  apDespillKernel_prot1 {{parent.prot1} {parent.prot1} {parent.prot1}}
  apDespillKernel_prot1_tolerance {{parent.prot1_tolerance}}
  apDespillKernel_prot1_mult {{parent.prot1_effect}}
  apDespillKernel_prot1_falloff {{parent.prot1_falloff}}
  apDespillKernel_pickSpill {{parent.pick} {parent.pick} {parent.pick}}
  rebuild_finalise ""
  maxGPUMemory 60
  maxTileLines 8
  name apDespillKernel
  selected true
  xpos 559
  ypos -584
 }
push $N2313ca10
 Merge2 {
  inputs 2+1
  operation copy
  bbox B
  name Merge
  selected true
  xpos 449
  ypos -580
 }
 Output {
  name Output
  selected true
  xpos 449
  ypos -552
 }
end_group
Dot {
 name Dot440
 selected true
 xpos -5577
 ypos 8711
}
push $N2311c2d0
Group {
 name apDespill4
 help "apDespill v1.0 by Adrian Pueyo\n\nGizmo to despill an image, with options to despill any hue (and not only the primaries), select different algorithms for des/respilling, and protect tones from the despill.\n\nIf you just want a basic despill, its default values should already be enough and the tool will avoid any extra calculations.\n\nadrianpueyo.com, 2014-2017"
 onCreate "n = nuke.thisNode()\nn\['tolerance'].setRange(0,2)\nn\['prot1_tolerance'].setFlag(0x00000004)\nn\['prot1_effect'].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nif k.name() == \"color\":\n    if k.getValue() == 0:\n        n\[\"custom_weight\"].setLabel(\"green - blue\")\n    elif k.getValue() == 1:\n        n\[\"custom_weight\"].setLabel(\"red - blue\")\n    elif k.getValue() == 2:\n        n\[\"custom_weight\"].setLabel(\"red - green\")\n    n\[\"pick\"].setVisible(k.getValue() == 3)\nelif k.name() == \"mode\":\n    n\[\"custom_weight\"].setVisible(n\[\"mode\"].getValue()==3)\nelif k.name() in \[\"out\",\"output_alpha\"]:\n    n\[\"respill_math\"].setEnabled(n\[\"out\"].getValue()==0 or n\[\"output_alpha\"].getValue()==1)\n    n\[\"respill_color\"].setEnabled(n\[\"out\"].getValue()==0)\nelif k.name() == \"prot1_activate\":\n    protA = n\[\"prot1_activate\"].value()\n    n\[\"prot1_preview\"].setEnabled(protA)\n    n\[\"prot1\"].setVisible(protA)\n    n\[\"prot1_tolerance\"].setVisible(protA)\n    n\[\"prot1_falloff\"].setVisible(protA)\n    n\[\"prot1_effect\"].setVisible(protA)"
 tile_color 0x8b8b8bff
 selected true
 xpos -5432
 ypos 8581
 addUserKnob {20 apDespill}
 addUserKnob {6 pick_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {41 "Local GPU: " T apDespillKernel.gpuName}
 addUserKnob {41 "Use GPU if Available" T apDespillKernel.useGPUIfAvailable}
 addUserKnob {41 vectorize l "Vectorize on CPU" -STARTLINE T apDespillKernel.vectorize}
 addUserKnob {26 ""}
 addUserKnob {4 color t "Select a primary as a starting point, or custom to show RGB controls to select any color." M {red green blue custom ""}}
 color custom
 addUserKnob {18 pick}
 pick {0.0008426482673 0.2897270024 0.02703214809}
 addUserKnob {6 pick_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 pick_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 pick_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 dfg_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {4 out l output t "Quick switch to output the despilled image or the substracted one." M {despill spill}}
 addUserKnob {6 output_alpha l "output spill matte in alpha" t "Output the spill luminance in the alpha channel." -STARTLINE}
 addUserKnob {4 mode l "despill math" t "average = avg of other two channels\nmaximum = max of other two channels\nminimum = min of other two channels\ncustom = select custom weights" M {average maximum minimum custom}}
 addUserKnob {7 custom_weight l "red - blue" t "-1 = only capped by the first channel\n0 = capped by avg of both\n1 = only capped by the second channel" -STARTLINE +HIDDEN R -1 1}
 addUserKnob {7 hue_offset l "hue offset" t "Rotate the despill vectors to despill an arbitrary tone other than the primaries.\nNote: A rotation of +-120 degrees is the same as selecting another color channel." R -180 180}
 hue_offset 10
 addUserKnob {7 tolerance t "Use this to multiply the hue tolerance (the limiter value). You can move it all the way down to 0 to completely remove a hue from your image." R 0 2}
 tolerance 1
 addUserKnob {6 prot1_activate l "protect tones" t "Enable controls to select tones to protect from despilling." +STARTLINE}
 addUserKnob {6 prot1_preview l preview t "Output the protected tones." -STARTLINE +DISABLED}
 addUserKnob {18 prot1 l protect t "Pick the central hue to protect.\n(ctrl/cmd+alt+click)" +HIDDEN}
 prot1 {0.369279176 0.2512443364 0.2140436471}
 addUserKnob {6 prot1_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 prot1_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 prot1_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 prot1_tolerance l tolerance t "Amount of hues to include in the selection." +HIDDEN}
 prot1_tolerance 0.2
 addUserKnob {7 prot1_falloff l falloff t "Falloff for the hue selection. A higher falloff will make hues apart from the picked one lose weight more quickly." +HIDDEN R 0 4}
 prot1_falloff 2
 addUserKnob {7 prot1_effect l effect t "Multiplier for the hue protection, and for the spill limit value." +HIDDEN R 0 10}
 prot1_effect 1
 addUserKnob {26 respill_divider l "" +STARTLINE}
 addUserKnob {4 respill_math l "respill math" t "Settings for the way of desaturating the spill before adding it back." M {"Rec 709" "Ccir 601" Average Maximum "" ""}}
 addUserKnob {18 respill_color l "respill color" t "RGB multiplier for the desaturated spill when adding it back.\n\nNote: if used on non-degrained plates (which should be avoided anyway), any value other than 1 here will most likely produce grain artifacts." R 0 4}
 respill_color {0.493567 0.138442 -0.025575}
 addUserKnob {6 respill_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 respill_color_panelDropped true
 addUserKnob {6 respill_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 respill_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {41 maskChannelMask l mask T Merge.maskChannelMask}
 addUserKnob {41 inject -STARTLINE T Merge.inject}
 addUserKnob {41 invert_mask l invert -STARTLINE T Merge.invert_mask}
 addUserKnob {41 fringe -STARTLINE T Merge.fringe}
 addUserKnob {41 mix T Merge.mix}
 addUserKnob {26 version_author l "" t "apDespill v1.0\n14 March, 2017" +STARTLINE T "<span style=\"color:#666\"><br/><b>apDespill v1.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2014-2017</span>"}
 addUserKnob {20 GPU_Settings l "GPU Settings"}
 addUserKnob {41 maxGPUMemory l "Percentage of GPU memory to use" T apDespillKernel.maxGPUMemory}
 addUserKnob {41 maxTileLines l "Percentage of image height per tile" T apDespillKernel.maxTileLines}
}
 Input {
  inputs 0
  name Inputmask
  selected true
  xpos 339
  ypos -580
  number 1
 }
 Input {
  inputs 0
  name Inputimg
  selected true
  xpos 449
  ypos -608
 }
set N231ad410 [stack 0]
 Shuffle {
  name Shuffle
  selected true
  xpos 559
  ypos -608
  disable {{"\[exists parent.input0]"}}
 }
 BlinkScript {
  ProgramGroup 1
  KernelDescription "2 \"apDespillKernel\" iterate pixelWise 86d17838f15464a9e9273cd415388c19006f9163a6efd15e7ad521c828dc89ac 2 \"src\" Read Point \"dst\" Write Point 17 \"limit\" Float 1 AACAPw== \"shift\" Float 1 AAAAAA== \"weights\" Float 1 AAAAAA== \"outmode\" Int 1 AAAAAA== \"output_alpha\" Int 1 AAAAAA== \"clr\" Int 1 AAAAAA== \"mode\" Int 1 AAAAAA== \"respill_math\" Int 1 AAAAAA== \"respill_color\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"prot1_on\" Int 1 AAAAAA== \"prot1_preview\" Int 1 AAAAAA== \"prot1\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"prot1_tolerance\" Float 1 AAAAAA== \"prot1_mult\" Float 1 AAAAAA== \"prot1_falloff\" Float 1 AAAAAA== \"lumaHueShift\" Int 1 AAAAAA== \"pickSpill\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== 17 \"limit\" 1 1 \"shift\" 1 1 \"weights\" 1 1 \"outmode\" 1 1 \"output_alpha\" 1 1 \"clr\" 1 1 \"mode\" 1 1 \"respill_math\" 1 1 \"respill_color\" 4 1 \"prot1_on\" 1 1 \"prot1_preview\" 1 1 \"prot1\" 3 1 \"prot1_tolerance\" 1 1 \"prot1_mult\" 1 1 \"prot1_falloff\" 1 1 \"lumaHueShift\" 1 1 \"pickSpill\" 3 1 3 \"_usePicked\" Int 1 1 AAAAAA== \"_clr\" Int 1 1 AAAAAA== \"_ret\" Int 1 1 AAAAAA=="
  kernelSource "//---------------------------------------------------------\n// apDespillKernel - apDespill v1.0 by Adrian Pueyo\n//\n// Despill an image, with options to despill any hue (and\n// not only the primaries), select different algorithms for\n// des/respilling, and protect tones from the despill.\n//\n// adrianpueyo.com, 2014-2017\n// ---------------------------------------------------------\n\nstatic inline float y_convert_ccir601(const float4 in)\{\n  return in.x * 0.299f + in.y * 0.587f + in.z * 0.114f;\n\}\n\nstatic inline float y_convert_rec709(const float4 in)\{\n  return in.x * 0.2125f + in.y * 0.7154f + in.z * 0.0721f;\n\}\n\nstatic inline float4 hueShift(const float4 in, const float H)\{\n  if(H==0.0f)\{\n    return in;\n  \}else\{\n    float U = cos(H*PI/180);\n    float W = sin(H*PI/180);\n    float3 ret;\n    ret.x = (.299+.701*U+.168*W)*in.x + (.587-.587*U+.330*W)*in.y + (.114-.114*U-.497*W)*in.z;\n    ret.y = (.299-.299*U-.328*W)*in.x + (.587+.413*U+.035*W)*in.y + (.114-.114*U+.292*W)*in.z;\n    ret.z = (.299-.3*U+1.25*W)*in.x + (.587-.588*U-1.05*W)*in.y + (.114+.886*U-.203*W)*in.z;\n    return float4(ret.x,ret.y,ret.z,in\[3]);\n  \}\n\}\n\nstatic inline float4 hueRotate(const float4 in, const float H)\{\n  if(H==0.0f)\{\n    return in;\n  \}else\{\n    float cosH = cos(H*PI/180);\n    float sinH = sin(H*PI/180);\n    float3 ret;\n    ret.x = (in.x+in.y+in.z)*(1-cosH)/3 + in.x*cosH + (-in.y/sqrt(3.0f)+in.z/sqrt(3.0f))*sinH;\n    ret.y = (in.x+in.y+in.z)*(1-cosH)/3 + in.y*cosH + (in.x/sqrt(3.0f)-in.z/sqrt(3.0f))*sinH;\n    ret.z = (in.x+in.y+in.z)*(1-cosH)/3 + in.z*cosH + (-in.x/sqrt(3.0f)+in.y/sqrt(3.0f))*sinH;\n    return float4(ret.x,ret.y,ret.z,in\[3]);\n  \}\n\}\n\nfloat3 vecToPlane(float3 v1, float3 v2 = float3(1.0f,1.0f,1.0f))\{\n  float3 v1onv2;\n  v1onv2 = v2 * float((float(dot(v2,v1))/float(dot(v2,v2)))); //Projection of vector on another (plane's normal)\n  return v1-v1onv2; //Projection of vector on plane\n\}\n\nstatic inline float colorAngle(const float3 v1, const float3 v2)\{\n  const float3 vN=float3(1.0f,1.0f,1.0f);\n  float ang = acos(float(dot(v1,v2))/float(sqrt(dot(v1,v1)*dot(v2,v2))));\n  float3 crs = cross(v1,v2);\n  if (dot(vN, crs) > 0) \{\n    ang = -ang;\n  \}\n  return ang;\n\}\n\nkernel apDespillKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src;\n  Image<eWrite> dst;\n\n  param:\n    float limit;\n    float shift;\n    float weights;\n    int outmode;//0=despill,1=spill\n    int output_alpha;\n    int clr; //0=red,1=green,2=blue\n    int mode; //0=average,1=maximum,2=minimum,3=custom\n    int respill_math; //0=Rec709,1=Ccir601,2=Avg,3=Max\n    float4 respill_color;\n    int prot1_on;\n    int prot1_preview;\n    float3 prot1;\n    float prot1_tolerance;\n    float prot1_mult;\n    float prot1_falloff;\n    int lumaHueShift;//If disabled, the hue is just rotated without the luma coefficients\n    float3 pickSpill;\n  local:\n    int _usePicked;\n    int _clr;\n    int _ret;\n\n  void define() \{\n    defineParam(limit, \"limit\", 1.0f);\n    defineParam(shift, \"shift\", 0.0f);\n  \}\n\n  void init() \{\n    _ret = 0;\n    if(clr!=3)\{//red green or blue\n      _usePicked = 0;\n      _clr = clr;\n    \}else if(pickSpill.x==pickSpill.y && pickSpill.x==pickSpill.z)\{\n      _ret = 1;//if \"custom\" selected but has a gray value, avoid any calculations\n    \}else\{\n      _usePicked = 1;\n      _clr = 0;\n    \}\n  \}\n\n  void process() \{\n\n    if(_ret == 1)\{ dst()=src(); return; \}//Avoid any calculations if no despill selected\n    //0. Calculate autoShift if picked spill is not 0\n    float autoShift = 0.0f;\n    if(_usePicked==1)\{\n      float3 vNorm = float3(1.0f,1.0f,1.0f);\n      autoShift = colorAngle(vecToPlane(pickSpill,vNorm),vecToPlane(float3(1.0f,0.0f,0.0f),vNorm));\n      autoShift = autoShift*180/PI;//to deg\n    \}\n\n    //1. HueShift IN\n    float4 despilled;\n    if (lumaHueShift==1)\{\n      despilled = hueShift(src(),shift-autoShift);\n    \}else\{\n      despilled = hueRotate(src(),shift-autoShift);\n    \}\n\n    //2. Calculate the limit\n    float resultLimit = 0.0f;\n    int2 others;\n    if(_clr==0)\{//If red (and if _usePicked, also set red)\n      others = int2(1,2);\n    \}else if(_clr==1)\{\n      others=int2(0,2);\n    \}else if(_clr==2)\{\n      others=int2(0,1);\n    \}\n\n    if(mode==0)\{//average\n      resultLimit = (despilled\[others\[0]]+despilled\[others\[1]])/2;\n    \}else if(mode==1)\{//max\n      resultLimit = max(despilled\[others\[0]],despilled\[others\[1]]);\n    \}else if(mode==2)\{//min\n      resultLimit = min(despilled\[others\[0]],despilled\[others\[1]]);\n    \}else\{//custom\n      resultLimit = despilled\[others\[0]]*weights+despilled\[others\[1]]*(1-weights);\n    \}\n\n    //3. Protect tones\n    float prot1_result;\n    if(prot1_on==1&&(prot1\[0]!=prot1\[1]||prot1\[0]!=prot1\[2]||prot1\[1]!=prot1\[2]))\{\n      float cos_prot1_angle;\n      cos_prot1_angle = (src(0)*prot1\[0]+src(1)*prot1\[1]+src(2)*prot1\[2]) / (sqrt(prot1\[0]*prot1\[0]+prot1\[1]*prot1\[1]+prot1\[2]*prot1\[2]) * sqrt(src(0)*src(0)+src(1)*src(1)+src(2)*src(2)));\n      prot1_result = pow(clamp(cos_prot1_angle,0.0f,1.0f),1/pow(prot1_tolerance,prot1_falloff));\n      resultLimit = resultLimit*(1+prot1_result*prot1_mult);\n    \}\n    \n\n    //4. Calculate the despill and return the hue shift\n    for (int component = 0; component < dst.kComps; component++)\{\n      despilled\[component] = component==_clr?min(despilled\[component],resultLimit*limit):despilled\[component];\n    \}\n    if (lumaHueShift==1)\{\n      despilled = hueShift(despilled,-shift+autoShift);\n    \}else\{\n      despilled = hueRotate(despilled,-shift+autoShift);\n    \}\n\n    //5. Respill/restore despill values\n    float luma;\n    float4 spill = src()-despilled;\n    if(respill_math==0)\{\n      luma = y_convert_rec709(spill);\n    \}else if(respill_math==1)\{\n      luma = y_convert_ccir601(spill);\n    \}else if(respill_math==2)\{\n      luma = (spill\[0]+spill\[1]+spill\[2])/3;\n    \}else\{\n      luma = max(max(spill\[0],spill\[1]),spill\[2]);\n    \}\n\n    //6. Output (options)\n    if(prot1_preview==1 && prot1_on==1)\{\n      dst() = src()*clamp(prot1_result*prot1_mult,0.0f,1.0f);\n    \}else if(outmode==0)\{\n      dst() = despilled+luma*respill_color;\n      if(output_alpha==0)\{\n        dst(3)=src(3);\n      \}else\{\n        dst(3)=luma;\n      \}\n    \}else\{\n      if(output_alpha==0)\{\n        spill\[3]=src(3);\n      \}else\{\n        spill\[3]=luma;\n      \}\n      dst() = spill;\n    \}\n    //dst() = hueRotate(src(),shift-autoShift);\n    //dst() = autoShift;\n  \}\n\};"
  rebuild ""
  apDespillKernel_limit {{parent.tolerance}}
  apDespillKernel_shift {{parent.hue_offset}}
  apDespillKernel_weights {{(parent.custom_weight+1)/2}}
  apDespillKernel_outmode {{parent.out}}
  apDespillKernel_output_alpha {{parent.output_alpha}}
  apDespillKernel_clr {{parent.color}}
  apDespillKernel_mode {{parent.mode}}
  apDespillKernel_respill_math {{parent.respill_math}}
  apDespillKernel_respill_color {{parent.respill_color.r} {parent.respill_color.g} {parent.respill_color.b} 1}
  apDespillKernel_prot1_on {{parent.prot1_activate}}
  apDespillKernel_prot1_preview {{parent.prot1_preview}}
  apDespillKernel_prot1 {{parent.prot1} {parent.prot1} {parent.prot1}}
  apDespillKernel_prot1_tolerance {{parent.prot1_tolerance}}
  apDespillKernel_prot1_mult {{parent.prot1_effect}}
  apDespillKernel_prot1_falloff {{parent.prot1_falloff}}
  apDespillKernel_pickSpill {{parent.pick} {parent.pick} {parent.pick}}
  rebuild_finalise ""
  maxGPUMemory 60
  maxTileLines 8
  name apDespillKernel
  selected true
  xpos 559
  ypos -584
 }
push $N231ad410
 Merge2 {
  inputs 2+1
  operation copy
  bbox B
  name Merge
  selected true
  xpos 449
  ypos -580
 }
 Output {
  name Output
  selected true
  xpos 449
  ypos -552
 }
end_group
Keymix {
 inputs 3
 name Keymix2
 selected true
 xpos -5432
 ypos 8699
}
set N232022a0 [stack 0]
Merge2 {
 inputs 2
 operation minus
 name Min1
 selected true
 xpos -6051
 ypos 8705
}
Saturation {
 saturation 0
 mode Maximum
 name Saturation2
 selected true
 xpos -6051
 ypos 9096
}
Merge2 {
 inputs 2
 operation multiply
 name Merge77
 selected true
 xpos -6051
 ypos 9142
}
push $N232022a0
Merge2 {
 inputs 2
 operation plus
 name Plus
 selected true
 xpos -5432
 ypos 9142
}
Copy {
 inputs 2
 from0 rgba.alpha
 to0 rgba.alpha
 name Copy21
 selected true
 xpos -5432
 ypos 9268
}
Dot {
 name Dot441
 selected true
 xpos -5398
 ypos 9476
}
set N23224970 [stack 0]
Dot {
 name Dot442
 selected true
 xpos -5240
 ypos 9476
}
Keyer {
 operation "luminance key"
 range {0.1263359343 0.356190503 1 1}
 name Keyer2
 selected true
 xpos -5274
 ypos 9602
}
Dot {
 name Dot443
 selected true
 xpos -5240
 ypos 9677
}
push $N23224970
ColorLookup {
 lut {master {curve C 0 s0.8500000238 1 s0.8000000119}
   red {curve C 0 x0.5046741962 0.6194028854 x0.997045815 1}
   green {curve C 0 x0.4953257442 0.574626863 x1 1}
   blue {curve C 0 x0.498441875 0.597003758 x1 0.9925372601}
   alpha {}}
 name ColorLookup2
 selected true
 xpos -5432
 ypos 9545
 disable true
}
HueCorrect {
 hue {sat {curve 1 x1.345325947 1.350248814 x3 1 x4 1 1 1}
   lum {}
   red {}
   green {}
   blue {}
   r_sup {}
   g_sup {}
   b_sup {}
   sat_thrsh {}}
 name HueCorrect4
 selected true
 xpos -5432
 ypos 9571
 disable true
}
ColorCorrect {
 midtones.contrast 1.1
 name ColorCorrect14
 selected true
 xpos -5432
 ypos 9610
 disable true
}
Grade {
 inputs 1+1
 name Grade54
 selected true
 xpos -5432
 ypos 9673
 disable true
}
Grade {
 inputs 1+1
 multiply 1.65
 name Grade55
 selected true
 xpos -5432
 ypos 9829
 disable true
}
Premult {
 name Premult3
 selected true
 xpos -5432
 ypos 10031
}
push $N231177d0
Dot {
 name Dot444
 selected true
 xpos -5163
 ypos 8426
}
Group {
 name apDespill2
 help "apDespill v1.0 by Adrian Pueyo\n\nGizmo to despill an image, with options to despill any hue (and not only the primaries), select different algorithms for des/respilling, and protect tones from the despill.\n\nIf you just want a basic despill, its default values should already be enough and the tool will avoid any extra calculations.\n\nadrianpueyo.com, 2014-2017"
 onCreate "n = nuke.thisNode()\nn\['tolerance'].setRange(0,2)\nn\['prot1_tolerance'].setFlag(0x00000004)\nn\['prot1_effect'].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nif k.name() == \"color\":\n    if k.getValue() == 0:\n        n\[\"custom_weight\"].setLabel(\"green - blue\")\n    elif k.getValue() == 1:\n        n\[\"custom_weight\"].setLabel(\"red - blue\")\n    elif k.getValue() == 2:\n        n\[\"custom_weight\"].setLabel(\"red - green\")\n    n\[\"pick\"].setVisible(k.getValue() == 3)\nelif k.name() == \"mode\":\n    n\[\"custom_weight\"].setVisible(n\[\"mode\"].getValue()==3)\nelif k.name() in \[\"out\",\"output_alpha\"]:\n    n\[\"respill_math\"].setEnabled(n\[\"out\"].getValue()==0 or n\[\"output_alpha\"].getValue()==1)\n    n\[\"respill_color\"].setEnabled(n\[\"out\"].getValue()==0)\nelif k.name() == \"prot1_activate\":\n    protA = n\[\"prot1_activate\"].value()\n    n\[\"prot1_preview\"].setEnabled(protA)\n    n\[\"prot1\"].setVisible(protA)\n    n\[\"prot1_tolerance\"].setVisible(protA)\n    n\[\"prot1_falloff\"].setVisible(protA)\n    n\[\"prot1_effect\"].setVisible(protA)"
 tile_color 0x8b8b8bff
 selected true
 xpos -5197
 ypos 8625
 addUserKnob {20 apDespill}
 addUserKnob {6 pick_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {41 "Local GPU: " T apDespillKernel.gpuName}
 addUserKnob {41 "Use GPU if Available" T apDespillKernel.useGPUIfAvailable}
 addUserKnob {41 vectorize l "Vectorize on CPU" -STARTLINE T apDespillKernel.vectorize}
 addUserKnob {26 ""}
 addUserKnob {4 color t "Select a primary as a starting point, or custom to show RGB controls to select any color." M {red green blue custom ""}}
 color custom
 addUserKnob {18 pick}
 pick {-0.0008702277555 0.3032226264 0.02479553036}
 addUserKnob {6 pick_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 pick_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 pick_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 dfg_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {4 out l output t "Quick switch to output the despilled image or the substracted one." M {despill spill}}
 addUserKnob {6 output_alpha l "output spill matte in alpha" t "Output the spill luminance in the alpha channel." -STARTLINE}
 addUserKnob {4 mode l "despill math" t "average = avg of other two channels\nmaximum = max of other two channels\nminimum = min of other two channels\ncustom = select custom weights" M {average maximum minimum custom}}
 addUserKnob {7 custom_weight l "red - blue" t "-1 = only capped by the first channel\n0 = capped by avg of both\n1 = only capped by the second channel" -STARTLINE +HIDDEN R -1 1}
 addUserKnob {7 hue_offset l "hue offset" t "Rotate the despill vectors to despill an arbitrary tone other than the primaries.\nNote: A rotation of +-120 degrees is the same as selecting another color channel." R -180 180}
 addUserKnob {7 tolerance t "Use this to multiply the hue tolerance (the limiter value). You can move it all the way down to 0 to completely remove a hue from your image." R 0 2}
 tolerance 1
 addUserKnob {6 prot1_activate l "protect tones" t "Enable controls to select tones to protect from despilling." +STARTLINE}
 addUserKnob {6 prot1_preview l preview t "Output the protected tones." -STARTLINE +DISABLED}
 addUserKnob {18 prot1 l protect t "Pick the central hue to protect.\n(ctrl/cmd+alt+click)" +HIDDEN}
 prot1 {0 0 0}
 addUserKnob {6 prot1_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 prot1_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 prot1_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 prot1_tolerance l tolerance t "Amount of hues to include in the selection." +HIDDEN}
 prot1_tolerance 0.2
 addUserKnob {7 prot1_falloff l falloff t "Falloff for the hue selection. A higher falloff will make hues apart from the picked one lose weight more quickly." +HIDDEN R 0 4}
 prot1_falloff 2
 addUserKnob {7 prot1_effect l effect t "Multiplier for the hue protection, and for the spill limit value." +HIDDEN R 0 10}
 prot1_effect 1
 addUserKnob {26 respill_divider l "" +STARTLINE}
 addUserKnob {4 respill_math l "respill math" t "Settings for the way of desaturating the spill before adding it back." M {"Rec 709" "Ccir 601" Average Maximum "" ""}}
 addUserKnob {18 respill_color l "respill color" t "RGB multiplier for the desaturated spill when adding it back.\n\nNote: if used on non-degrained plates (which should be avoided anyway), any value other than 1 here will most likely produce grain artifacts." R 0 4}
 respill_color 1
 addUserKnob {6 respill_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 respill_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 respill_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {41 maskChannelMask l mask T Merge.maskChannelMask}
 addUserKnob {41 inject -STARTLINE T Merge.inject}
 addUserKnob {41 invert_mask l invert -STARTLINE T Merge.invert_mask}
 addUserKnob {41 fringe -STARTLINE T Merge.fringe}
 addUserKnob {41 mix T Merge.mix}
 addUserKnob {26 version_author l "" t "apDespill v1.0\n14 March, 2017" +STARTLINE T "<span style=\"color:#666\"><br/><b>apDespill v1.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2014-2017</span>"}
 addUserKnob {20 GPU_Settings l "GPU Settings"}
 addUserKnob {41 maxGPUMemory l "Percentage of GPU memory to use" T apDespillKernel.maxGPUMemory}
 addUserKnob {41 maxTileLines l "Percentage of image height per tile" T apDespillKernel.maxTileLines}
}
 Input {
  inputs 0
  name Inputmask
  selected true
  xpos 339
  ypos -580
  number 1
 }
 Input {
  inputs 0
  name Inputimg
  selected true
  xpos 449
  ypos -608
 }
set N232ef000 [stack 0]
 Shuffle {
  name Shuffle
  selected true
  xpos 559
  ypos -608
  disable {{"\[exists parent.input0]"}}
 }
 BlinkScript {
  ProgramGroup 1
  KernelDescription "2 \"apDespillKernel\" iterate pixelWise 86d17838f15464a9e9273cd415388c19006f9163a6efd15e7ad521c828dc89ac 2 \"src\" Read Point \"dst\" Write Point 17 \"limit\" Float 1 AACAPw== \"shift\" Float 1 AAAAAA== \"weights\" Float 1 AAAAAA== \"outmode\" Int 1 AAAAAA== \"output_alpha\" Int 1 AAAAAA== \"clr\" Int 1 AAAAAA== \"mode\" Int 1 AAAAAA== \"respill_math\" Int 1 AAAAAA== \"respill_color\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"prot1_on\" Int 1 AAAAAA== \"prot1_preview\" Int 1 AAAAAA== \"prot1\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"prot1_tolerance\" Float 1 AAAAAA== \"prot1_mult\" Float 1 AAAAAA== \"prot1_falloff\" Float 1 AAAAAA== \"lumaHueShift\" Int 1 AAAAAA== \"pickSpill\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== 17 \"limit\" 1 1 \"shift\" 1 1 \"weights\" 1 1 \"outmode\" 1 1 \"output_alpha\" 1 1 \"clr\" 1 1 \"mode\" 1 1 \"respill_math\" 1 1 \"respill_color\" 4 1 \"prot1_on\" 1 1 \"prot1_preview\" 1 1 \"prot1\" 3 1 \"prot1_tolerance\" 1 1 \"prot1_mult\" 1 1 \"prot1_falloff\" 1 1 \"lumaHueShift\" 1 1 \"pickSpill\" 3 1 3 \"_usePicked\" Int 1 1 AAAAAA== \"_clr\" Int 1 1 AAAAAA== \"_ret\" Int 1 1 AAAAAA=="
  kernelSource "//---------------------------------------------------------\n// apDespillKernel - apDespill v1.0 by Adrian Pueyo\n//\n// Despill an image, with options to despill any hue (and\n// not only the primaries), select different algorithms for\n// des/respilling, and protect tones from the despill.\n//\n// adrianpueyo.com, 2014-2017\n// ---------------------------------------------------------\n\nstatic inline float y_convert_ccir601(const float4 in)\{\n  return in.x * 0.299f + in.y * 0.587f + in.z * 0.114f;\n\}\n\nstatic inline float y_convert_rec709(const float4 in)\{\n  return in.x * 0.2125f + in.y * 0.7154f + in.z * 0.0721f;\n\}\n\nstatic inline float4 hueShift(const float4 in, const float H)\{\n  if(H==0.0f)\{\n    return in;\n  \}else\{\n    float U = cos(H*PI/180);\n    float W = sin(H*PI/180);\n    float3 ret;\n    ret.x = (.299+.701*U+.168*W)*in.x + (.587-.587*U+.330*W)*in.y + (.114-.114*U-.497*W)*in.z;\n    ret.y = (.299-.299*U-.328*W)*in.x + (.587+.413*U+.035*W)*in.y + (.114-.114*U+.292*W)*in.z;\n    ret.z = (.299-.3*U+1.25*W)*in.x + (.587-.588*U-1.05*W)*in.y + (.114+.886*U-.203*W)*in.z;\n    return float4(ret.x,ret.y,ret.z,in\[3]);\n  \}\n\}\n\nstatic inline float4 hueRotate(const float4 in, const float H)\{\n  if(H==0.0f)\{\n    return in;\n  \}else\{\n    float cosH = cos(H*PI/180);\n    float sinH = sin(H*PI/180);\n    float3 ret;\n    ret.x = (in.x+in.y+in.z)*(1-cosH)/3 + in.x*cosH + (-in.y/sqrt(3.0f)+in.z/sqrt(3.0f))*sinH;\n    ret.y = (in.x+in.y+in.z)*(1-cosH)/3 + in.y*cosH + (in.x/sqrt(3.0f)-in.z/sqrt(3.0f))*sinH;\n    ret.z = (in.x+in.y+in.z)*(1-cosH)/3 + in.z*cosH + (-in.x/sqrt(3.0f)+in.y/sqrt(3.0f))*sinH;\n    return float4(ret.x,ret.y,ret.z,in\[3]);\n  \}\n\}\n\nfloat3 vecToPlane(float3 v1, float3 v2 = float3(1.0f,1.0f,1.0f))\{\n  float3 v1onv2;\n  v1onv2 = v2 * float((float(dot(v2,v1))/float(dot(v2,v2)))); //Projection of vector on another (plane's normal)\n  return v1-v1onv2; //Projection of vector on plane\n\}\n\nstatic inline float colorAngle(const float3 v1, const float3 v2)\{\n  const float3 vN=float3(1.0f,1.0f,1.0f);\n  float ang = acos(float(dot(v1,v2))/float(sqrt(dot(v1,v1)*dot(v2,v2))));\n  float3 crs = cross(v1,v2);\n  if (dot(vN, crs) > 0) \{\n    ang = -ang;\n  \}\n  return ang;\n\}\n\nkernel apDespillKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src;\n  Image<eWrite> dst;\n\n  param:\n    float limit;\n    float shift;\n    float weights;\n    int outmode;//0=despill,1=spill\n    int output_alpha;\n    int clr; //0=red,1=green,2=blue\n    int mode; //0=average,1=maximum,2=minimum,3=custom\n    int respill_math; //0=Rec709,1=Ccir601,2=Avg,3=Max\n    float4 respill_color;\n    int prot1_on;\n    int prot1_preview;\n    float3 prot1;\n    float prot1_tolerance;\n    float prot1_mult;\n    float prot1_falloff;\n    int lumaHueShift;//If disabled, the hue is just rotated without the luma coefficients\n    float3 pickSpill;\n  local:\n    int _usePicked;\n    int _clr;\n    int _ret;\n\n  void define() \{\n    defineParam(limit, \"limit\", 1.0f);\n    defineParam(shift, \"shift\", 0.0f);\n  \}\n\n  void init() \{\n    _ret = 0;\n    if(clr!=3)\{//red green or blue\n      _usePicked = 0;\n      _clr = clr;\n    \}else if(pickSpill.x==pickSpill.y && pickSpill.x==pickSpill.z)\{\n      _ret = 1;//if \"custom\" selected but has a gray value, avoid any calculations\n    \}else\{\n      _usePicked = 1;\n      _clr = 0;\n    \}\n  \}\n\n  void process() \{\n\n    if(_ret == 1)\{ dst()=src(); return; \}//Avoid any calculations if no despill selected\n    //0. Calculate autoShift if picked spill is not 0\n    float autoShift = 0.0f;\n    if(_usePicked==1)\{\n      float3 vNorm = float3(1.0f,1.0f,1.0f);\n      autoShift = colorAngle(vecToPlane(pickSpill,vNorm),vecToPlane(float3(1.0f,0.0f,0.0f),vNorm));\n      autoShift = autoShift*180/PI;//to deg\n    \}\n\n    //1. HueShift IN\n    float4 despilled;\n    if (lumaHueShift==1)\{\n      despilled = hueShift(src(),shift-autoShift);\n    \}else\{\n      despilled = hueRotate(src(),shift-autoShift);\n    \}\n\n    //2. Calculate the limit\n    float resultLimit = 0.0f;\n    int2 others;\n    if(_clr==0)\{//If red (and if _usePicked, also set red)\n      others = int2(1,2);\n    \}else if(_clr==1)\{\n      others=int2(0,2);\n    \}else if(_clr==2)\{\n      others=int2(0,1);\n    \}\n\n    if(mode==0)\{//average\n      resultLimit = (despilled\[others\[0]]+despilled\[others\[1]])/2;\n    \}else if(mode==1)\{//max\n      resultLimit = max(despilled\[others\[0]],despilled\[others\[1]]);\n    \}else if(mode==2)\{//min\n      resultLimit = min(despilled\[others\[0]],despilled\[others\[1]]);\n    \}else\{//custom\n      resultLimit = despilled\[others\[0]]*weights+despilled\[others\[1]]*(1-weights);\n    \}\n\n    //3. Protect tones\n    float prot1_result;\n    if(prot1_on==1&&(prot1\[0]!=prot1\[1]||prot1\[0]!=prot1\[2]||prot1\[1]!=prot1\[2]))\{\n      float cos_prot1_angle;\n      cos_prot1_angle = (src(0)*prot1\[0]+src(1)*prot1\[1]+src(2)*prot1\[2]) / (sqrt(prot1\[0]*prot1\[0]+prot1\[1]*prot1\[1]+prot1\[2]*prot1\[2]) * sqrt(src(0)*src(0)+src(1)*src(1)+src(2)*src(2)));\n      prot1_result = pow(clamp(cos_prot1_angle,0.0f,1.0f),1/pow(prot1_tolerance,prot1_falloff));\n      resultLimit = resultLimit*(1+prot1_result*prot1_mult);\n    \}\n    \n\n    //4. Calculate the despill and return the hue shift\n    for (int component = 0; component < dst.kComps; component++)\{\n      despilled\[component] = component==_clr?min(despilled\[component],resultLimit*limit):despilled\[component];\n    \}\n    if (lumaHueShift==1)\{\n      despilled = hueShift(despilled,-shift+autoShift);\n    \}else\{\n      despilled = hueRotate(despilled,-shift+autoShift);\n    \}\n\n    //5. Respill/restore despill values\n    float luma;\n    float4 spill = src()-despilled;\n    if(respill_math==0)\{\n      luma = y_convert_rec709(spill);\n    \}else if(respill_math==1)\{\n      luma = y_convert_ccir601(spill);\n    \}else if(respill_math==2)\{\n      luma = (spill\[0]+spill\[1]+spill\[2])/3;\n    \}else\{\n      luma = max(max(spill\[0],spill\[1]),spill\[2]);\n    \}\n\n    //6. Output (options)\n    if(prot1_preview==1 && prot1_on==1)\{\n      dst() = src()*clamp(prot1_result*prot1_mult,0.0f,1.0f);\n    \}else if(outmode==0)\{\n      dst() = despilled+luma*respill_color;\n      if(output_alpha==0)\{\n        dst(3)=src(3);\n      \}else\{\n        dst(3)=luma;\n      \}\n    \}else\{\n      if(output_alpha==0)\{\n        spill\[3]=src(3);\n      \}else\{\n        spill\[3]=luma;\n      \}\n      dst() = spill;\n    \}\n    //dst() = hueRotate(src(),shift-autoShift);\n    //dst() = autoShift;\n  \}\n\};"
  rebuild ""
  apDespillKernel_limit {{parent.tolerance}}
  apDespillKernel_shift {{parent.hue_offset}}
  apDespillKernel_weights {{(parent.custom_weight+1)/2}}
  apDespillKernel_outmode {{parent.out}}
  apDespillKernel_output_alpha {{parent.output_alpha}}
  apDespillKernel_clr {{parent.color}}
  apDespillKernel_mode {{parent.mode}}
  apDespillKernel_respill_math {{parent.respill_math}}
  apDespillKernel_respill_color {{parent.respill_color.r} {parent.respill_color.g} {parent.respill_color.b} 1}
  apDespillKernel_prot1_on {{parent.prot1_activate}}
  apDespillKernel_prot1_preview {{parent.prot1_preview}}
  apDespillKernel_prot1 {{parent.prot1} {parent.prot1} {parent.prot1}}
  apDespillKernel_prot1_tolerance {{parent.prot1_tolerance}}
  apDespillKernel_prot1_mult {{parent.prot1_effect}}
  apDespillKernel_prot1_falloff {{parent.prot1_falloff}}
  apDespillKernel_pickSpill {{parent.pick} {parent.pick} {parent.pick}}
  rebuild_finalise ""
  maxGPUMemory 60
  maxTileLines 8
  name apDespillKernel
  selected true
  xpos 559
  ypos -584
 }
push $N232ef000
 Merge2 {
  inputs 2+1
  operation copy
  bbox B
  name Merge
  selected true
  xpos 449
  ypos -580
 }
 Output {
  name Output
  selected true
  xpos 449
  ypos -552
 }
end_group
Dot {
 name Dot445
 selected true
 xpos -5163
 ypos 9119
}
Dot {
 name Dot446
 selected true
 xpos -3952
 ypos 9119
}
Log2Lin {
 operation lin2log
 black 0
 name Log2Lin2
 selected true
 xpos -3986
 ypos 9243
}
Grade {
 multiply {1.04305 1.0429 1.0428 1}
 multiply_panelDropped true
 name Grade4
 selected true
 xpos -3986
 ypos 9269
}
Dot {
 name Dot447
 selected true
 xpos -3952
 ypos 9313
}
push $N21f3d890
Log2Lin {
 operation lin2log
 black 0
 name Log2Lin3
 selected true
 xpos -3257
 ypos 9160
}
Merge2 {
 inputs 2
 operation hard-light
 name Merge81
 selected true
 xpos -3257
 ypos 9309
}
Log2Lin {
 name Log2Lin4
 selected true
 xpos -3257
 ypos 9353
}
Merge2 {
 inputs 2
 name Merge82
 selected true
 xpos -3257
 ypos 10031
}
ColorLookup {
 lut {master {curve C 0 x0.5264871716 0.5957711339 x1 1}
   red {}
   green {}
   blue {}
   alpha {}}
 name ColorLookup4
 selected true
 xpos -3257
 ypos 10302
}
Grain2 {
 name Grain2_9
 label "Kodak 5218"
 selected true
 xpos -3257
 ypos 10469
 red_size 0.04
 green_size 2.4
 blue_size 1.91
 green_i 0.86
 blue_i 0.73
 red_m 0.049
 green_m 0.085
 blue_m 0.1
 black {0 0 0}
 minimum {0 0 0}
}
Write {
 file //lux/collection/MOFAstock/00_INBOX/NUKE_JM/KeySample/FinalImage/v03/KeyExample_v03.%05d.jpg
 file_type jpeg
 _jpeg_quality 1
 _jpeg_sub_sampling 4:2:2
 checkHashOnRead false
 in_colorspace linear
 out_colorspace linear
 name Write3
 selected true
 xpos -3257
 ypos 10536
 addUserKnob {20 caravr l CaraVR}
 addUserKnob {4 viewPresets l "View Presets" M {main stereo cams all}}
 addUserKnob {22 set l Set -STARTLINE T "w = nuke.thisNode()\nscriptViews = nuke.views()\nviewPreset = w\['viewPresets'].getValue()\nselectedViews = None\nif viewPreset == 0:\n  selectedViews = \['main']\nif viewPreset == 1:\n  stereoViews = \['left', 'right']\n  if set(stereoViews).issubset(set(scriptViews)):\n    selectedViews = stereoViews\n  else:\n    selectedViews = None\nelif viewPreset == 2:\n  selectedViews = \[v for v in scriptViews if 'cam' in v.lower()]\nelif viewPreset == 3:\n  selectedViews = scriptViews\nif selectedViews:\n  w\['views'].fromScript(' '.join(selectedViews))\n"}
}
push $cut_paste_input
RotoPaint {
 output alpha
 cliptype none
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097152}
    {t x4486c000 x44100000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {cubiccurve Brush19 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x4422199a x443fe666 1}
       {x44218ccd x443f2666 1}
       {x4421599a x443e999a 1}
       {x44214000 x443e0000 1}
       {x4420d99a x443cd99a 1}
       {x4420c000 x443bb333 1}
       {x4420f333 x443c0000 1}
       {x44212666 x443cc000 1}
       {x44214000 x443d6666 1}
       {x44217333 x443f2666 1}
       {x44217333 x443f7333 1}
       {x4421a666 x4440199a 1}
       {x4421a666 x443f8ccd 1}
       {x4421a666 x443f2666 1}
       {x4421a666 x443ec000 1}
       {x44217333 x443d8000 1}
       {x44217333 x443cd99a 1}
       {x44217333 x443c8ccd 1}
       {x44217333 x443d0ccd 1}
       {x4421a666 x443de666 1}
       {x4421d99a x443e199a 1}
       {x44224ccd x443e0000 1}
       {x44238ccd x443cf333 1}
       {x4423c000 x443cc000 1}
       {x4424599a x443c599a 1}
       {x4424999a x443c4000 1}
       {x44253333 x443ca666 1}}}
     {tx x4487c000 x4421fda1 x443dc16d}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush18 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x444b599a x4468cccd 1}
       {x444a8000 x4468999a 1}
       {x444b0000 x4468cccd 1}
       {x444bc000 x44694000 1}
       {x444c2666 x4469a666 1}
       {x444c4000 x4469f333 1}
       {x444b8ccd x44698ccd 1}
       {x444a8000 x4468b333 1}
       {x444a4ccd x44688000 1}
       {x444a3333 x44683333 1}
       {x444acccd x44684ccd 1}
       {x444c4000 x4468e666 1}
       {x444cb333 x44690000 1}
       {x444d4ccd x4468cccd 1}}}
     {tx x4487c000 x444b78b0 x4468edb6}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush17 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x44820ccd x444ae666 1}
       {x44822666 x444a6666 1}
       {x4482599a x444a3333 1}
       {x44828000 x444a199a 1}
       {x4482cccd x444a199a 1}
       {x44830666 x444a4000 1}
       {x4482f99a x444a8000 1}
       {x4482b99a x444acccd 1}
       {x44822000 x444b599a 1}
       {x4481c666 x444b8ccd 1}
       {x4481799a x444ba666 1}
       {x4481a000 x444ac000 1}
       {x44826ccd x444a0ccd 1}
       {x4482a666 x444a0ccd 1}
       {x44823333 x444ac000 1}
       {x4481f333 x444af333 1}
       {x4481a000 x444b6666 1}}}
     {tx x4487c000 x448242a3 x444ab0f1}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush16 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x4462c000 x446a7333 1}
       {x44623333 x446a4ccd 1}
       {x4461e666 x446a4000 1}
       {x4462999a x446a199a 1}
       {x44634000 x446a199a 1}
       {x4464a666 x446a4ccd 1}
       {x4464f333 x446a4ccd 1}
       {x44657333 x446a7333 1}
       {x44662666 x446a8ccd 1}
       {x44658ccd x446a8ccd 1}
       {x44646666 x446a6666 1}
       {x4463e666 x446a4ccd 1}
       {x4463999a x446a4000 1}
       {x44648ccd x446a0000 1}
       {x4464cccd x446a0000 1}
       {x44656666 x446a199a 1}
       {x4465199a x446a0000 1}
       {x4464d99a x446a0000 1}
       {x4463a666 x4469d99a 1}
       {x44630ccd x4469cccd 1}
       {x4462599a x4469b333 1}
       {x4462e666 x4469a666 1}
       {x44627333 x4469b333 1}
       {x44623333 x4469b333 1}
       {x445ef333 x4469b333 1}}}
     {tx x4487c000 x4463a9fc x446a199c}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush15 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x447db333 x445ce666 1}
       {x447e4ccd x445c4000 1}
       {x447ec000 x445be666 1}
       {x447f6666 x445bb333 1}
       {x447ed99a x445c199a 1}
       {x447dd99a x445c7333 1}
       {x447db333 x445c199a 1}
       {x447e2666 x445b999a 1}
       {x447e6666 x445b8ccd 1}}}
     {tx x4487c000 x447e582c x445c0fa4}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush14 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x4480b333 x4454c000 1}
       {x4480d333 x4454999a 1}
       {x4480e666 x44546666 1}
       {x44810666 x44544000 1}
       {x4481c666 x44533333 1}
       {x4481e000 x44530000 1}
       {x44818000 x44538000 1}
       {x4481599a x4453a666 1}
       {x44806666 x4454e666 1}
       {x44802666 x4455199a 1}
       {x447fe666 x4455599a 1}
       {x4480199a x4454a666 1}
       {x44806000 x44543333 1}
       {x4480c000 x4453c000 1}
       {x4480f333 x4453999a 1}
       {x44810ccd x44537333 1}
       {x4480cccd x44538000 1}
       {x44806666 x4453cccd 1}
       {x44802666 x4454199a 1}
       {x447fe666 x44548000 1}
       {x447fb333 x4454c000 1}
       {x44804ccd x4453c000 1}
       {x44806666 x44530ccd 1}
       {x44807333 x44527333 1}
       {x44808666 x4451d99a 1}
       {x4480999a x44518ccd 1}
       {x44806666 x44524000 1}
       {x4480399a x4452c000 1}
       {x447f999a x44540ccd 1}
       {x447f0000 x4454e666 1}
       {x447f4ccd x4454599a 1}
       {x44801333 x44534ccd 1}
       {x44806666 x4452b333 1}
       {x4480cccd x44522666 1}
       {x4480f333 x44520000 1}
       {x44812ccd x4451b333 1}
       {x44816ccd x44516666 1}
       {x44814000 x44518ccd 1}
       {x4480f99a x4451e666 1}
       {x44805333 x4452e666 1}
       {x44800666 x44537333 1}
       {x447fd99a x4453a666 1}
       {x447f4000 x4454599a 1}}}
     {tx x4487c000 x44808ca5 x44537712}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush13 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x446ef333 x44662666 1}
       {x446f6666 x44664000 1}
       {x446f0000 x44667333 1}
       {x446e3333 x4466999a 1}
       {x446cc000 x4466999a 1}
       {x446b8ccd x44668ccd 1}
       {x446c3333 x4466b333 1}
       {x446ce666 x4466e666 1}
       {x446d3333 x44670ccd 1}
       {x446dcccd x44674ccd 1}
       {x446e599a x4467999a 1}
       {x446eb333 x4467c000 1}
       {x446f0000 x4467f333 1}
       {x446e8000 x4467999a 1}
       {x446d999a x4466e666 1}
       {x446ca666 x44660000 1}
       {x446d0ccd x44662666 1}
       {x446d999a x44667333 1}
       {x446e0ccd x4466d99a 1}
       {x446e8000 x4467599a 1}
       {x446ecccd x4467a666 1}
       {x446e8ccd x4467599a 1}
       {x446e599a x44673333 1}
       {x446eb333 x4467599a 1}
       {x446f199a x4467999a 1}
       {x446f6666 x4467cccd 1}
       {x446fb333 x4467c000 1}
       {x446ecccd x4466c000 1}
       {x446ed99a x44672666 1}
       {x446ed99a x44678000 1}}}
     {tx x4487c000 x446e2b19 x44670aac}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush12 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x446e8ccd x44673333 1}
       {x446dcccd x44672666 1}
       {x446e199a x44670ccd 1}
       {x446ed99a x44670ccd 1}
       {x446fc000 x44672666 1}
       {x4470199a x44673333 1}
       {x446f4000 x4467599a 1}
       {x446ea666 x44677333 1}
       {x446d8000 x4467999a 1}
       {x446d0ccd x4467a666 1}
       {x446e0ccd x4467a666 1}
       {x446ed99a x4467c000 1}
       {x446f7333 x4467c000 1}
       {x446fc000 x4467c000 1}
       {x446f6666 x4467cccd 1}
       {x446f0000 x4467cccd 1}
       {x446e0ccd x4467e666 1}
       {x446dc000 x4467e666 1}
       {x446e4000 x4467f333 1}
       {x446e8ccd x44680ccd 1}
       {x446e0ccd x44683333 1}
       {x446dcccd x44683333 1}}}
     {tx x4487c000 x446e9209 x44679dad}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush11 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x445a599a x44683333 1}
       {x445a199a x44680ccd 1}
       {x445a199a x4467cccd 1}
       {x445a599a x4467cccd 1}
       {x445ad99a x4467cccd 1}
       {x445bb333 x4467f333 1}
       {x445acccd x44680ccd 1}
       {x4459f333 x4467f333 1}
       {x44594000 x4467e666 1}
       {x4458cccd x4467cccd 1}
       {x44590ccd x4467cccd 1}
       {x445b4ccd x44683333 1}
       {x445af333 x44684000 1}
       {x445aa666 x44684000 1}
       {x445a3333 x44684000 1}
       {x4459f333 x44684000 1}
       {x445a3333 x44684000 1}
       {x445a8ccd x4468599a 1}
       {x445ad99a x4468599a 1}
       {x445a6666 x44688000 1}
       {x4459cccd x4468999a 1}
       {x445a199a x44688000 1}
       {x445aa666 x4468999a 1}
       {x445b4ccd x4468c000 1}
       {x445bc000 x4468c000 1}}}
     {tx x4487c000 x445a65e1 x446832b1}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush10 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x4423199a x44338000 1}
       {x44244ccd x44336666 1}
       {x4425199a x44336666 1}}}
     {tx x4487c000 x44242aab x44336eef}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush9 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x44230000 x4435e666 1}
       {x4423cccd x44358ccd 1}
       {x44242666 x44358ccd 1}
       {x4424e666 x44358ccd 1}}}
     {tx x4487c000 x4423f666 x4435a333}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush8 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x44210ccd x4439599a 1}
       {x44217333 x44394000 1}
       {x44228000 x44390000 1}
       {x4423599a x4438e666 1}
       {x44244ccd x4438e666 1}}}
     {tx x4487c000 x442287ae x4439147b}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush7 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x441ef333 x443c599a 1}
       {x441fe666 x443c3333 1}
       {x44208000 x443c199a 1}
       {x4422d99a x443c0000 1}
       {x4426a666 x443b999a 1}}}
     {tx x4487c000 x4421c51e x443c0ccd}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush6 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x44402666 x44660000 1}
       {x443fe666 x4465a666 1}}}
     {tx x4487c000 x44400666 x4465d333}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush5 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x443f3333 x4461f333 1}
       {x443f4ccd x44623333 1}
       {x443fe666 x44624ccd 1}
       {x4440999a x44627333 1}
       {x44440ccd x44632666 1}
       {x44444ccd x44634000 1}
       {x4444e666 x44632666 1}
       {x44463333 x4462e666 1}
       {x4447c000 x44628ccd 1}
       {x4448199a x44628ccd 1}
       {x44470ccd x4462e666 1}}}
     {tx x4487c000 x4443c253 x4462ab0f}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush4 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x44831333 x4440999a 1}
       {x44834000 x4440c000 1}
       {x44836000 x44410000 1}
       {x44838ccd x4441b333 1}
       {x44838000 x44420ccd 1}
       {x44834000 x4442c000 1}
       {x4482d333 x44434000 1}
       {x44826ccd x4443999a 1}
       {x44824000 x4443b333 1}
       {x4481d333 x4443b333 1}
       {x44818666 x4443b333 1}
       {x44816666 x4443b333 1}
       {x4481399a x4443999a 1}
       {x4480e000 x4443599a 1}
       {x44808000 x4442a666 1}
       {x44806666 x44420ccd 1}
       {x44806666 x44417333 1}
       {x44806666 x44410000 1}
       {x44804666 x44408000 1}
       {x44802666 x443fe666 1}
       {x44802666 x443f8ccd 1}
       {x44802666 x443f0ccd 1}
       {x4480399a x443ed99a 1}
       {x447fd99a x443e599a 1}
       {x447f999a x443e199a 1}
       {x447f599a x443da666 1}
       {x447f0000 x443d4ccd 1}
       {x447e6666 x443cf333 1}
       {x447dcccd x443c599a 1}
       {x447d7333 x443c199a 1}
       {x447d3333 x443bd99a 1}
       {x447cc000 x443b999a 1}
       {x447c2666 x443b6666 1}
       {x447ba666 x443b2666 1}
       {x447b4ccd x443acccd 1}
       {x447b4ccd x443a8ccd 1}
       {x447b4ccd x443a4ccd 1}
       {x447b0ccd x443a3333 1}
       {x447a8000 x443a0ccd 1}
       {x447a199a x443a0ccd 1}
       {x447a199a x443a4ccd 1}
       {x447a199a x443a8ccd 1}
       {x447a199a x443acccd 1}
       {x447a0000 x443b2666 1}
       {x4479c000 x443b6666 1}}}
     {tx x4487c000 x447fcba6 x443ec962}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush3 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x4470d99a x446a0ccd 1}
       {x4470d99a x446a8000 1}
       {x4470d99a x446ac000 1}
       {x4470999a x446bb333 1}
       {x4470999a x446bf333 1}
       {x446fa666 x446bd99a 1}
       {x446dc000 x446ac000 1}
       {x446e3333 x446b0000 1}
       {x446e7333 x446b199a 1}
       {x446f4ccd x446bd99a 1}
       {x44700000 x446ccccd 1}
       {x446fc000 x446ca666 1}
       {x446f4ccd x446c7333 1}
       {x446ef333 x446c3333 1}
       {x446f8000 x446c8ccd 1}
       {x4470599a x446d2666 1}
       {x4470b333 x446d8000 1}
       {x4471e666 x446e3333 1}
       {x4472999a x446e7333 1}
       {x4472d99a x446e599a 1}
       {x4473cccd x446dd99a 1}
       {x4475f333 x446d999a 1}
       {x44772666 x446d999a 1}
       {x4476a666 x446ce666 1}
       {x44768ccd x446ca666 1}
       {x44768ccd x446bf333 1}
       {x4477999a x446b8000 1}
       {x4477c000 x446ae666 1}
       {x44760ccd x4469cccd 1}
       {x44746666 x4469199a 1}
       {x44730000 x4468999a 1}
       {x4472999a x44686666 1}
       {x44728000 x44682666 1}
       {x4471cccd x44673333 1}
       {x4470f333 x4466199a 1}
       {x44708000 x44652666 1}
       {x4470f333 x44656666 1}
       {x4470f333 x44652666 1}
       {x4470f333 x4464cccd 1}
       {x4470d99a x4464599a 1}
       {x4470b333 x4463d99a 1}
       {x4471cccd x44638000 1}
       {x44733333 x44632666 1}
       {x4473b333 x44628ccd 1}
       {x44737333 x44623333 1}
       {x44738ccd x4461599a 1}
       {x4473f333 x44614000 1}
       {x44746666 x4461199a 1}
       {x44750000 x4460e666 1}
       {x4475599a x4460e666 1}
       {x44764ccd x4460a666 1}
       {x44768ccd x44602666 1}
       {x4476cccd x445ff333 1}
       {x44770000 x445f8ccd 1}
       {x4476e666 x445ed99a 1}
       {x44772666 x445de666 1}
       {x4478199a x445d8ccd 1}
       {x4478b333 x445d7333 1}
       {x4478b333 x445d3333 1}
       {x44790ccd x445d3333 1}
       {x44790ccd x445da666 1}
       {x4478cccd x445e0000 1}
       {x4477999a x445fb333 1}
       {x44763333 x44614000 1}
       {x4475d99a x4461d99a 1}
       {x44768ccd x4461d99a 1}
       {x44770000 x4461d99a 1}
       {x44780000 x4461999a 1}
       {x4479a666 x4460e666 1}
       {x447a4000 x44608000 1}
       {x447a999a x445fcccd 1}
       {x4479a666 x445ed99a 1}
       {x44794ccd x445e2666 1}
       {x4479e666 x445c0000 1}
       {x447a4000 x445b6666 1}
       {x447ab333 x445af333 1}
       {x447bcccd x445a3333 1}
       {x447c4000 x44596666 1}
       {x447b8ccd x44588ccd 1}
       {x447b3333 x44584ccd 1}
       {x447c0000 x44583333 1}
       {x447dcccd x44580ccd 1}
       {x447ec000 x4457b333 1}
       {x447e8000 x4457599a 1}
       {x44802666 x44574000 1}
       {x4480a000 x44574000 1}
       {x4480cccd x44574000 1}
       {x44806666 x4457199a 1}
       {x447fb333 x4456c000 1}
       {x447ff333 x4456a666 1}
       {x4480a000 x4456c000 1}
       {x4480c000 x4456c000 1}
       {x44804666 x44566666 1}
       {x4480a000 x44562666 1}
       {x44818666 x44562666 1}
       {x4481a666 x44560ccd 1}
       {x44812ccd x4455f333 1}
       {x44808000 x44557333 1}
       {x44802666 x4455199a 1}
       {x447e2666 x44548000 1}
       {x447dcccd x44546666 1}
       {x447d8ccd x44544000 1}
       {x447d3333 x4453cccd 1}
       {x447d599a x44538ccd 1}
       {x447dcccd x44533333 1}
       {x447e0ccd x4452d99a 1}
       {x447e6666 x4452599a 1}
       {x447ec000 x44520000 1}
       {x447f199a x44518000 1}
       {x447f999a x44508ccd 1}
       {x44800666 x444f999a 1}
       {x44806666 x444f0000 1}
       {x44809333 x444ee666 1}
       {x44809333 x444e8ccd 1}
       {x4480a000 x444e3333 1}
       {x4480e000 x444df333 1}
       {x44810ccd x444db333 1}
       {x44814666 x444d599a 1}
       {x44814666 x444d199a 1}
       {x4481399a x444ca666 1}
       {x4481399a x444c6666 1}
       {x4481399a x444bcccd 1}
       {x44810ccd x444b599a 1}
       {x4480e000 x444b0000 1}
       {x4480c000 x444a8000 1}
       {x44809333 x444a0000 1}
       {x44808000 x44498ccd 1}
       {x44808000 x44490ccd 1}
       {x44808000 x4448b333 1}
       {x44806666 x44484000 1}
       {x44800666 x44474ccd 1}
       {x447f8000 x44468ccd 1}
       {x447f4000 x44467333 1}
       {x447f8000 x44450000 1}
       {x44800666 x4444cccd 1}
       {x44802666 x4444a666 1}
       {x4480399a x44447333 1}
       {x44809333 x44444ccd 1}
       {x4480b333 x44447333 1}}}
     {tx x4487c000 x4479a8b6 x445bf816}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush2 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x4467e666 x44682666 1}
       {x44673333 x4467e666 1}
       {x4466999a x44678ccd 1}
       {x4465e666 x44670ccd 1}
       {x44668000 x44674ccd 1}
       {x44688000 x44686666 1}
       {x44690000 x4468c000 1}
       {x4469199a x44690000 1}
       {x4467a666 x44684000 1}
       {x4466199a x44677333 1}
       {x4466999a x44678ccd 1}
       {x44674ccd x4467cccd 1}
       {x44678ccd x4467cccd 1}
       {x44674ccd x44673333 1}}}
     {tx x4487c000 x44675f17 x4467de2d}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}
    {cubiccurve Brush1 512 catmullrom
     {cc
      {f 2080}
      {px x4487c000
       {x44503333 x44658000 1}
       {x44512666 x44658000 1}
       {x44534ccd x4465c000 1}
       {x44544000 x4465c000 1}
       {x4455f333 x4465e666 1}
       {x44533333 x4465a666 1}
       {x44518000 x44656666 1}
       {x44500000 x44654ccd 1}
       {x444f999a x44652666 1}
       {x44537333 x4465a666 1}
       {x4457d99a x4466599a 1}
       {x44584ccd x44668000 1}
       {x4452f333 x44664000 1}
       {x444ee666 x4465c000 1}
       {x444d999a x4465a666 1}
       {x44500000 x4465e666 1}
       {x4454c000 x4466d99a 1}
       {x4455cccd x4466f333 1}
       {x4452999a x4466d99a 1}
       {x444f2666 x4466599a 1}
       {x444e7333 x44664000 1}
       {x4450199a x44668000 1}
       {x4451c000 x4466f333 1}
       {x44510ccd x4466f333 1}
       {x4450199a x4466f333 1}
       {x444fc000 x4466f333 1}
       {x444f8000 x4466d99a 1}
       {x444f2666 x4466d99a 1}
       {x444ecccd x4466f333 1}
       {x444dd99a x44670ccd 1}
       {x444d4000 x44670ccd 1}
       {x444c4ccd x44670ccd 1}
       {x444f8000 x44660000 1}
       {x44520000 x4465a666 1}}}
     {tx x4487c000 x44513c9c x44664365}
     {a ro 0 go 0 bo 0 ao 0 bu 1 str 1 spx x4486c000 spy x44100000 sb 1 ltn x4487c000 ltm x4487c000 ltt x40000000 tt x41880000}}}}}}
 toolbox {brush {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 ltn 1086 ltm 1086 tt 17 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_lifetime_type single
 toolbar_lifetime_start 1086
 toolbar_lifetime_end 1086
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1078 576}
 colorOverlay {0 0 0 0}
 lifetime_start 1086
 lifetime_end 1086
 motionblur_shutter_offset_type centred
 brush_spacing 0.05000000075
 brush_hardness 0.200000003
 source_black_outside true
 name RotoPaint4
 selected true
 xpos -4492
 ypos 7476
}
Read {
 inputs 0
 file /jobs/RUSTCITY/dc0410/ELEMENT/E_dc0410_roto_id_fg01_s01_00_L020_v009/2156x1152/e_dc0410_roto_id_fg01_s01_00_L020_v009.####.exr
 localizationPolicy off
 format "2156 1152 0 0 2156 1152 1 RUSTCITY Delivery"
 proxy_format "640 480 0 0 640 480 1 PC_Video"
 first 1001
 last 1319
 origfirst 1001
 origlast 1319
 origset true
 smartGrade true
 name Read11
 label "<font size=3 color=green> Approved"
 selected true
 xpos -4341
 ypos 7205
 postage_stamp_frame 1160
 addUserKnob {20 Ivy}
 addUserKnob {22 ivy_documentation l "Ivy Documentation" t "Open IvyTab documentation page in your web browser" T "__import__('dnnuke.utils.asst.common', fromlist=\['openDocsName']).openDocsName('IvyTab')" +STARTLINE}
 addUserKnob {26 divider4 l "" +STARTLINE}
 addUserKnob {1 _ivyVals l "" +STARTLINE +HIDDEN}
 _ivyVals "\{'ivy_job': '', 'ivy_usemanualuri': False, 'leafname': '', 'ivy_vnum': 0, 'ivy_twignametags': \{\}, 'ivy_shot': '', 'ivy_regex': False, 'ivy_type': '', 'ivy_versionquery': '', 'spider_uri': ''\}"
 addUserKnob {52 ivyTab l "" -STARTLINE T "__import__('nukescripts').panels.WidgetKnob(__import__('dnnuke.core.ivy.tab.widget.query', fromlist=\['getBoundKnob']).getBoundKnob(nuke.thisNode()))"}
 addUserKnob {1 _ivyFile l "" +STARTLINE +HIDDEN +INVISIBLE}
 _ivyFile /jobs/RUSTCITY/dc0410/ELEMENT/E_dc0410_roto_id_fg01_s01_00_L020_v009/2156x1152/e_dc0410_roto_id_fg01_s01_00_L020_v009.####.exr
 addUserKnob {78 _expressions l "" -STARTLINE +HIDDEN +INVISIBLE n 1}
 _expressions {{curve}}
 addUserKnob {26 divider0 l "" +STARTLINE}
 addUserKnob {20 dbinfo l "DB Info" n 1}
 dbinfo 0
 addUserKnob {1 twig_dnuuid l "Twig Id"}
 twig_dnuuid 812230a9-f03c-4afd-a91e-22445eaa2c7a
 addUserKnob {1 stalk_dnuuid l "Stalk Id"}
 stalk_dnuuid 78538077-65f3-451b-a30c-9c714ab448ba
 addUserKnob {1 twigtype_dnuuid l "Twig Type Id"}
 twigtype_dnuuid e9f824fa-c932-4c3e-acbd-c612fb5ea846
 addUserKnob {1 leaf_dnuuid l "Leaf Id"}
 leaf_dnuuid e3d433f5-f0c5-4d7e-bace-cf0cf70a486c
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {1 twigtype l "Twig Type"}
 twigtype elmr
 addUserKnob {1 leaf_label l Leaf}
 leaf_label main_proxy0
 addUserKnob {1 ivy_version l Version}
 ivy_version 9
 addUserKnob {43 ivy_notes l Notes}
 ivy_notes "Roto Done"
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {1 build_label l "Build Label"}
 addUserKnob {20 dbinfoEndGroup l "DB Info" n -1}
}
ChannelMerge {
 inputs 2
 name ChannelMerge6
 selected true
 xpos -4477
 ypos 7544
}
