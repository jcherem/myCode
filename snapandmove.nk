set cut_paste_input [stack 0]
version 10.5 v7
push $cut_paste_input
NoOp {
 name SnapAndMove
 tile_color 0xccffff
 selected true
 xpos -9269
 ypos 30804
 addUserKnob {20 SnapAndMove}
 addUserKnob {13 GeoPivot +INVISIBLE}
 addUserKnob {26 lable l "" +STARTLINE T "\n<font color='cyan'>Snap&Move_v02 /// Michael Loithaler "}
 addUserKnob {26 ""}
 addUserKnob {1 SelectedGeo l "Selected Geo" t "Please select the 3D object, that you want to work with.\n\nPlease note: selecting a new geometry, will break all links to the old geometry."}
 addUserKnob {22 SelectGeo l "Select This Geo" T "### SelectNode\nthisNode = str(nuke.selectedNode().name())\nthisNodeClass = nuke.selectedNode().Class()\n\n###BreakRotationExpression\ntry:\n    TransformGeoName = nuke.thisNode().knob(\"hidden_transform_geo_name\").getValue()\n    nuke.toNode(TransformGeoName).knob(\"rotate\").clearAnimated()\nexcept:\n    pass\n\nnuke.thisNode().knob(\"rotateX\").setValue(0)\nnuke.thisNode().knob(\"rotateY\").setValue(0)\nnuke.thisNode().knob(\"rotateZ\").setValue(0)\nnuke.thisNode().knob(\"GeoPivot\").setValue(0)\n\n\n###3D Object List\ngeoNodes = \[\"Card\",\"Cube\",\"Sphere\",\"ReadGeo2\",\"Cylinder\",\"Card2\",\"ReadGeo\"]\n\n###Needed for TransforGeoCheck\nstatus = True\n\n###Check if 3D Object\nif thisNodeClass in geoNodes:\n    nuke.thisNode().knob(\"SnapPivot\").setVisible(status)\n    nuke.thisNode().knob(\"TopPivot\").setVisible(status)\n    nuke.thisNode().knob(\"CenterPivot\").setVisible(status)\n    nuke.thisNode().knob(\"BottomPivot\").setVisible(status)\n    nuke.thisNode().knob(\"MoveGeo\").setVisible(status)\n    nuke.thisNode().knob(\"MoveToPoint\").setVisible(status)\n    nuke.thisNode().knob(\"ResetGeo\").setVisible(status)\n    nuke.thisNode().knob(\"setGeoToZero\").setVisible(status)\n    nuke.thisNode().knob(\"ResetNode\").setVisible(status)\n    nuke.thisNode().knob(\"CreateLinkedTransform\").setVisible(status)\n    nuke.thisNode().knob(\"SelectedGeo\").setValue(thisNode)\nelse:\n    nuke.message(\"Please select a 3D Object\")" +STARTLINE}
 addUserKnob {26 SnapPivot l "Snap Pivot" +HIDDEN}
 addUserKnob {22 TopPivot l "Top Pivot" +HIDDEN T "### def variables\nx_min = 0\nx_max = 0\n\ny_min = 0\ny_max = 0\n\nz_min = 0\nz_max = 0\n\nvertices_list_x = \[]\nvertices_list_y = \[]\nvertices_list_z = \[]\n\ntranslate_x = 0\ntranslate_y = 0\ntranslate_z = 0\n\n### get the selected Geo\nselectedGeoName = nuke.thisNode().knob(\"SelectedGeo\").getValue()\nselectedGeoObj = nuke.toNode(selectedGeoName)\n\ntranslate_x = selectedGeoObj.knob(\"translate\").getValue()\[0]\ntranslate_y = selectedGeoObj.knob(\"translate\").getValue()\[1]\ntranslate_z = selectedGeoObj.knob(\"translate\").getValue()\[2]\n\n### create a python dublicte of the geo\npyg = nuke.nodes.PythonGeo() \npyg.setInput(0, selectedGeoObj) \ngObj = pyg\['geo'].getGeometry()\[0] \n\n\n### get x, y, z coordiantes of the vertices\npoints = gObj.points() \npoint_amount = len(points)/3\n\n### iterating over x coordinates\nfor i in range(0, len(points)-2, 3):\n        \n    vertices_list_x.append(points\[i])\n\nx_min = min(vertices_list_x)\nx_max = max(vertices_list_x)\n\n\n### iterating over y coordinates\nfor i in range(1, len(points)-1, 3):\n\t\t\n\tvertices_list_y.append(points\[i])\n\t\t\ny_min = min(vertices_list_y)\ny_max = max(vertices_list_y)\n\t\t\n\n### iterating over z coordinates\nfor i in range(2, len(points), 3):\n\t\t\n\tvertices_list_z.append(points\[i])\n\t\t\nz_min = min(vertices_list_z)\nz_max = max(vertices_list_z)\n\t\t\n\n### calculate top pivot coordinates\npivot_x = (x_min + x_max)/2\npivot_y = y_max\npivot_z = (z_min + z_max)/2\n\n### set geometries pivot to calculated coordinates\nselectedGeoObj\['pivot'].setValue(pivot_x,0)\nselectedGeoObj\['pivot'].setValue(pivot_y,1)\nselectedGeoObj\['pivot'].setValue(pivot_z,2)\n\n#GeoPivot Value\nnuke.thisNode().knob(\"GeoPivot\").setValue(pivot_x,0)\nnuke.thisNode().knob(\"GeoPivot\").setValue(pivot_y,1)\nnuke.thisNode().knob(\"GeoPivot\").setValue(pivot_z,2)\n\n### delete PythonGeo node after it isn't needed any more\nnuke.delete(pyg)" +STARTLINE}
 addUserKnob {26 space l "" -STARTLINE T "     "}
 addUserKnob {22 CenterPivot l "Center Pivot" -STARTLINE +HIDDEN T "### def variables\nx_min = 0\nx_max = 0\n\ny_min = 0\ny_max = 0\n\nz_min = 0\nz_max = 0\n\nvertices_list_x = \[]\nvertices_list_y = \[]\nvertices_list_z = \[]\n\ntranslate_x = 0\ntranslate_y = 0\ntranslate_z = 0\n\n### get the selected Geo\nselectedGeoName = nuke.thisNode().knob(\"SelectedGeo\").getValue()\nselectedGeoObj = nuke.toNode(selectedGeoName)\n\ntranslate_x = selectedGeoObj.knob(\"translate\").getValue()\[0]\ntranslate_y = selectedGeoObj.knob(\"translate\").getValue()\[1]\ntranslate_z = selectedGeoObj.knob(\"translate\").getValue()\[2]\n\n\n### create a python dublicte of the geo\npyg = nuke.nodes.PythonGeo() \npyg.setInput(0, selectedGeoObj) \ngObj = pyg\['geo'].getGeometry()\[0] \n\n\n### get x, y, z coordiantes of the vertices\npoints = gObj.points() \npoint_amount = len(points)/3\n\n\n### iterating over x coordinates\nfor i in range(0, len(points)-2, 3):\n        \n    vertices_list_x.append(points\[i])\n\nx_min = min(vertices_list_x)\nx_max = max(vertices_list_x)\n\n\n### iterating over y coordinates\nfor i in range(1, len(points)-1, 3):\n\t\t\n\tvertices_list_y.append(points\[i])\n\t\t\ny_min = min(vertices_list_y)\ny_max = max(vertices_list_y)\n\t\t\n\n### iterating over z coordinates\nfor i in range(2, len(points), 3):\n\t\t\n\tvertices_list_z.append(points\[i])\n\t\t\nz_min = min(vertices_list_z)\nz_max = max(vertices_list_z)\n\t\t\n\n### calculate top pivot coordinates\npivot_x = (x_min + x_max)/2\npivot_y = (y_min + y_max)/2\npivot_z = (z_min + z_max)/2\n\n### set geometries pivot to calculated coordinates\nselectedGeoObj\['pivot'].setValue(pivot_x,0)\nselectedGeoObj\['pivot'].setValue(pivot_y,1)\nselectedGeoObj\['pivot'].setValue(pivot_z,2)\n\n#GeoPivot Value\nnuke.thisNode().knob(\"GeoPivot\").setValue(pivot_x,0)\nnuke.thisNode().knob(\"GeoPivot\").setValue(pivot_y,1)\nnuke.thisNode().knob(\"GeoPivot\").setValue(pivot_z,2)\n\n### delete PythonGeo node after it isn't needed any more\nnuke.delete(pyg)"}
 addUserKnob {26 space_1 l "" -STARTLINE T "     "}
 addUserKnob {22 BottomPivot l "Bottom Pivot" -STARTLINE +HIDDEN T "### def variables\nx_min = 0\nx_max = 0\n\ny_min = 0\ny_max = 0\n\nz_min = 0\nz_max = 0\n\nvertices_list_x = \[]\nvertices_list_y = \[]\nvertices_list_z = \[]\n\ntranslate_x = 0\ntranslate_y = 0\ntranslate_z = 0\n\n### get the selected Geo\nselectedGeoName = nuke.thisNode().knob(\"SelectedGeo\").getValue()\nselectedGeoObj = nuke.toNode(selectedGeoName)\n\ntranslate_x = selectedGeoObj.knob(\"translate\").getValue()\[0]\ntranslate_y = selectedGeoObj.knob(\"translate\").getValue()\[1]\ntranslate_z = selectedGeoObj.knob(\"translate\").getValue()\[2]\n\n\n### create a python dublicte of the geo\npyg = nuke.nodes.PythonGeo() \npyg.setInput(0, selectedGeoObj) \ngObj = pyg\['geo'].getGeometry()\[0] \n\n\n### get x, y, z coordiantes of the vertices\npoints = gObj.points() \npoint_amount = len(points)/3\n\n\n### iterating over x coordinates\nfor i in range(0, len(points)-2, 3):\n        \n    vertices_list_x.append(points\[i])\n\nx_min = min(vertices_list_x)\nx_max = max(vertices_list_x)\n\n\n### iterating over y coordinates\nfor i in range(1, len(points)-1, 3):\n\t\t\n\tvertices_list_y.append(points\[i])\n\t\t\ny_min = min(vertices_list_y)\ny_max = max(vertices_list_y)\n\t\t\n\n### iterating over z coordinates\nfor i in range(2, len(points), 3):\n\t\t\n\tvertices_list_z.append(points\[i])\n\t\t\nz_min = min(vertices_list_z)\nz_max = max(vertices_list_z)\n\t\t\n\n### calculate top pivot coordinates\npivot_x = (x_min + x_max)/2\npivot_y = y_min\npivot_z = (z_min + z_max)/2\n\n### set geometries pivot to calculated coordinates\nselectedGeoObj\['pivot'].setValue(pivot_x,0)\nselectedGeoObj\['pivot'].setValue(pivot_y,1)\nselectedGeoObj\['pivot'].setValue(pivot_z,2)\n\n#GeoPivot Value\nnuke.thisNode().knob(\"GeoPivot\").setValue(pivot_x,0)\nnuke.thisNode().knob(\"GeoPivot\").setValue(pivot_y,1)\nnuke.thisNode().knob(\"GeoPivot\").setValue(pivot_z,2)\n\n### delete PythonGeo node after it isn't needed any more\nnuke.delete(pyg)"}
 addUserKnob {26 MoveGeo l "Move Geo" +HIDDEN}
 addUserKnob {22 MoveToPoint l "Move to Vertex" +HIDDEN T "selectedGeoName = nuke.thisNode().knob(\"SelectedGeo\").getValue()\nselectedGeoObj = nuke.toNode(selectedGeoName)\n\nfor info in nukescripts.snap3d.selectedVertexInfos(): \n    position = info.position \n\nxPivot = selectedGeoObj.knob(\"pivot\").getValue()\[0]\nyPivot = selectedGeoObj.knob(\"pivot\").getValue()\[1]\nzPivot = selectedGeoObj.knob(\"pivot\").getValue()\[2]\n\nselectedGeoObj.knob(\"translate\").setValue(position\[0] - xPivot,0)\nselectedGeoObj.knob(\"translate\").setValue(position\[1] - yPivot,1)\nselectedGeoObj.knob(\"translate\").setValue(position\[2] - zPivot,2)\n\n" +STARTLINE}
 addUserKnob {26 space_2 l "" -STARTLINE T "     "}
 addUserKnob {22 setGeoToZero l "Move to Origin" -STARTLINE +HIDDEN T "selectedGeoName = nuke.thisNode().knob(\"SelectedGeo\").getValue()\nselectedGeoObj = nuke.toNode(selectedGeoName)\n\nxPivot = selectedGeoObj.knob(\"pivot\").getValue()\[0]\nyPivot = selectedGeoObj.knob(\"pivot\").getValue()\[1]\nzPivot = selectedGeoObj.knob(\"pivot\").getValue()\[2]\n\n\nselectedGeoObj.knob(\"translate\").setValue(xPivot*-1,0)\nselectedGeoObj.knob(\"translate\").setValue(yPivot*-1,1)\nselectedGeoObj.knob(\"translate\").setValue(zPivot*-1,2)"}
 addUserKnob {26 ResetGeo l "Reset Geo" +HIDDEN}
 addUserKnob {22 ResetNode l "Reset Geo" +HIDDEN T "###Reset Geo\nselectedGeoName = nuke.thisNode().knob(\"SelectedGeo\").getValue()\nselectedGeoObj = nuke.toNode(selectedGeoName)\nselectedGeoObj.knob(\"pivot\").setValue(0)\nselectedGeoObj.knob(\"translate\").setValue(0)\n\nNodeList = nuke.allNodes()\nstatusCheck = nuke.thisNode().knob(\"hidden_transform_geo_name\").getValue()\n\nfor i in NodeList:\n    if i.name() == statusCheck:\n         nuke.thisNode().knob(\"transformGeoCreated\").setValue(1)\n         break\n    else:\n        nuke.thisNode().knob(\"transformGeoCreated\").setValue(0)\n\n###Reset Transform Geo Node\nif nuke.thisNode().knob(\"transformGeoCreated\").getValue():\n    print \"hekki\"\n    TransformNodeName = nuke.thisNode().knob(\"hidden_transform_geo_name\").getValue()\n    TransformNodeNode = nuke.toNode(TransformNodeName)\n    TransformNodeNode.knob(\"translate\").setValue(0)\n    TransformNodeNode.knob(\"scaling\").setValue(1)" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {22 CreateLinkedTransform l "Create Linked Transform" +HIDDEN T "###Make visible\nstatus = True\n\nnuke.thisNode().knob(\"hidden_transform_geo_name\").setVisible(status)\nnuke.thisNode().knob(\"Rotate\").setVisible(status)\nnuke.thisNode().knob(\"rotateX\").setVisible(status)\nnuke.thisNode().knob(\"rotateY\").setVisible(status)\nnuke.thisNode().knob(\"rotateZ\").setVisible(status)\nnuke.thisNode().knob(\"BreakRotationLink\").setVisible(status)\nnuke.thisNode().knob(\"LinkRotation\").setVisible(False)\n\n###Get name of Geo\nselectedGeoName = nuke.thisNode().knob(\"SelectedGeo\").getValue()\nselectedGeoObj = nuke.toNode(selectedGeoName)\n\n###Create Transform Geo\nTransformGeoNode = nuke.createNode(\"TransformGeo\")\n\n###Link Transform Geo to Geo\nTransformGeoNode.setInput(0, selectedGeoObj)\n\nTransformName = TransformGeoNode.name()\nnuke.thisNode().knob(\"hidden_transform_geo_name\").setValue(TransformName)\n\nnuke.thisNode().knob(\"transformGeoCreated\").setValue(True)\n\n\n###Link Pivot\n\nnewPivotX = nuke.thisNode().knob(\"GeoPivot\").getValue(0) + selectedGeoObj.knob(\"translate\").getValue(0)\nnewPivotY = nuke.thisNode().knob(\"GeoPivot\").getValue(1) + selectedGeoObj.knob(\"translate\").getValue(1)\nnewPivotZ = nuke.thisNode().knob(\"GeoPivot\").getValue(2) + selectedGeoObj.knob(\"translate\").getValue(2)\n\nTransformGeoNode.knob(\"pivot\").setValue(newPivotX,0)\nTransformGeoNode.knob(\"pivot\").setValue(newPivotY,1)\nTransformGeoNode.knob(\"pivot\").setValue(newPivotZ,2)\n\n\n###Link Rotation\nTransformGeoNode.knob(\"rotate\").setExpression(\"SnapAndMove.rotateX\",0)\nTransformGeoNode.knob(\"rotate\").setExpression(\"SnapAndMove.rotateY\",1)\nTransformGeoNode.knob(\"rotate\").setExpression(\"SnapAndMove.rotateZ\",2)\n\n\n" +STARTLINE}
 addUserKnob {1 hidden_transform_geo_name l "" +STARTLINE +HIDDEN}
 addUserKnob {20 Rotate +HIDDEN n 1}
 addUserKnob {6 transformGeoCreated +INVISIBLE +STARTLINE}
 transformGeoCreated true
 addUserKnob {7 rotateX l "rotate x" +HIDDEN R -180 180}
 addUserKnob {7 rotateY l "rotate y" +HIDDEN R -180 180}
 addUserKnob {7 rotateZ l "rotate z" +HIDDEN R -180 180}
 addUserKnob {22 BreakRotationLink l "Break Rotation Link" +HIDDEN T "###BreakRotationExpression\ntry:\n    TransformGeoName = nuke.thisNode().knob(\"hidden_transform_geo_name\").getValue()\n    nuke.toNode(TransformGeoName).knob(\"rotate\").clearAnimated()\n    nuke.thisNode().knob(\"BreakRotationLink\").setVisible(False)\n    nuke.thisNode().knob(\"LinkRotation\").setVisible(True)\nexcept:\n    pass\n" +STARTLINE}
 addUserKnob {22 LinkRotation l "Link Rotation" T "###LinkRotationExpression\ntry:\n    TransformGeoName = nuke.thisNode().knob(\"hidden_transform_geo_name\").getValue()\n    nuke.toNode(TransformGeoName).knob(\"rotate\").setExpression(\"SnapAndMove.rotateX\",0)\n    nuke.toNode(TransformGeoName).knob(\"rotate\").setExpression(\"SnapAndMove.rotateY\",1)\n    nuke.toNode(TransformGeoName).knob(\"rotate\").setExpression(\"SnapAndMove.rotateZ\",2)\n\n    nuke.thisNode().knob(\"BreakRotationLink\").setVisible(True)\n    nuke.thisNode().knob(\"LinkRotation\").setVisible(False)\nexcept:\n    pass\n" +STARTLINE}
 addUserKnob {20 endGroup_1 l endGroup n -1}
}
